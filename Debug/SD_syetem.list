
SD_syetem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007418  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079b0  080079b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b8  080079b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b8  080079b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080079c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000009c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009cc  200009cc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b1f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b6  00000000  00000000  00035b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00038e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  00039fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023baf  00000000  00000000  0003b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fb0  00000000  00000000  0005ebe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbfc3  00000000  00000000  00075b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141b5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004920  00000000  00000000  00141bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007588 	.word	0x08007588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007588 	.word	0x08007588

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <Ringbuf_init+0x3c>)
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <Ringbuf_init+0x40>)
 80004d4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <Ringbuf_init+0x44>)
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <Ringbuf_init+0x48>)
 80004da:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <Ringbuf_init+0x4c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <Ringbuf_init+0x4c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f042 0201 	orr.w	r2, r2, #1
 80004ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <Ringbuf_init+0x4c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68da      	ldr	r2, [r3, #12]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <Ringbuf_init+0x4c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f042 0220 	orr.w	r2, r2, #32
 80004fa:	60da      	str	r2, [r3, #12]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200000b8 	.word	0x200000b8
 800050c:	20000028 	.word	0x20000028
 8000510:	200000bc 	.word	0x200000bc
 8000514:	20000070 	.word	0x20000070
 8000518:	200003f8 	.word	0x200003f8

0800051c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	6039      	str	r1, [r7, #0]
 8000526:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	3301      	adds	r3, #1
 800052e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000532:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	429a      	cmp	r2, r3
 800053c:	d007      	beq.n	800054e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	79f9      	ldrb	r1, [r7, #7]
 8000546:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <Uart_write>:
    return c;
  }
}

void Uart_write(int c)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if (c>0)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	dd21      	ble.n	80005ae <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <Uart_write+0x60>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	3301      	adds	r3, #1
 8000572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000576:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000578:	bf00      	nop
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <Uart_write+0x60>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	429a      	cmp	r2, r3
 8000584:	d0f9      	beq.n	800057a <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <Uart_write+0x60>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <Uart_write+0x60>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	b2c9      	uxtb	r1, r1
 8000594:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <Uart_write+0x60>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <Uart_write+0x64>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68da      	ldr	r2, [r3, #12]
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <Uart_write+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005ac:	60da      	str	r2, [r3, #12]
	}
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000bc 	.word	0x200000bc
 80005c0:	200003f8 	.word	0x200003f8

080005c4 <Uart_sendstring>:
	}
  else return -1;
}

void Uart_sendstring (const char *s)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80005cc:	e006      	b.n	80005dc <Uart_sendstring+0x18>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffc0 	bl	800055c <Uart_write>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f4      	bne.n	80005ce <Uart_sendstring+0xa>
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <Uart_isr>:
	return 0;
}


void Uart_isr (UART_HandleTypeDef *huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	f003 0320 	and.w	r3, r3, #32
 800060e:	2b00      	cmp	r3, #0
 8000610:	d013      	beq.n	800063a <Uart_isr+0x4a>
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00e      	beq.n	800063a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <Uart_isr+0xac>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff72 	bl	800051c <store_char>
        return;
 8000638:	e02c      	b.n	8000694 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000640:	2b00      	cmp	r3, #0
 8000642:	d027      	beq.n	8000694 <Uart_isr+0xa4>
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	2b00      	cmp	r3, #0
 800064c:	d022      	beq.n	8000694 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <Uart_isr+0xb0>)
 8000650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <Uart_isr+0xb0>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	429a      	cmp	r2, r3
 8000658:	d108      	bne.n	800066c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68da      	ldr	r2, [r3, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000668:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800066a:	e012      	b.n	8000692 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <Uart_isr+0xb0>)
 800066e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <Uart_isr+0xb0>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <Uart_isr+0xb0>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	3301      	adds	r3, #1
 800067c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <Uart_isr+0xb0>)
 8000682:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	7bba      	ldrb	r2, [r7, #14]
 8000690:	605a      	str	r2, [r3, #4]
    	return;
 8000692:	bf00      	nop
    }
}
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000b8 	.word	0x200000b8
 80006a0:	20000070 	.word	0x20000070

080006a4 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e007      	b.n	80006c0 <clear_buffer+0x1c>
 80006b0:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <clear_buffer+0x30>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b7f      	cmp	r3, #127	; 0x7f
 80006c4:	ddf4      	ble.n	80006b0 <clear_buffer+0xc>
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	200002f4 	.word	0x200002f4

080006d8 <send_uart>:
{
	for (int i=0; i<PATH_SIZE; i++) path[i] = '\0';
}

void send_uart (char *string)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
//	uint8_t len = strlen ((const char *) string);
//	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
	Uart_sendstring(string);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff6f 	bl	80005c4 <Uart_sendstring>
	clear_buffer();
 80006e6:	f7ff ffdd 	bl	80006a4 <clear_buffer>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <mount_sd>:
		else break;
	}
}

void mount_sd (void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	490a      	ldr	r1, [pc, #40]	; (8000724 <mount_sd+0x30>)
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <mount_sd+0x34>)
 80006fe:	f006 fe75 	bl	80073ec <f_mount>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <mount_sd+0x38>)
 8000708:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <mount_sd+0x38>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <mount_sd+0x26>
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <mount_sd+0x3c>)
 8000714:	f7ff ffe0 	bl	80006d8 <send_uart>
	else send_uart("SD CARD mounted successfully...\n");
}
 8000718:	e002      	b.n	8000720 <mount_sd+0x2c>
	else send_uart("SD CARD mounted successfully...\n");
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <mount_sd+0x40>)
 800071c:	f7ff ffdc 	bl	80006d8 <send_uart>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	080075a0 	.word	0x080075a0
 8000728:	200000c0 	.word	0x200000c0
 800072c:	200002f0 	.word	0x200002f0
 8000730:	080075a4 	.word	0x080075a4
 8000734:	080075c4 	.word	0x080075c4

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fbb6 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f812 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f91c 	bl	8000980 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000748:	f000 f878 	bl	800083c <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 800074c:	f000 f896 	bl	800087c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000750:	f006 f890 	bl	8006874 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000754:	f000 f8bc 	bl	80008d0 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000758:	f000 f8e4 	bl	8000924 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 800075c:	f7ff feb6 	bl	80004cc <Ringbuf_init>
  mount_sd();
 8000760:	f7ff ffc8 	bl	80006f4 <mount_sd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x2c>
	...

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	; 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f006 fefe 	bl	8007578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a27      	ldr	r2, [pc, #156]	; (8000834 <SystemClock_Config+0xcc>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <SystemClock_Config+0xd0>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007dc:	23a8      	movs	r3, #168	; 0xa8
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e4:	2307      	movs	r3, #7
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 ff77 	bl	80026e0 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f8:	f000 f92e 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000808:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2105      	movs	r1, #5
 800081a:	4618      	mov	r0, r3
 800081c:	f002 f9d8 	bl	8002bd0 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000826:	f000 f917 	bl	8000a58 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SDIO_SD_Init+0x38>)
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <MX_SDIO_SD_Init+0x3c>)
 8000844:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SDIO_SD_Init+0x38>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SDIO_SD_Init+0x38>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SDIO_SD_Init+0x38>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SDIO_SD_Init+0x38>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_SDIO_SD_Init+0x38>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <MX_SDIO_SD_Init+0x38>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	20000374 	.word	0x20000374
 8000878:	40012c00 	.word	0x40012c00

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f003 fd37 	bl	8004326 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f8cb 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200003f8 	.word	0x200003f8
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART2_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000908:	f003 fd0d 	bl	8004326 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f8a1 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000043c 	.word	0x2000043c
 8000920:	40004400 	.word	0x40004400

08000924 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2204      	movs	r2, #4
 8000934:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2202      	movs	r2, #2
 800093a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2202      	movs	r2, #2
 8000946:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2201      	movs	r2, #1
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	f000 fe8f 	bl	800168a <HAL_PCD_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f871 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000480 	.word	0x20000480

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a2c      	ldr	r2, [pc, #176]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <MX_GPIO_Init+0xd0>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	21c0      	movs	r1, #192	; 0xc0
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <MX_GPIO_Init+0xd4>)
 8000a28:	f000 fe16 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a2c:	23c0      	movs	r3, #192	; 0xc0
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0xd4>)
 8000a44:	f000 fc6c 	bl	8001320 <HAL_GPIO_Init>

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <HAL_SD_MspInit+0xc0>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d14a      	bne.n	8000b6c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_SD_MspInit+0xc4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b2a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b2e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <HAL_SD_MspInit+0xc8>)
 8000b48:	f000 fbea 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <HAL_SD_MspInit+0xcc>)
 8000b68:	f000 fbda 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40012c00 	.word	0x40012c00
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a49      	ldr	r2, [pc, #292]	; (8000cc8 <HAL_UART_MspInit+0x144>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d153      	bne.n	8000c4e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a47      	ldr	r2, [pc, #284]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <HAL_UART_MspInit+0x14c>)
 8000c18:	f000 fb82 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c1c:	2340      	movs	r3, #64	; 0x40
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4827      	ldr	r0, [pc, #156]	; (8000cd4 <HAL_UART_MspInit+0x150>)
 8000c38:	f000 fb72 	bl	8001320 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2025      	movs	r0, #37	; 0x25
 8000c42:	f000 faa4 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c46:	2025      	movs	r0, #37	; 0x25
 8000c48:	f000 fabd 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4c:	e038      	b.n	8000cc0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <HAL_UART_MspInit+0x154>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d133      	bne.n	8000cc0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c90:	230c      	movs	r3, #12
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <HAL_UART_MspInit+0x14c>)
 8000cac:	f000 fb38 	bl	8001320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2026      	movs	r0, #38	; 0x26
 8000cb6:	f000 fa6a 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cba:	2026      	movs	r0, #38	; 0x26
 8000cbc:	f000 fa83 	bl	80011c6 <HAL_NVIC_EnableIRQ>
}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40004400 	.word	0x40004400

08000cdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfc:	d147      	bne.n	8000d8e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481b      	ldr	r0, [pc, #108]	; (8000d9c <HAL_PCD_MspInit+0xc0>)
 8000d30:	f000 faf6 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d46:	230a      	movs	r3, #10
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <HAL_PCD_MspInit+0xc0>)
 8000d52:	f000 fae5 	bl	8001320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6353      	str	r3, [r2, #52]	; 0x34
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_PCD_MspInit+0xbc>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2043      	movs	r0, #67	; 0x43
 8000d84:	f000 fa03 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000d88:	2043      	movs	r0, #67	; 0x43
 8000d8a:	f000 fa1c 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f8b0 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <USART1_IRQHandler+0x14>)
 8000dfa:	f7ff fbf9 	bl	80005f0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dfe:	4802      	ldr	r0, [pc, #8]	; (8000e08 <USART1_IRQHandler+0x14>)
 8000e00:	f003 fade 	bl	80043c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200003f8 	.word	0x200003f8

08000e0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <USART2_IRQHandler+0x10>)
 8000e12:	f003 fad5 	bl	80043c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000043c 	.word	0x2000043c

08000e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <OTG_FS_IRQHandler+0x10>)
 8000e26:	f000 fd4d 	bl	80018c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000480 	.word	0x20000480

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f006 fb53 	bl	8007530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fc55 	bl	8000738 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e9c:	080079c0 	.word	0x080079c0
  ldr r2, =_sbss
 8000ea0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea4:	200009cc 	.word	0x200009cc

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f94f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fdc0 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f967 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f92f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	2000098c 	.word	0x2000098c

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000098c 	.word	0x2000098c

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff feb6 	bl	8000f78 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d008      	beq.n	800122c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e052      	b.n	80012d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0216 	bic.w	r2, r2, #22
 800123a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <HAL_DMA_Abort+0x62>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127c:	e013      	b.n	80012a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127e:	f7ff fe7b 	bl	8000f78 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b05      	cmp	r3, #5
 800128a:	d90c      	bls.n	80012a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2220      	movs	r2, #32
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2203      	movs	r2, #3
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e015      	b.n	80012d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1e4      	bne.n	800127e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	223f      	movs	r2, #63	; 0x3f
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d004      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e00c      	b.n	8001312 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2205      	movs	r2, #5
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	e16b      	b.n	8001614 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 815a 	bne.w	800160e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d005      	beq.n	8001372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136e:	2b02      	cmp	r3, #2
 8001370:	d130      	bne.n	80013d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 0201 	and.w	r2, r3, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d017      	beq.n	8001410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d123      	bne.n	8001464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	69b9      	ldr	r1, [r7, #24]
 8001460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0203 	and.w	r2, r3, #3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80b4 	beq.w	800160e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_GPIO_Init+0x30c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a5f      	ldr	r2, [pc, #380]	; (800162c <HAL_GPIO_Init+0x30c>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_GPIO_Init+0x30c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c2:	4a5b      	ldr	r2, [pc, #364]	; (8001630 <HAL_GPIO_Init+0x310>)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_GPIO_Init+0x314>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d02b      	beq.n	8001546 <HAL_GPIO_Init+0x226>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_GPIO_Init+0x318>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d025      	beq.n	8001542 <HAL_GPIO_Init+0x222>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_GPIO_Init+0x31c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01f      	beq.n	800153e <HAL_GPIO_Init+0x21e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <HAL_GPIO_Init+0x320>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d019      	beq.n	800153a <HAL_GPIO_Init+0x21a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <HAL_GPIO_Init+0x324>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0x216>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4d      	ldr	r2, [pc, #308]	; (8001648 <HAL_GPIO_Init+0x328>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00d      	beq.n	8001532 <HAL_GPIO_Init+0x212>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_GPIO_Init+0x32c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d007      	beq.n	800152e <HAL_GPIO_Init+0x20e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <HAL_GPIO_Init+0x330>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_GPIO_Init+0x20a>
 8001526:	2307      	movs	r3, #7
 8001528:	e00e      	b.n	8001548 <HAL_GPIO_Init+0x228>
 800152a:	2308      	movs	r3, #8
 800152c:	e00c      	b.n	8001548 <HAL_GPIO_Init+0x228>
 800152e:	2306      	movs	r3, #6
 8001530:	e00a      	b.n	8001548 <HAL_GPIO_Init+0x228>
 8001532:	2305      	movs	r3, #5
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x228>
 8001536:	2304      	movs	r3, #4
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x228>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x228>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x228>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x228>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x310>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_GPIO_Init+0x334>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a32      	ldr	r2, [pc, #200]	; (8001654 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_GPIO_Init+0x334>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_GPIO_Init+0x334>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_GPIO_Init+0x334>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_GPIO_Init+0x334>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_GPIO_Init+0x334>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f ae90 	bls.w	800133c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40021400 	.word	0x40021400
 800164c:	40021800 	.word	0x40021800
 8001650:	40021c00 	.word	0x40021c00
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800168a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168c:	b08f      	sub	sp, #60	; 0x3c
 800168e:	af0a      	add	r7, sp, #40	; 0x28
 8001690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e10f      	b.n	80018bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fb10 	bl	8000cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fbae 	bl	8005e3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	687e      	ldr	r6, [r7, #4]
 80016e8:	466d      	mov	r5, sp
 80016ea:	f106 0410 	add.w	r4, r6, #16
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80016fe:	1d33      	adds	r3, r6, #4
 8001700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001702:	6838      	ldr	r0, [r7, #0]
 8001704:	f004 fa96 	bl	8005c34 <USB_CoreInit>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2202      	movs	r2, #2
 8001712:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0d0      	b.n	80018bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f004 fb9c 	bl	8005e5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e04a      	b.n	80017c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	333d      	adds	r3, #61	; 0x3d
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	333c      	adds	r3, #60	; 0x3c
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	b298      	uxth	r0, r3
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3344      	adds	r3, #68	; 0x44
 8001768:	4602      	mov	r2, r0
 800176a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3340      	adds	r3, #64	; 0x40
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3348      	adds	r3, #72	; 0x48
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	334c      	adds	r3, #76	; 0x4c
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3354      	adds	r3, #84	; 0x54
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	3301      	adds	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3af      	bcc.n	800172c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e044      	b.n	800185c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	3301      	adds	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3b5      	bcc.n	80017d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	687e      	ldr	r6, [r7, #4]
 800186e:	466d      	mov	r5, sp
 8001870:	f106 0410 	add.w	r4, r6, #16
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001880:	e885 0003 	stmia.w	r5, {r0, r1}
 8001884:	1d33      	adds	r3, r6, #4
 8001886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001888:	6838      	ldr	r0, [r7, #0]
 800188a:	f004 fb35 	bl	8005ef8 <USB_DevInit>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e00d      	b.n	80018bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fe65 	bl	8006584 <USB_DevDisconnect>

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b08d      	sub	sp, #52	; 0x34
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f004 ff06 	bl	80066ec <USB_GetMode>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 848a 	bne.w	80021fc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 fe6a 	bl	80065c6 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8480 	beq.w	80021fa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fe57 	bl	80065c6 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f002 0202 	and.w	r2, r2, #2
 8001930:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f004 fe45 	bl	80065c6 <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b10      	cmp	r3, #16
 8001944:	d161      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0210 	bic.w	r2, r2, #16
 8001954:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 020f 	and.w	r2, r3, #15
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	0c5b      	lsrs	r3, r3, #17
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	2b02      	cmp	r3, #2
 8001980:	d124      	bne.n	80019cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d035      	beq.n	80019fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6a38      	ldr	r0, [r7, #32]
 80019a2:	f004 fd97 	bl	80064d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b2:	441a      	add	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019c4:	441a      	add	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	621a      	str	r2, [r3, #32]
 80019ca:	e016      	b.n	80019fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	0c5b      	lsrs	r3, r3, #17
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	d110      	bne.n	80019fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019de:	2208      	movs	r2, #8
 80019e0:	4619      	mov	r1, r3
 80019e2:	6a38      	ldr	r0, [r7, #32]
 80019e4:	f004 fd76 	bl	80064d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f4:	441a      	add	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0210 	orr.w	r2, r2, #16
 8001a08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fdd9 	bl	80065c6 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a1e:	f040 80a7 	bne.w	8001b70 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fdde 	bl	80065ec <USB_ReadDevAllOutEpInterrupt>
 8001a30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001a32:	e099      	b.n	8001b68 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 808e 	beq.w	8001b5c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fe02 	bl	8006654 <USB_ReadDevOutEPInterrupt>
 8001a50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00c      	beq.n	8001a76 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fcfb 	bl	800246c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00c      	beq.n	8001a9a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2308      	movs	r3, #8
 8001a90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fdd1 	bl	800263c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d030      	beq.n	8001b22 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d109      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	78db      	ldrb	r3, [r3, #3]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2200      	movs	r2, #0
 8001b02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fbc3 	bl	8002296 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2302      	movs	r3, #2
 8001b20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b54:	461a      	mov	r2, r3
 8001b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	3301      	adds	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f47f af62 	bne.w	8001a34 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fd26 	bl	80065c6 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b84:	f040 80db 	bne.w	8001d3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 fd47 	bl	8006620 <USB_ReadDevAllInEpInterrupt>
 8001b92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b98:	e0cd      	b.n	8001d36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80c2 	beq.w	8001d2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 fd6d 	bl	8006690 <USB_ReadDevInEPInterrupt>
 8001bb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d057      	beq.n	8001c72 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	2201      	movs	r2, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69f9      	ldr	r1, [r7, #28]
 8001bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001be2:	4013      	ands	r3, r2
 8001be4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d132      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	334c      	adds	r3, #76	; 0x4c
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4403      	add	r3, r0
 8001c20:	3348      	adds	r3, #72	; 0x48
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4419      	add	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4403      	add	r3, r0
 8001c34:	334c      	adds	r3, #76	; 0x4c
 8001c36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x3a2>
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3354      	adds	r3, #84	; 0x54
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2101      	movs	r1, #1
 8001c62:	f004 fd75 	bl	8006750 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fad4 	bl	800221a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d023      	beq.n	8001d18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd2:	6a38      	ldr	r0, [r7, #32]
 8001cd4:	f004 fa74 	bl	80061c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	3338      	adds	r3, #56	; 0x38
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	78db      	ldrb	r3, [r3, #3]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fad4 	bl	80022ae <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d12:	461a      	mov	r2, r3
 8001d14:	2302      	movs	r3, #2
 8001d16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fb13 	bl	8002350 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f af2e 	bne.w	8001b9a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fc3f 	bl	80065c6 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d52:	d122      	bne.n	8001d9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fca3 	bl	80026c8 <HAL_PCDEx_LPM_Callback>
 8001d82:	e002      	b.n	8001d8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa7c 	bl	8002282 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fc11 	bl	80065c6 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dae:	d112      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fa54 	bl	800226e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001dd4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fbf3 	bl	80065c6 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dea:	f040 80b7 	bne.w	8001f5c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2110      	movs	r1, #16
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f004 f9d9 	bl	80061c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e12:	e046      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e20:	461a      	mov	r2, r3
 8001e22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e38:	0151      	lsls	r1, r2, #5
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	440a      	add	r2, r1
 8001e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e54:	461a      	mov	r2, r3
 8001e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6c:	0151      	lsls	r1, r2, #5
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	440a      	add	r2, r1
 8001e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e8c:	0151      	lsls	r1, r2, #5
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	440a      	add	r2, r1
 8001e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e9a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3b3      	bcc.n	8001e14 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ebe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d016      	beq.n	8001ef6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed8:	f043 030b 	orr.w	r3, r3, #11
 8001edc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eee:	f043 030b 	orr.w	r3, r3, #11
 8001ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef4:	e015      	b.n	8001f22 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f08:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f0c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1c:	f043 030b 	orr.w	r3, r3, #11
 8001f20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f46:	461a      	mov	r2, r3
 8001f48:	f004 fc02 	bl	8006750 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fb30 	bl	80065c6 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f70:	d124      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 fbc6 	bl	8006708 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 f99a 	bl	80062ba <USB_GetDevSpeed>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681c      	ldr	r4, [r3, #0]
 8001f92:	f001 f809 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8001f96:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f003 fea9 	bl	8005cf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f957 	bl	800225a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fb00 	bl	80065c6 <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d10a      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f938 	bl	8002246 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f002 0208 	and.w	r2, r2, #8
 8001fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 faeb 	bl	80065c6 <USB_ReadInterrupts>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d122      	bne.n	8002040 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002006:	2301      	movs	r3, #1
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	e014      	b.n	8002036 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f95f 	bl	80022ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	3301      	adds	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	429a      	cmp	r2, r3
 800203e:	d3e5      	bcc.n	800200c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f004 fabe 	bl	80065c6 <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002054:	d13b      	bne.n	80020ce <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002056:	2301      	movs	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	e02b      	b.n	80020b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	3340      	adds	r3, #64	; 0x40
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d115      	bne.n	80020ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002082:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002084:	2b00      	cmp	r3, #0
 8002086:	da12      	bge.n	80020ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	333f      	adds	r3, #63	; 0x3f
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f920 	bl	80022ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3301      	adds	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3ce      	bcc.n	800205c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fa77 	bl	80065c6 <USB_ReadInterrupts>
 80020d8:	4603      	mov	r3, r0
 80020da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020e2:	d155      	bne.n	8002190 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e4:	2301      	movs	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	e045      	b.n	8002176 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d12e      	bne.n	8002170 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002112:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	da2b      	bge.n	8002170 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002124:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002128:	429a      	cmp	r2, r3
 800212a:	d121      	bne.n	8002170 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216c:	6053      	str	r3, [r2, #4]
            break;
 800216e:	e007      	b.n	8002180 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3301      	adds	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	429a      	cmp	r2, r3
 800217e:	d3b4      	bcc.n	80020ea <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800218e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f004 fa16 	bl	80065c6 <USB_ReadInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d10a      	bne.n	80021bc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f88d 	bl	80022c6 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f004 fa00 	bl	80065c6 <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d115      	bne.n	80021fc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f879 	bl	80022da <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	e000      	b.n	80021fc <HAL_PCD_IRQHandler+0x938>
      return;
 80021fa:	bf00      	nop
    }
  }
}
 80021fc:	3734      	adds	r7, #52	; 0x34
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}

08002202 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da0c      	bge.n	800231c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 020f 	and.w	r2, r3, #15
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	; 0x38
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	e00c      	b.n	8002336 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 020f 	and.w	r2, r3, #15
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	3304      	adds	r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68f9      	ldr	r1, [r7, #12]
 800233c:	4618      	mov	r0, r3
 800233e:	f003 ffe1 	bl	8006304 <USB_EPStopXfer>
 8002342:	4603      	mov	r3, r0
 8002344:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002346:	7afb      	ldrb	r3, [r7, #11]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af02      	add	r7, sp, #8
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	3338      	adds	r3, #56	; 0x38
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	3304      	adds	r3, #4
 8002376:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a1a      	ldr	r2, [r3, #32]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	429a      	cmp	r2, r3
 8002382:	d901      	bls.n	8002388 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e06c      	b.n	8002462 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	429a      	cmp	r2, r3
 800239c:	d902      	bls.n	80023a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3303      	adds	r3, #3
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ac:	e02b      	b.n	8002406 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d902      	bls.n	80023ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3303      	adds	r3, #3
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4603      	mov	r3, r0
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f004 f835 	bl	8006458 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	441a      	add	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1a      	ldr	r2, [r3, #32]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	441a      	add	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	b29b      	uxth	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	d809      	bhi.n	8002430 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002424:	429a      	cmp	r2, r3
 8002426:	d203      	bcs.n	8002430 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1be      	bne.n	80023ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	429a      	cmp	r2, r3
 800243a:	d811      	bhi.n	8002460 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	2201      	movs	r2, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	43db      	mvns	r3, r3
 8002456:	6939      	ldr	r1, [r7, #16]
 8002458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800245c:	4013      	ands	r3, r2
 800245e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	333c      	adds	r3, #60	; 0x3c
 8002484:	3304      	adds	r3, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d17b      	bne.n	800259a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4a61      	ldr	r2, [pc, #388]	; (8002634 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	f240 80b9 	bls.w	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80b3 	beq.w	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ce:	461a      	mov	r2, r3
 80024d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d4:	6093      	str	r3, [r2, #8]
 80024d6:	e0a7      	b.n	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	461a      	mov	r2, r3
 80024f0:	2320      	movs	r3, #32
 80024f2:	6093      	str	r3, [r2, #8]
 80024f4:	e098      	b.n	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8093 	bne.w	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a4b      	ldr	r2, [pc, #300]	; (8002634 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d90f      	bls.n	800252a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002526:	6093      	str	r3, [r2, #8]
 8002528:	e07e      	b.n	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	440b      	add	r3, r1
 800254c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002556:	1ad2      	subs	r2, r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d114      	bne.n	800258c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002574:	461a      	mov	r2, r3
 8002576:	2101      	movs	r1, #1
 8002578:	f004 f8ea 	bl	8006750 <USB_EP0_OutStart>
 800257c:	e006      	b.n	800258c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	441a      	add	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fe35 	bl	8002202 <HAL_PCD_DataOutStageCallback>
 8002598:	e046      	b.n	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4a26      	ldr	r2, [pc, #152]	; (8002638 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d124      	bne.n	80025ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	e032      	b.n	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d8:	461a      	mov	r2, r3
 80025da:	2320      	movs	r3, #32
 80025dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff fe0c 	bl	8002202 <HAL_PCD_DataOutStageCallback>
 80025ea:	e01d      	b.n	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d114      	bne.n	800261c <PCD_EP_OutXfrComplete_int+0x1b0>
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002614:	461a      	mov	r2, r3
 8002616:	2100      	movs	r1, #0
 8002618:	f004 f89a 	bl	8006750 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fded 	bl	8002202 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	4f54300a 	.word	0x4f54300a
 8002638:	4f54310a 	.word	0x4f54310a

0800263c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	333c      	adds	r3, #60	; 0x3c
 8002654:	3304      	adds	r3, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d90e      	bls.n	8002690 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	461a      	mov	r2, r3
 800268a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fdce 	bl	8002232 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d90c      	bls.n	80026b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d108      	bne.n	80026b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026b0:	461a      	mov	r2, r3
 80026b2:	2101      	movs	r1, #1
 80026b4:	f004 f84c 	bl	8006750 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	4f54300a 	.word	0x4f54300a

080026c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e267      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d075      	beq.n	80027ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fe:	4b88      	ldr	r3, [pc, #544]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b04      	cmp	r3, #4
 8002708:	d00c      	beq.n	8002724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270a:	4b85      	ldr	r3, [pc, #532]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002712:	2b08      	cmp	r3, #8
 8002714:	d112      	bne.n	800273c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002716:	4b82      	ldr	r3, [pc, #520]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002722:	d10b      	bne.n	800273c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4b7e      	ldr	r3, [pc, #504]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d05b      	beq.n	80027e8 <HAL_RCC_OscConfig+0x108>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d157      	bne.n	80027e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e242      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x74>
 8002746:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a75      	ldr	r2, [pc, #468]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e01d      	b.n	8002790 <HAL_RCC_OscConfig+0xb0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b70      	ldr	r3, [pc, #448]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6f      	ldr	r2, [pc, #444]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6c      	ldr	r2, [pc, #432]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0xb0>
 8002778:	4b69      	ldr	r3, [pc, #420]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a68      	ldr	r2, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a65      	ldr	r2, [pc, #404]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fbee 	bl	8000f78 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fbea 	bl	8000f78 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e207      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b5b      	ldr	r3, [pc, #364]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0xc0>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fbda 	bl	8000f78 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fbd6 	bl	8000f78 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1f3      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	4b51      	ldr	r3, [pc, #324]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0xe8>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d063      	beq.n	80028be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f6:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280a:	2b08      	cmp	r3, #8
 800280c:	d11c      	bne.n	8002848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280e:	4b44      	ldr	r3, [pc, #272]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x152>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e1c7      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	e03a      	b.n	80028be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCC_OscConfig+0x244>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fb8f 	bl	8000f78 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fb8b 	bl	8000f78 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1a8      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4925      	ldr	r1, [pc, #148]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
 8002890:	e015      	b.n	80028be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x244>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fb6e 	bl	8000f78 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe fb6a 	bl	8000f78 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e187      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d036      	beq.n	8002938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_RCC_OscConfig+0x248>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fb4e 	bl	8000f78 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fb4a 	bl	8000f78 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e167      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x240>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x200>
 80028fe:	e01b      	b.n	8002938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x248>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe fb37 	bl	8000f78 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	e00e      	b.n	800292c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe fb33 	bl	8000f78 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d907      	bls.n	800292c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e150      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
 8002920:	40023800 	.word	0x40023800
 8002924:	42470000 	.word	0x42470000
 8002928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ea      	bne.n	800290e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8097 	beq.w	8002a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294a:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b7d      	ldr	r3, [pc, #500]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a7c      	ldr	r2, [pc, #496]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d118      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b74      	ldr	r3, [pc, #464]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a73      	ldr	r2, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7fe faf3 	bl	8000f78 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe faef 	bl	8000f78 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e10c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <HAL_RCC_OscConfig+0x474>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x2ea>
 80029bc:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a63      	ldr	r2, [pc, #396]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	e01c      	b.n	8002a04 <HAL_RCC_OscConfig+0x324>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x30c>
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
 80029de:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a5b      	ldr	r2, [pc, #364]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0x324>
 80029ec:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a57      	ldr	r2, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	4b55      	ldr	r3, [pc, #340]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 80029fe:	f023 0304 	bic.w	r3, r3, #4
 8002a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fab4 	bl	8000f78 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7fe fab0 	bl	8000f78 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0cb      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ee      	beq.n	8002a14 <HAL_RCC_OscConfig+0x334>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7fe fa9e 	bl	8000f78 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe fa9a 	bl	8000f78 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0b5      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a56:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ee      	bne.n	8002a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a1 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d05c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d141      	bne.n	8002b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_OscConfig+0x478>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fa6e 	bl	8000f78 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fa6a 	bl	8000f78 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e087      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	019b      	lsls	r3, r3, #6
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	491b      	ldr	r1, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_OscConfig+0x478>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe fa43 	bl	8000f78 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe fa3f 	bl	8000f78 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e05c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x416>
 8002b14:	e054      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_RCC_OscConfig+0x478>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa2c 	bl	8000f78 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fa28 	bl	8000f78 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e045      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_OscConfig+0x470>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
 8002b42:	e03d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e038      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x4ec>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d028      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d121      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d11a      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0cc      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d90c      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d044      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d119      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e067      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe f95a 	bl	8000f78 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fe f956 	bl	8000f78 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20c      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f821 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490a      	ldr	r1, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe f8ba 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	08007984 	.word	0x08007984
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da0:	b094      	sub	sp, #80	; 0x50
 8002da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	647b      	str	r3, [r7, #68]	; 0x44
 8002da8:	2300      	movs	r3, #0
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dac:	2300      	movs	r3, #0
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db4:	4b79      	ldr	r3, [pc, #484]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d00d      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x40>
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	f200 80e1 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dce:	e0db      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dd4:	e0db      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd6:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dda:	e0d8      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ddc:	4b6f      	ldr	r3, [pc, #444]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d063      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df2:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	2200      	movs	r2, #0
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
 8002e06:	2300      	movs	r3, #0
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e0e:	4622      	mov	r2, r4
 8002e10:	462b      	mov	r3, r5
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	0159      	lsls	r1, r3, #5
 8002e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e20:	0150      	lsls	r0, r2, #5
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4621      	mov	r1, r4
 8002e28:	1a51      	subs	r1, r2, r1
 8002e2a:	6139      	str	r1, [r7, #16]
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e40:	4659      	mov	r1, fp
 8002e42:	018b      	lsls	r3, r1, #6
 8002e44:	4651      	mov	r1, sl
 8002e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	018a      	lsls	r2, r1, #6
 8002e4e:	4651      	mov	r1, sl
 8002e50:	ebb2 0801 	subs.w	r8, r2, r1
 8002e54:	4659      	mov	r1, fp
 8002e56:	eb63 0901 	sbc.w	r9, r3, r1
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e6e:	4690      	mov	r8, r2
 8002e70:	4699      	mov	r9, r3
 8002e72:	4623      	mov	r3, r4
 8002e74:	eb18 0303 	adds.w	r3, r8, r3
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	462b      	mov	r3, r5
 8002e7c:	eb49 0303 	adc.w	r3, r9, r3
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e8e:	4629      	mov	r1, r5
 8002e90:	024b      	lsls	r3, r1, #9
 8002e92:	4621      	mov	r1, r4
 8002e94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e98:	4621      	mov	r1, r4
 8002e9a:	024a      	lsls	r2, r1, #9
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eac:	f7fd f98c 	bl	80001c8 <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb8:	e058      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	f04f 0000 	mov.w	r0, #0
 8002edc:	f04f 0100 	mov.w	r1, #0
 8002ee0:	0159      	lsls	r1, r3, #5
 8002ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee6:	0150      	lsls	r0, r2, #5
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4641      	mov	r1, r8
 8002eee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f10:	eb63 050b 	sbc.w	r5, r3, fp
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	00eb      	lsls	r3, r5, #3
 8002f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f22:	00e2      	lsls	r2, r4, #3
 8002f24:	4614      	mov	r4, r2
 8002f26:	461d      	mov	r5, r3
 8002f28:	4643      	mov	r3, r8
 8002f2a:	18e3      	adds	r3, r4, r3
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	464b      	mov	r3, r9
 8002f30:	eb45 0303 	adc.w	r3, r5, r3
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f42:	4629      	mov	r1, r5
 8002f44:	028b      	lsls	r3, r1, #10
 8002f46:	4621      	mov	r1, r4
 8002f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	028a      	lsls	r2, r1, #10
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f56:	2200      	movs	r2, #0
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	61fa      	str	r2, [r7, #28]
 8002f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f60:	f7fd f932 	bl	80001c8 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	3301      	adds	r3, #1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3750      	adds	r7, #80	; 0x50
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	007a1200 	.word	0x007a1200

08002fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000000 	.word	0x20000000

08002fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fc4:	f7ff fff0 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0a9b      	lsrs	r3, r3, #10
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08007994 	.word	0x08007994

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fec:	f7ff ffdc 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0b5b      	lsrs	r3, r3, #13
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	08007994 	.word	0x08007994

08003010 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e022      	b.n	8003068 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd fd3d 	bl	8000ab4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2203      	movs	r2, #3
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f814 	bl	8003070 <HAL_SD_InitCard>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e00a      	b.n	8003068 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af04      	add	r7, sp, #16
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800308c:	2376      	movs	r3, #118	; 0x76
 800308e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681d      	ldr	r5, [r3, #0]
 8003094:	466c      	mov	r4, sp
 8003096:	f107 0314 	add.w	r3, r7, #20
 800309a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800309e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a8:	4628      	mov	r0, r5
 80030aa:	f002 f84f 	bl	800514c <SDIO_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80030b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e04f      	b.n	8003160 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_SD_InitCard+0xf8>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f002 f887 	bl	80051de <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_SD_InitCard+0xf8>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80030d6:	2002      	movs	r0, #2
 80030d8:	f7fd ff5a 	bl	8000f90 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 ff03 	bl	8003ee8 <SD_PowerON>
 80030e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e02e      	b.n	8003160 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fe22 	bl	8003d4c <SD_InitCard>
 8003108:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e01b      	b.n	8003160 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003130:	4618      	mov	r0, r3
 8003132:	f002 f8e6 	bl	8005302 <SDMMC_CmdBlockLength>
 8003136:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00f      	beq.n	800315e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_SD_InitCard+0xfc>)
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bdb0      	pop	{r4, r5, r7, pc}
 8003168:	422580a0 	.word	0x422580a0
 800316c:	004005ff 	.word	0x004005ff

08003170 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b092      	sub	sp, #72	; 0x48
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800317e:	f7fd fefb 	bl	8000f78 <HAL_GetTick>
 8003182:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d107      	bne.n	80031a2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1bd      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 81b0 	bne.w	8003510 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d907      	bls.n	80031d4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e1a4      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2203      	movs	r2, #3
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2200      	movs	r2, #0
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d002      	beq.n	80031f2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	025b      	lsls	r3, r3, #9
 80031fc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80031fe:	2390      	movs	r3, #144	; 0x90
 8003200:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003202:	2302      	movs	r3, #2
 8003204:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800320a:	2301      	movs	r3, #1
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f107 0214 	add.w	r2, r7, #20
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f002 f846 	bl	80052aa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d90a      	bls.n	800323a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2202      	movs	r2, #2
 8003228:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003230:	4618      	mov	r0, r3
 8003232:	f002 f8aa 	bl	800538a <SDMMC_CmdReadMultiBlock>
 8003236:	6478      	str	r0, [r7, #68]	; 0x44
 8003238:	e009      	b.n	800324e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003246:	4618      	mov	r0, r3
 8003248:	f002 f87d 	bl	8005346 <SDMMC_CmdReadSingleBlock>
 800324c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800324e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a7a      	ldr	r2, [pc, #488]	; (8003444 <HAL_SD_ReadBlocks+0x2d4>)
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003262:	431a      	orrs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e151      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800327e:	e061      	b.n	8003344 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03c      	beq.n	8003308 <HAL_SD_ReadBlocks+0x198>
 800328e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d039      	beq.n	8003308 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003294:	2300      	movs	r3, #0
 8003296:	643b      	str	r3, [r7, #64]	; 0x40
 8003298:	e033      	b.n	8003302 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 ff7f 	bl	80051a2 <SDIO_ReadFIFO>
 80032a4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	3301      	adds	r3, #1
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	3b01      	subs	r3, #1
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c6:	3301      	adds	r3, #1
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032cc:	3b01      	subs	r3, #1
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	3301      	adds	r3, #1
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e2:	3b01      	subs	r3, #1
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	0e1b      	lsrs	r3, r3, #24
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	3301      	adds	r3, #1
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	3b01      	subs	r3, #1
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	3301      	adds	r3, #1
 8003300:	643b      	str	r3, [r7, #64]	; 0x40
 8003302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003304:	2b07      	cmp	r3, #7
 8003306:	d9c8      	bls.n	800329a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003308:	f7fd fe36 	bl	8000f78 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003314:	429a      	cmp	r2, r3
 8003316:	d902      	bls.n	800331e <HAL_SD_ReadBlocks+0x1ae>
 8003318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331a:	2b00      	cmp	r3, #0
 800331c:	d112      	bne.n	8003344 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a48      	ldr	r2, [pc, #288]	; (8003444 <HAL_SD_ReadBlocks+0x2d4>)
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0ec      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334a:	f240 332a 	movw	r3, #810	; 0x32a
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d095      	beq.n	8003280 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d022      	beq.n	80033a8 <HAL_SD_ReadBlocks+0x238>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d91f      	bls.n	80033a8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	2b03      	cmp	r3, #3
 800336e:	d01b      	beq.n	80033a8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f002 f86f 	bl	8005458 <SDMMC_CmdStopTransfer>
 800337a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800337c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337e:	2b00      	cmp	r3, #0
 8003380:	d012      	beq.n	80033a8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <HAL_SD_ReadBlocks+0x2d4>)
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0ba      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a22      	ldr	r2, [pc, #136]	; (8003444 <HAL_SD_ReadBlocks+0x2d4>)
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	f043 0208 	orr.w	r2, r3, #8
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0a0      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d012      	beq.n	8003410 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_SD_ReadBlocks+0x2d4>)
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	f043 0202 	orr.w	r2, r3, #2
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e086      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_SD_ReadBlocks+0x2d4>)
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e06c      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
 8003444:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fea8 	bl	80051a2 <SDIO_ReadFIFO>
 8003452:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	b2da      	uxtb	r2, r3
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	3301      	adds	r3, #1
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003464:	3b01      	subs	r3, #1
 8003466:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	b2da      	uxtb	r2, r3
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003470:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003474:	3301      	adds	r3, #1
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347a:	3b01      	subs	r3, #1
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	b2da      	uxtb	r2, r3
 8003484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003486:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	3301      	adds	r3, #1
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800348e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003490:	3b01      	subs	r3, #1
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	0e1b      	lsrs	r3, r3, #24
 8003498:	b2da      	uxtb	r2, r3
 800349a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a0:	3301      	adds	r3, #1
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a6:	3b01      	subs	r3, #1
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034aa:	f7fd fd65 	bl	8000f78 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d902      	bls.n	80034c0 <HAL_SD_ReadBlocks+0x350>
 80034ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d112      	bne.n	80034e6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_SD_ReadBlocks+0x3b8>)
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e01b      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SD_ReadBlocks+0x38a>
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1a6      	bne.n	8003448 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8003502:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e006      	b.n	800351e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3748      	adds	r7, #72	; 0x48
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	004005ff 	.word	0x004005ff

0800352c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b092      	sub	sp, #72	; 0x48
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800353a:	f7fd fd1d 	bl	8000f78 <HAL_GetTick>
 800353e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e166      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	f040 8159 	bne.w	800381e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	441a      	add	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	429a      	cmp	r2, r3
 800357e:	d907      	bls.n	8003590 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e14d      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2203      	movs	r2, #3
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d002      	beq.n	80035ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	025b      	lsls	r3, r3, #9
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80035ba:	2390      	movs	r3, #144	; 0x90
 80035bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f107 0218 	add.w	r2, r7, #24
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 fe68 	bl	80052aa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d90a      	bls.n	80035f6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 ff10 	bl	8005412 <SDMMC_CmdWriteMultiBlock>
 80035f2:	6478      	str	r0, [r7, #68]	; 0x44
 80035f4:	e009      	b.n	800360a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2210      	movs	r2, #16
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fee3 	bl	80053ce <SDMMC_CmdWriteSingleBlock>
 8003608:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	2b00      	cmp	r3, #0
 800360e:	d012      	beq.n	8003636 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a87      	ldr	r2, [pc, #540]	; (8003834 <HAL_SD_WriteBlocks+0x308>)
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0fa      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800363a:	e065      	b.n	8003708 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d040      	beq.n	80036cc <HAL_SD_WriteBlocks+0x1a0>
 800364a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03d      	beq.n	80036cc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003650:	2300      	movs	r3, #0
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
 8003654:	e037      	b.n	80036c6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	3301      	adds	r3, #1
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003664:	3b01      	subs	r3, #1
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	3301      	adds	r3, #1
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	3b01      	subs	r3, #1
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	041a      	lsls	r2, r3, #16
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	3301      	adds	r3, #1
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003694:	3b01      	subs	r3, #1
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	061a      	lsls	r2, r3, #24
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a6:	3301      	adds	r3, #1
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	3b01      	subs	r3, #1
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f107 0214 	add.w	r2, r7, #20
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fd7e 	bl	80051bc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80036c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c2:	3301      	adds	r3, #1
 80036c4:	643b      	str	r3, [r7, #64]	; 0x40
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	2b07      	cmp	r3, #7
 80036ca:	d9c4      	bls.n	8003656 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80036cc:	f7fd fc54 	bl	8000f78 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036d8:	429a      	cmp	r2, r3
 80036da:	d902      	bls.n	80036e2 <HAL_SD_WriteBlocks+0x1b6>
 80036dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d112      	bne.n	8003708 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a53      	ldr	r2, [pc, #332]	; (8003834 <HAL_SD_WriteBlocks+0x308>)
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e091      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370e:	f240 331a 	movw	r3, #794	; 0x31a
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d091      	beq.n	800363c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d022      	beq.n	800376c <HAL_SD_WriteBlocks+0x240>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d91f      	bls.n	800376c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	2b03      	cmp	r3, #3
 8003732:	d01b      	beq.n	800376c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fe8d 	bl	8005458 <SDMMC_CmdStopTransfer>
 800373e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <HAL_SD_WriteBlocks+0x308>)
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e05f      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d012      	beq.n	80037a0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2d      	ldr	r2, [pc, #180]	; (8003834 <HAL_SD_WriteBlocks+0x308>)
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f043 0208 	orr.w	r2, r3, #8
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e045      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d012      	beq.n	80037d4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a20      	ldr	r2, [pc, #128]	; (8003834 <HAL_SD_WriteBlocks+0x308>)
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e02b      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_SD_WriteBlocks+0x308>)
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	f043 0210 	orr.w	r2, r3, #16
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e011      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003810:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e006      	b.n	800382c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3748      	adds	r7, #72	; 0x48
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	004005ff 	.word	0x004005ff

08003838 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	0f9b      	lsrs	r3, r3, #30
 8003848:	b2da      	uxtb	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003852:	0e9b      	lsrs	r3, r3, #26
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	b2da      	uxtb	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003864:	0e1b      	lsrs	r3, r3, #24
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	b2da      	uxtb	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	b2da      	uxtb	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	b2da      	uxtb	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388e:	b2da      	uxtb	r2, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	0d1b      	lsrs	r3, r3, #20
 800389a:	b29a      	uxth	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b6:	0bdb      	lsrs	r3, r3, #15
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c8:	0b9b      	lsrs	r3, r3, #14
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038da:	0b5b      	lsrs	r3, r3, #13
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ec:	0b1b      	lsrs	r3, r3, #12
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2200      	movs	r2, #0
 80038fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	2b00      	cmp	r3, #0
 8003906:	d163      	bne.n	80039d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800390c:	009a      	lsls	r2, r3, #2
 800390e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003918:	0f92      	lsrs	r2, r2, #30
 800391a:	431a      	orrs	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003924:	0edb      	lsrs	r3, r3, #27
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	b2da      	uxtb	r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003936:	0e1b      	lsrs	r3, r3, #24
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	b2da      	uxtb	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003948:	0d5b      	lsrs	r3, r3, #21
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	b2da      	uxtb	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	0c9b      	lsrs	r3, r3, #18
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	b2da      	uxtb	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396c:	0bdb      	lsrs	r3, r3, #15
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	b2da      	uxtb	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	7e1b      	ldrb	r3, [r3, #24]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	3302      	adds	r3, #2
 8003990:	2201      	movs	r2, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800399a:	fb03 f202 	mul.w	r2, r3, r2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	7a1b      	ldrb	r3, [r3, #8]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	2201      	movs	r2, #1
 80039ae:	409a      	lsls	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80039bc:	0a52      	lsrs	r2, r2, #9
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039cc:	661a      	str	r2, [r3, #96]	; 0x60
 80039ce:	e031      	b.n	8003a34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d11d      	bne.n	8003a14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	431a      	orrs	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	3301      	adds	r3, #1
 80039f4:	029a      	lsls	r2, r3, #10
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	661a      	str	r2, [r3, #96]	; 0x60
 8003a12:	e00f      	b.n	8003a34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_SD_GetCardCSD+0x344>)
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e09d      	b.n	8003b70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a38:	0b9b      	lsrs	r3, r3, #14
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	09db      	lsrs	r3, r3, #7
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	0fdb      	lsrs	r3, r3, #31
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	0f5b      	lsrs	r3, r3, #29
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	0d9b      	lsrs	r3, r3, #22
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	0d5b      	lsrs	r3, r3, #21
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	0bdb      	lsrs	r3, r3, #15
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	0b9b      	lsrs	r3, r3, #14
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	0b5b      	lsrs	r3, r3, #13
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	0b1b      	lsrs	r3, r3, #12
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	0a9b      	lsrs	r3, r3, #10
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	004005ff 	.word	0x004005ff

08003b80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af04      	add	r7, sp, #16
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2203      	movs	r2, #3
 8003bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d02e      	beq.n	8003c56 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d106      	bne.n	8003c0e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c0c:	e029      	b.n	8003c62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d10a      	bne.n	8003c2c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa1c 	bl	8004054 <SD_WideBus_Enable>
 8003c1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
 8003c2a:	e01a      	b.n	8003c62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa59 	bl	80040ea <SD_WideBus_Disable>
 8003c38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
 8003c46:	e00c      	b.n	8003c62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
 8003c54:	e005      	b.n	8003c62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c80:	e01f      	b.n	8003cc2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681d      	ldr	r5, [r3, #0]
 8003ca8:	466c      	mov	r4, sp
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f001 fa45 	bl	800514c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 fb19 	bl	8005302 <SDMMC_CmdBlockLength>
 8003cd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00c      	beq.n	8003cf2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	; 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bdb0      	pop	{r4, r5, r7, pc}
 8003d06:	bf00      	nop
 8003d08:	004005ff 	.word	0x004005ff

08003d0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f970 	bl	8004004 <SD_SendStatus>
 8003d24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	0a5b      	lsrs	r3, r3, #9
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d42:	693b      	ldr	r3, [r7, #16]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d4c:	b5b0      	push	{r4, r5, r7, lr}
 8003d4e:	b094      	sub	sp, #80	; 0x50
 8003d50:	af04      	add	r7, sp, #16
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003d54:	2301      	movs	r3, #1
 8003d56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 fa4c 	bl	80051fa <SDIO_GetPowerState>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d6c:	e0b8      	b.n	8003ee0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d02f      	beq.n	8003dd6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fc76 	bl	800566c <SDMMC_CmdSendCID>
 8003d80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <SD_InitCard+0x40>
    {
      return errorstate;
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	e0a9      	b.n	8003ee0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 fa76 	bl	8005284 <SDIO_GetResponse>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2104      	movs	r1, #4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fa6d 	bl	8005284 <SDIO_GetResponse>
 8003daa:	4602      	mov	r2, r0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2108      	movs	r1, #8
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fa64 	bl	8005284 <SDIO_GetResponse>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	210c      	movs	r1, #12
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fa5b 	bl	8005284 <SDIO_GetResponse>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d00d      	beq.n	8003dfa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f107 020e 	add.w	r2, r7, #14
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fc7c 	bl	80056e6 <SDMMC_CmdSetRelAdd>
 8003dee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <SD_InitCard+0xae>
    {
      return errorstate;
 8003df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df8:	e072      	b.n	8003ee0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d036      	beq.n	8003e70 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f001 fc46 	bl	80056a8 <SDMMC_CmdSendCSD>
 8003e1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e26:	e05b      	b.n	8003ee0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fa28 	bl	8005284 <SDIO_GetResponse>
 8003e34:	4602      	mov	r2, r0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2104      	movs	r1, #4
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 fa1f 	bl	8005284 <SDIO_GetResponse>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2108      	movs	r1, #8
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 fa16 	bl	8005284 <SDIO_GetResponse>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	210c      	movs	r1, #12
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 fa0d 	bl	8005284 <SDIO_GetResponse>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2104      	movs	r1, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 fa04 	bl	8005284 <SDIO_GetResponse>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	0d1a      	lsrs	r2, r3, #20
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e84:	f107 0310 	add.w	r3, r7, #16
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fcd4 	bl	8003838 <HAL_SD_GetCardCSD>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e9a:	e021      	b.n	8003ee0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	461c      	mov	r4, r3
 8003eaa:	4615      	mov	r5, r2
 8003eac:	4622      	mov	r2, r4
 8003eae:	462b      	mov	r3, r5
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	f001 faf3 	bl	800549c <SDMMC_CmdSelDesel>
 8003eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <SD_InitCard+0x176>
  {
    return errorstate;
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	e00e      	b.n	8003ee0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	466c      	mov	r4, sp
 8003eca:	f103 0210 	add.w	r2, r3, #16
 8003ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ed0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f001 f937 	bl	800514c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3740      	adds	r7, #64	; 0x40
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bdb0      	pop	{r4, r5, r7, pc}

08003ee8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 faee 	bl	80054e2 <SDMMC_CmdGoIdleState>
 8003f06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	e072      	b.n	8003ff8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fb01 	bl	800551e <SDMMC_CmdOperCond>
 8003f1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00d      	beq.n	8003f40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fad7 	bl	80054e2 <SDMMC_CmdGoIdleState>
 8003f34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e05b      	b.n	8003ff8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d137      	bne.n	8003fbe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 fb01 	bl	800555c <SDMMC_CmdAppCommand>
 8003f5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02d      	beq.n	8003fbe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f66:	e047      	b.n	8003ff8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 faf4 	bl	800555c <SDMMC_CmdAppCommand>
 8003f74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <SD_PowerON+0x98>
    {
      return errorstate;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	e03b      	b.n	8003ff8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	491e      	ldr	r1, [pc, #120]	; (8004000 <SD_PowerON+0x118>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fb0a 	bl	80055a0 <SDMMC_CmdAppOperCommand>
 8003f8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f98:	e02e      	b.n	8003ff8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 f96f 	bl	8005284 <SDIO_GetResponse>
 8003fa6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	0fdb      	lsrs	r3, r3, #31
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <SD_PowerON+0xcc>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <SD_PowerON+0xce>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]

    count++;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d802      	bhi.n	8003fce <SD_PowerON+0xe6>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0cc      	beq.n	8003f68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d902      	bls.n	8003fde <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fdc:	e00c      	b.n	8003ff8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
 8003fee:	e002      	b.n	8003ff6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	c1100000 	.word	0xc1100000

08004004 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004014:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004018:	e018      	b.n	800404c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f001 fb7e 	bl	8005728 <SDMMC_CmdSendStatus>
 800402c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	e009      	b.n	800404c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f001 f920 	bl	8005284 <SDIO_GetResponse>
 8004044:	4602      	mov	r2, r0
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f001 f90a 	bl	8005284 <SDIO_GetResponse>
 8004070:	4603      	mov	r3, r0
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800407a:	d102      	bne.n	8004082 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800407c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004080:	e02f      	b.n	80040e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004082:	f107 030c 	add.w	r3, r7, #12
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f879 	bl	8004180 <SD_FindSCR>
 800408e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	e023      	b.n	80040e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01c      	beq.n	80040de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f001 fa53 	bl	800555c <SDMMC_CmdAppCommand>
 80040b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	e00f      	b.n	80040e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2102      	movs	r1, #2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 fa8c 	bl	80055e6 <SDMMC_CmdBusWidth>
 80040ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	e003      	b.n	80040e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80040da:	2300      	movs	r3, #0
 80040dc:	e001      	b.n	80040e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80040de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f001 f8bf 	bl	8005284 <SDIO_GetResponse>
 8004106:	4603      	mov	r3, r0
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004110:	d102      	bne.n	8004118 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004116:	e02f      	b.n	8004178 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f82e 	bl	8004180 <SD_FindSCR>
 8004124:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	e023      	b.n	8004178 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01c      	beq.n	8004174 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f001 fa08 	bl	800555c <SDMMC_CmdAppCommand>
 800414c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	e00f      	b.n	8004178 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f001 fa41 	bl	80055e6 <SDMMC_CmdBusWidth>
 8004164:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	e003      	b.n	8004178 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004170:	2300      	movs	r3, #0
 8004172:	e001      	b.n	8004178 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004174:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b08f      	sub	sp, #60	; 0x3c
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800418a:	f7fc fef5 	bl	8000f78 <HAL_GetTick>
 800418e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004194:	2300      	movs	r3, #0
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2108      	movs	r1, #8
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f8ab 	bl	8005302 <SDMMC_CmdBlockLength>
 80041ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	e0b2      	b.n	800431e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f001 f9c9 	bl	800555c <SDMMC_CmdAppCommand>
 80041ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	e0a3      	b.n	800431e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80041dc:	2308      	movs	r3, #8
 80041de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80041e0:	2330      	movs	r3, #48	; 0x30
 80041e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80041e4:	2302      	movs	r3, #2
 80041e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f107 0210 	add.w	r2, r7, #16
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f855 	bl	80052aa <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fa10 	bl	800562a <SDMMC_CmdSendSCR>
 800420a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02a      	beq.n	8004268 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	e083      	b.n	800431e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00f      	beq.n	8004244 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6819      	ldr	r1, [r3, #0]
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f107 0208 	add.w	r2, r7, #8
 8004230:	18d4      	adds	r4, r2, r3
 8004232:	4608      	mov	r0, r1
 8004234:	f000 ffb5 	bl	80051a2 <SDIO_ReadFIFO>
 8004238:	4603      	mov	r3, r0
 800423a:	6023      	str	r3, [r4, #0]
      index++;
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	3301      	adds	r3, #1
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
 8004242:	e006      	b.n	8004252 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004252:	f7fc fe91 	bl	8000f78 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d102      	bne.n	8004268 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004262:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004266:	e05a      	b.n	800431e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0cf      	beq.n	8004216 <SD_FindSCR+0x96>
 8004276:	e000      	b.n	800427a <SD_FindSCR+0xfa>
      break;
 8004278:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2208      	movs	r2, #8
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004290:	2308      	movs	r3, #8
 8004292:	e044      	b.n	800431e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2202      	movs	r2, #2
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80042aa:	2302      	movs	r3, #2
 80042ac:	e037      	b.n	800431e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2220      	movs	r2, #32
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80042c4:	2320      	movs	r3, #32
 80042c6:	e02a      	b.n	800431e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	061a      	lsls	r2, r3, #24
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	601a      	str	r2, [r3, #0]
    scr++;
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	3304      	adds	r3, #4
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	061a      	lsls	r2, r3, #24
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004306:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004310:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	0e1b      	lsrs	r3, r3, #24
 8004316:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	373c      	adds	r7, #60	; 0x3c
 8004322:	46bd      	mov	sp, r7
 8004324:	bd90      	pop	{r4, r7, pc}

08004326 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e03f      	b.n	80043b8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fc fc19 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2224      	movs	r2, #36	; 0x24
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004368:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fc7a 	bl	8004c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800439e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b0ba      	sub	sp, #232	; 0xe8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_UART_IRQHandler+0x66>
 8004412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fb65 	bl	8004aee <UART_Receive_IT>
      return;
 8004424:	e256      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80de 	beq.w	80045ec <HAL_UART_IRQHandler+0x22c>
 8004430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80d1 	beq.w	80045ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_UART_IRQHandler+0xae>
 8004456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0201 	orr.w	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_UART_IRQHandler+0xd2>
 800447a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f043 0202 	orr.w	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_UART_IRQHandler+0xf6>
 800449e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0204 	orr.w	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <HAL_UART_IRQHandler+0x126>
 80044c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0208 	orr.w	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 81ed 	beq.w	80048ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_UART_IRQHandler+0x14e>
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 faf0 	bl	8004aee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <HAL_UART_IRQHandler+0x17a>
 8004532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04f      	beq.n	80045da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9f8 	bl	8004930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d141      	bne.n	80045d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3314      	adds	r3, #20
 8004554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800457a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800457e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1d9      	bne.n	800454e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d013      	beq.n	80045ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_UART_IRQHandler+0x3dc>)
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc fe93 	bl	80012da <HAL_DMA_Abort_IT>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00e      	b.n	80045e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f99a 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e00a      	b.n	80045e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f996 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e006      	b.n	80045e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f992 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045e6:	e170      	b.n	80048ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	bf00      	nop
    return;
 80045ea:	e16e      	b.n	80048ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	f040 814a 	bne.w	800488a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8143 	beq.w	800488a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 813c 	beq.w	800488a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	f040 80b4 	bne.w	80047a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004644:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8140 	beq.w	80048ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004656:	429a      	cmp	r2, r3
 8004658:	f080 8139 	bcs.w	80048ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004662:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466e:	f000 8088 	beq.w	8004782 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800469e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1d9      	bne.n	8004672 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e1      	bne.n	80046be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800471e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800472c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e3      	bne.n	80046fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004752:	f023 0310 	bic.w	r3, r3, #16
 8004756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004764:	65ba      	str	r2, [r7, #88]	; 0x58
 8004766:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800476a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e3      	bne.n	8004740 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	4618      	mov	r0, r3
 800477e:	f7fc fd3c 	bl	80011fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800478a:	b29b      	uxth	r3, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8c0 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004798:	e099      	b.n	80048ce <HAL_UART_IRQHandler+0x50e>
 800479a:	bf00      	nop
 800479c:	080049f7 	.word	0x080049f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 808b 	beq.w	80048d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8086 	beq.w	80048d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047ea:	647a      	str	r2, [r7, #68]	; 0x44
 80047ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e3      	bne.n	80047c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	623b      	str	r3, [r7, #32]
   return(result);
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004822:	633a      	str	r2, [r7, #48]	; 0x30
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e3      	bne.n	80047fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	60fb      	str	r3, [r7, #12]
   return(result);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004868:	61fa      	str	r2, [r7, #28]
 800486a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	69b9      	ldr	r1, [r7, #24]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	617b      	str	r3, [r7, #20]
   return(result);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e3      	bne.n	8004844 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f848 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004888:	e023      	b.n	80048d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_UART_IRQHandler+0x4ea>
 8004896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8bb 	bl	8004a1e <UART_Transmit_IT>
    return;
 80048a8:	e014      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <HAL_UART_IRQHandler+0x514>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8fb 	bl	8004abe <UART_EndTransmit_IT>
    return;
 80048c8:	e004      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
    return;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
      return;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
      return;
 80048d2:	bf00      	nop
  }
}
 80048d4:	37e8      	adds	r7, #232	; 0xe8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop

080048dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004930:	b480      	push	{r7}
 8004932:	b095      	sub	sp, #84	; 0x54
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004958:	643a      	str	r2, [r7, #64]	; 0x40
 800495a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800495e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	61fb      	str	r3, [r7, #28]
   return(result);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	64bb      	str	r3, [r7, #72]	; 0x48
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3314      	adds	r3, #20
 800498a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e5      	bne.n	800496c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d119      	bne.n	80049dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	647b      	str	r3, [r7, #68]	; 0x44
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c8:	61ba      	str	r2, [r7, #24]
 80049ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	613b      	str	r3, [r7, #16]
   return(result);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049ea:	bf00      	nop
 80049ec:	3754      	adds	r7, #84	; 0x54
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff77 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b21      	cmp	r3, #33	; 0x21
 8004a30:	d13e      	bne.n	8004ab0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d114      	bne.n	8004a66 <UART_Transmit_IT+0x48>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d110      	bne.n	8004a66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	1c9a      	adds	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]
 8004a64:	e008      	b.n	8004a78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	1c59      	adds	r1, r3, #1
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6211      	str	r1, [r2, #32]
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4619      	mov	r1, r3
 8004a86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10f      	bne.n	8004aac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fefc 	bl	80048dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b08c      	sub	sp, #48	; 0x30
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b22      	cmp	r3, #34	; 0x22
 8004b00:	f040 80ab 	bne.w	8004c5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d117      	bne.n	8004b3e <UART_Receive_IT+0x50>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d113      	bne.n	8004b3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	1c9a      	adds	r2, r3, #2
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b3c:	e026      	b.n	8004b8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b50:	d007      	beq.n	8004b62 <UART_Receive_IT+0x74>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <UART_Receive_IT+0x82>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e008      	b.n	8004b82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d15a      	bne.n	8004c56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0220 	bic.w	r2, r2, #32
 8004bae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d135      	bne.n	8004c4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f023 0310 	bic.w	r3, r3, #16
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c06:	623a      	str	r2, [r7, #32]
 8004c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	69f9      	ldr	r1, [r7, #28]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e5      	bne.n	8004be6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d10a      	bne.n	8004c3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe67 	bl	8004918 <HAL_UARTEx_RxEventCallback>
 8004c4a:	e002      	b.n	8004c52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fe4f 	bl	80048f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e002      	b.n	8004c5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3730      	adds	r7, #48	; 0x30
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c68:	b0c0      	sub	sp, #256	; 0x100
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	68d9      	ldr	r1, [r3, #12]
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	ea40 0301 	orr.w	r3, r0, r1
 8004c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cbc:	f021 010c 	bic.w	r1, r1, #12
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	6999      	ldr	r1, [r3, #24]
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	ea40 0301 	orr.w	r3, r0, r1
 8004cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b8f      	ldr	r3, [pc, #572]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d005      	beq.n	8004d04 <UART_SetConfig+0xa0>
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b8d      	ldr	r3, [pc, #564]	; (8004f34 <UART_SetConfig+0x2d0>)
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d104      	bne.n	8004d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7fe f970 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004d08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d0c:	e003      	b.n	8004d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d0e:	f7fe f957 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8004d12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	f040 810c 	bne.w	8004f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d36:	4622      	mov	r2, r4
 8004d38:	462b      	mov	r3, r5
 8004d3a:	1891      	adds	r1, r2, r2
 8004d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d3e:	415b      	adcs	r3, r3
 8004d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d46:	4621      	mov	r1, r4
 8004d48:	eb12 0801 	adds.w	r8, r2, r1
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	eb43 0901 	adc.w	r9, r3, r1
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d66:	4690      	mov	r8, r2
 8004d68:	4699      	mov	r9, r3
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	eb18 0303 	adds.w	r3, r8, r3
 8004d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d74:	462b      	mov	r3, r5
 8004d76:	eb49 0303 	adc.w	r3, r9, r3
 8004d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d92:	460b      	mov	r3, r1
 8004d94:	18db      	adds	r3, r3, r3
 8004d96:	653b      	str	r3, [r7, #80]	; 0x50
 8004d98:	4613      	mov	r3, r2
 8004d9a:	eb42 0303 	adc.w	r3, r2, r3
 8004d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8004da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004da8:	f7fb fa0e 	bl	80001c8 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4b61      	ldr	r3, [pc, #388]	; (8004f38 <UART_SetConfig+0x2d4>)
 8004db2:	fba3 2302 	umull	r2, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	011c      	lsls	r4, r3, #4
 8004dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	1891      	adds	r1, r2, r2
 8004dd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dd4:	415b      	adcs	r3, r3
 8004dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ddc:	4641      	mov	r1, r8
 8004dde:	eb12 0a01 	adds.w	sl, r2, r1
 8004de2:	4649      	mov	r1, r9
 8004de4:	eb43 0b01 	adc.w	fp, r3, r1
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dfc:	4692      	mov	sl, r2
 8004dfe:	469b      	mov	fp, r3
 8004e00:	4643      	mov	r3, r8
 8004e02:	eb1a 0303 	adds.w	r3, sl, r3
 8004e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	18db      	adds	r3, r3, r3
 8004e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e2e:	4613      	mov	r3, r2
 8004e30:	eb42 0303 	adc.w	r3, r2, r3
 8004e34:	647b      	str	r3, [r7, #68]	; 0x44
 8004e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e3e:	f7fb f9c3 	bl	80001c8 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <UART_SetConfig+0x2d4>)
 8004e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2264      	movs	r2, #100	; 0x64
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	1acb      	subs	r3, r1, r3
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e5e:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <UART_SetConfig+0x2d4>)
 8004e60:	fba3 2302 	umull	r2, r3, r3, r2
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e6c:	441c      	add	r4, r3
 8004e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	1891      	adds	r1, r2, r2
 8004e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e88:	415b      	adcs	r3, r3
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e90:	4641      	mov	r1, r8
 8004e92:	1851      	adds	r1, r2, r1
 8004e94:	6339      	str	r1, [r7, #48]	; 0x30
 8004e96:	4649      	mov	r1, r9
 8004e98:	414b      	adcs	r3, r1
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	00cb      	lsls	r3, r1, #3
 8004eac:	4651      	mov	r1, sl
 8004eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb2:	4651      	mov	r1, sl
 8004eb4:	00ca      	lsls	r2, r1, #3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	eb42 0303 	adc.w	r3, r2, r3
 8004ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004edc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	18db      	adds	r3, r3, r3
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eea:	4613      	mov	r3, r2
 8004eec:	eb42 0303 	adc.w	r3, r2, r3
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004efa:	f7fb f965 	bl	80001c8 <__aeabi_uldivmod>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <UART_SetConfig+0x2d4>)
 8004f04:	fba3 1302 	umull	r1, r3, r3, r2
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	2164      	movs	r1, #100	; 0x64
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	3332      	adds	r3, #50	; 0x32
 8004f16:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <UART_SetConfig+0x2d4>)
 8004f18:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	f003 0207 	and.w	r2, r3, #7
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4422      	add	r2, r4
 8004f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f2c:	e105      	b.n	800513a <UART_SetConfig+0x4d6>
 8004f2e:	bf00      	nop
 8004f30:	40011000 	.word	0x40011000
 8004f34:	40011400 	.word	0x40011400
 8004f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f4e:	4642      	mov	r2, r8
 8004f50:	464b      	mov	r3, r9
 8004f52:	1891      	adds	r1, r2, r2
 8004f54:	6239      	str	r1, [r7, #32]
 8004f56:	415b      	adcs	r3, r3
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f5e:	4641      	mov	r1, r8
 8004f60:	1854      	adds	r4, r2, r1
 8004f62:	4649      	mov	r1, r9
 8004f64:	eb43 0501 	adc.w	r5, r3, r1
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	00eb      	lsls	r3, r5, #3
 8004f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f76:	00e2      	lsls	r2, r4, #3
 8004f78:	4614      	mov	r4, r2
 8004f7a:	461d      	mov	r5, r3
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	18e3      	adds	r3, r4, r3
 8004f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f84:	464b      	mov	r3, r9
 8004f86:	eb45 0303 	adc.w	r3, r5, r3
 8004f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004faa:	4629      	mov	r1, r5
 8004fac:	008b      	lsls	r3, r1, #2
 8004fae:	4621      	mov	r1, r4
 8004fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	008a      	lsls	r2, r1, #2
 8004fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fbc:	f7fb f904 	bl	80001c8 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4b60      	ldr	r3, [pc, #384]	; (8005148 <UART_SetConfig+0x4e4>)
 8004fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	011c      	lsls	r4, r3, #4
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	61b9      	str	r1, [r7, #24]
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	1851      	adds	r1, r2, r1
 8004ff4:	6139      	str	r1, [r7, #16]
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	414b      	adcs	r3, r1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005008:	4659      	mov	r1, fp
 800500a:	00cb      	lsls	r3, r1, #3
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005012:	4651      	mov	r1, sl
 8005014:	00ca      	lsls	r2, r1, #3
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	4603      	mov	r3, r0
 800501c:	4642      	mov	r2, r8
 800501e:	189b      	adds	r3, r3, r2
 8005020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005024:	464b      	mov	r3, r9
 8005026:	460a      	mov	r2, r1
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	67bb      	str	r3, [r7, #120]	; 0x78
 800503a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005048:	4649      	mov	r1, r9
 800504a:	008b      	lsls	r3, r1, #2
 800504c:	4641      	mov	r1, r8
 800504e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005052:	4641      	mov	r1, r8
 8005054:	008a      	lsls	r2, r1, #2
 8005056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800505a:	f7fb f8b5 	bl	80001c8 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b39      	ldr	r3, [pc, #228]	; (8005148 <UART_SetConfig+0x4e4>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a34      	ldr	r2, [pc, #208]	; (8005148 <UART_SetConfig+0x4e4>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005082:	441c      	add	r4, r3
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	673b      	str	r3, [r7, #112]	; 0x70
 800508c:	677a      	str	r2, [r7, #116]	; 0x74
 800508e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005092:	4642      	mov	r2, r8
 8005094:	464b      	mov	r3, r9
 8005096:	1891      	adds	r1, r2, r2
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	415b      	adcs	r3, r3
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050a2:	4641      	mov	r1, r8
 80050a4:	1851      	adds	r1, r2, r1
 80050a6:	6039      	str	r1, [r7, #0]
 80050a8:	4649      	mov	r1, r9
 80050aa:	414b      	adcs	r3, r1
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050ba:	4659      	mov	r1, fp
 80050bc:	00cb      	lsls	r3, r1, #3
 80050be:	4651      	mov	r1, sl
 80050c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050c4:	4651      	mov	r1, sl
 80050c6:	00ca      	lsls	r2, r1, #3
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	4603      	mov	r3, r0
 80050ce:	4642      	mov	r2, r8
 80050d0:	189b      	adds	r3, r3, r2
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d4:	464b      	mov	r3, r9
 80050d6:	460a      	mov	r2, r1
 80050d8:	eb42 0303 	adc.w	r3, r2, r3
 80050dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	663b      	str	r3, [r7, #96]	; 0x60
 80050e8:	667a      	str	r2, [r7, #100]	; 0x64
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050f6:	4649      	mov	r1, r9
 80050f8:	008b      	lsls	r3, r1, #2
 80050fa:	4641      	mov	r1, r8
 80050fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005100:	4641      	mov	r1, r8
 8005102:	008a      	lsls	r2, r1, #2
 8005104:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005108:	f7fb f85e 	bl	80001c8 <__aeabi_uldivmod>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <UART_SetConfig+0x4e4>)
 8005112:	fba3 1302 	umull	r1, r3, r3, r2
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2164      	movs	r1, #100	; 0x64
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	3332      	adds	r3, #50	; 0x32
 8005124:	4a08      	ldr	r2, [pc, #32]	; (8005148 <UART_SetConfig+0x4e4>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4422      	add	r2, r4
 8005138:	609a      	str	r2, [r3, #8]
}
 800513a:	bf00      	nop
 800513c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005140:	46bd      	mov	sp, r7
 8005142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005146:	bf00      	nop
 8005148:	51eb851f 	.word	0x51eb851f

0800514c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800514c:	b084      	sub	sp, #16
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	f107 001c 	add.w	r0, r7, #28
 800515a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005162:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005164:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005166:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800516a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800516e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005172:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005176:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005186:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	b004      	add	sp, #16
 80051a0:	4770      	bx	lr

080051a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2203      	movs	r2, #3
 80051ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0303 	and.w	r3, r3, #3
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005234:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800523a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005240:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005250:	f023 030f 	bic.w	r3, r3, #15
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	b2db      	uxtb	r3, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3314      	adds	r3, #20
 8005292:	461a      	mov	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4413      	add	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
}  
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052d0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80052d6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80052dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0

}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b088      	sub	sp, #32
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005310:	2310      	movs	r3, #16
 8005312:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800531c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005320:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff74 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	2110      	movs	r1, #16
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa19 	bl	800576c <SDMMC_GetCmdResp1>
 800533a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800533c:	69fb      	ldr	r3, [r7, #28]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005354:	2311      	movs	r3, #17
 8005356:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005364:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ff52 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	2111      	movs	r1, #17
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f9f7 	bl	800576c <SDMMC_GetCmdResp1>
 800537e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005380:	69fb      	ldr	r3, [r7, #28]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b088      	sub	sp, #32
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005398:	2312      	movs	r3, #18
 800539a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800539c:	2340      	movs	r3, #64	; 0x40
 800539e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053aa:	f107 0308 	add.w	r3, r7, #8
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff30 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	2112      	movs	r1, #18
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9d5 	bl	800576c <SDMMC_GetCmdResp1>
 80053c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053c4:	69fb      	ldr	r3, [r7, #28]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b088      	sub	sp, #32
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80053dc:	2318      	movs	r3, #24
 80053de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053e0:	2340      	movs	r3, #64	; 0x40
 80053e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ff0e 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	2118      	movs	r1, #24
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f9b3 	bl	800576c <SDMMC_GetCmdResp1>
 8005406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005408:	69fb      	ldr	r3, [r7, #28]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005420:	2319      	movs	r3, #25
 8005422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800542c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005430:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff feec 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800543e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005442:	2119      	movs	r1, #25
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f991 	bl	800576c <SDMMC_GetCmdResp1>
 800544a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800544c:	69fb      	ldr	r3, [r7, #28]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005464:	230c      	movs	r3, #12
 8005466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005474:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005476:	f107 0308 	add.w	r3, r7, #8
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff feca 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005482:	4a05      	ldr	r2, [pc, #20]	; (8005498 <SDMMC_CmdStopTransfer+0x40>)
 8005484:	210c      	movs	r1, #12
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f970 	bl	800576c <SDMMC_GetCmdResp1>
 800548c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800548e:	69fb      	ldr	r3, [r7, #28]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	05f5e100 	.word	0x05f5e100

0800549c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80054ac:	2307      	movs	r3, #7
 80054ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054bc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054be:	f107 0310 	add.w	r3, r7, #16
 80054c2:	4619      	mov	r1, r3
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff fea6 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	2107      	movs	r1, #7
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f94b 	bl	800576c <SDMMC_GetCmdResp1>
 80054d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3728      	adds	r7, #40	; 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005500:	f107 0308 	add.w	r3, r7, #8
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fe85 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fb65 	bl	8005bdc <SDMMC_GetCmdError>
 8005512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005514:	69fb      	ldr	r3, [r7, #28]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b088      	sub	sp, #32
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005526:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800552a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800552c:	2308      	movs	r3, #8
 800552e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005530:	2340      	movs	r3, #64	; 0x40
 8005532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800553c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800553e:	f107 0308 	add.w	r3, r7, #8
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fe66 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 faf8 	bl	8005b40 <SDMMC_GetCmdResp7>
 8005550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005552:	69fb      	ldr	r3, [r7, #28]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800556a:	2337      	movs	r3, #55	; 0x37
 800556c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800556e:	2340      	movs	r3, #64	; 0x40
 8005570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800557c:	f107 0308 	add.w	r3, r7, #8
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fe47 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005588:	f241 3288 	movw	r2, #5000	; 0x1388
 800558c:	2137      	movs	r1, #55	; 0x37
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f8ec 	bl	800576c <SDMMC_GetCmdResp1>
 8005594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005596:	69fb      	ldr	r3, [r7, #28]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80055b6:	2329      	movs	r3, #41	; 0x29
 80055b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055c8:	f107 0308 	add.w	r3, r7, #8
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fe21 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f9ff 	bl	80059d8 <SDMMC_GetCmdResp3>
 80055da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055dc:	69fb      	ldr	r3, [r7, #28]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b088      	sub	sp, #32
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80055f4:	2306      	movs	r3, #6
 80055f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055f8:	2340      	movs	r3, #64	; 0x40
 80055fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005604:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fe02 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005612:	f241 3288 	movw	r2, #5000	; 0x1388
 8005616:	2106      	movs	r1, #6
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8a7 	bl	800576c <SDMMC_GetCmdResp1>
 800561e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005620:	69fb      	ldr	r3, [r7, #28]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b088      	sub	sp, #32
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005636:	2333      	movs	r3, #51	; 0x33
 8005638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800563a:	2340      	movs	r3, #64	; 0x40
 800563c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005646:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005648:	f107 0308 	add.w	r3, r7, #8
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fde1 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005654:	f241 3288 	movw	r2, #5000	; 0x1388
 8005658:	2133      	movs	r1, #51	; 0x33
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f886 	bl	800576c <SDMMC_GetCmdResp1>
 8005660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005662:	69fb      	ldr	r3, [r7, #28]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005678:	2302      	movs	r3, #2
 800567a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800567c:	23c0      	movs	r3, #192	; 0xc0
 800567e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fdc0 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f956 	bl	8005948 <SDMMC_GetCmdResp2>
 800569c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569e:	69fb      	ldr	r3, [r7, #28]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80056b6:	2309      	movs	r3, #9
 80056b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80056ba:	23c0      	movs	r3, #192	; 0xc0
 80056bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fda1 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f937 	bl	8005948 <SDMMC_GetCmdResp2>
 80056da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056dc:	69fb      	ldr	r3, [r7, #28]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b088      	sub	sp, #32
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80056f4:	2303      	movs	r3, #3
 80056f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005704:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005706:	f107 0308 	add.w	r3, r7, #8
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff fd82 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	2103      	movs	r1, #3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f99c 	bl	8005a54 <SDMMC_GetCmdResp6>
 800571c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800571e:	69fb      	ldr	r3, [r7, #28]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005736:	230d      	movs	r3, #13
 8005738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800573a:	2340      	movs	r3, #64	; 0x40
 800573c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005748:	f107 0308 	add.w	r3, r7, #8
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fd61 	bl	8005216 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	210d      	movs	r1, #13
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f806 	bl	800576c <SDMMC_GetCmdResp1>
 8005760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005762:	69fb      	ldr	r3, [r7, #28]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	460b      	mov	r3, r1
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800577a:	4b70      	ldr	r3, [pc, #448]	; (800593c <SDMMC_GetCmdResp1+0x1d0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a70      	ldr	r2, [pc, #448]	; (8005940 <SDMMC_GetCmdResp1+0x1d4>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	0a5a      	lsrs	r2, r3, #9
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	1e5a      	subs	r2, r3, #1
 8005792:	61fa      	str	r2, [r7, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800579c:	e0c9      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ef      	beq.n	800578e <SDMMC_GetCmdResp1+0x22>
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ea      	bne.n	800578e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2204      	movs	r2, #4
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057ca:	2304      	movs	r3, #4
 80057cc:	e0b1      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0a6      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	22c5      	movs	r2, #197	; 0xc5
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fd3d 	bl	800526a <SDIO_GetCommandResponse>
 80057f0:	4603      	mov	r3, r0
 80057f2:	461a      	mov	r2, r3
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d001      	beq.n	80057fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e099      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80057fe:	2100      	movs	r1, #0
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fd3f 	bl	8005284 <SDIO_GetResponse>
 8005806:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4b4e      	ldr	r3, [pc, #312]	; (8005944 <SDMMC_GetCmdResp1+0x1d8>)
 800580c:	4013      	ands	r3, r2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005812:	2300      	movs	r3, #0
 8005814:	e08d      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da02      	bge.n	8005822 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800581c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005820:	e087      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	e080      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	e079      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800584c:	e071      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800585c:	e069      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586c:	e061      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800587c:	e059      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800588c:	e051      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800589c:	e049      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80058a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058ac:	e041      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80058b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058bc:	e039      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80058c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058cc:	e031      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80058d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058dc:	e029      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80058e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058ec:	e021      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80058f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80058fc:	e019      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005908:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800590c:	e011      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005918:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800591c:	e009      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005928:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800592c:	e001      	b.n	8005932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800592e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000000 	.word	0x20000000
 8005940:	10624dd3 	.word	0x10624dd3
 8005944:	fdffe008 	.word	0xfdffe008

08005948 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005950:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <SDMMC_GetCmdResp2+0x88>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <SDMMC_GetCmdResp2+0x8c>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	0a5b      	lsrs	r3, r3, #9
 800595c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1e5a      	subs	r2, r3, #1
 800596a:	60fa      	str	r2, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005974:	e026      	b.n	80059c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ef      	beq.n	8005966 <SDMMC_GetCmdResp2+0x1e>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ea      	bne.n	8005966 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2204      	movs	r2, #4
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059a2:	2304      	movs	r3, #4
 80059a4:	e00e      	b.n	80059c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e003      	b.n	80059c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	22c5      	movs	r2, #197	; 0xc5
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000000 	.word	0x20000000
 80059d4:	10624dd3 	.word	0x10624dd3

080059d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <SDMMC_GetCmdResp3+0x74>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	; (8005a50 <SDMMC_GetCmdResp3+0x78>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	0a5b      	lsrs	r3, r3, #9
 80059ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1e5a      	subs	r2, r3, #1
 80059fa:	60fa      	str	r2, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a04:	e01b      	b.n	8005a3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ef      	beq.n	80059f6 <SDMMC_GetCmdResp3+0x1e>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ea      	bne.n	80059f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a32:	2304      	movs	r3, #4
 8005a34:	e003      	b.n	8005a3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	22c5      	movs	r2, #197	; 0xc5
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000000 	.word	0x20000000
 8005a50:	10624dd3 	.word	0x10624dd3

08005a54 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a62:	4b35      	ldr	r3, [pc, #212]	; (8005b38 <SDMMC_GetCmdResp6+0xe4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <SDMMC_GetCmdResp6+0xe8>)
 8005a68:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6c:	0a5b      	lsrs	r3, r3, #9
 8005a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	1e5a      	subs	r2, r3, #1
 8005a7c:	61fa      	str	r2, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a86:	e052      	b.n	8005b2e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ef      	beq.n	8005a78 <SDMMC_GetCmdResp6+0x24>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1ea      	bne.n	8005a78 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	e03a      	b.n	8005b2e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e02f      	b.n	8005b2e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fbcb 	bl	800526a <SDIO_GetCommandResponse>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	7afb      	ldrb	r3, [r7, #11]
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d001      	beq.n	8005ae2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e025      	b.n	8005b2e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	22c5      	movs	r2, #197	; 0xc5
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ae8:	2100      	movs	r1, #0
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fbca 	bl	8005284 <SDIO_GetResponse>
 8005af0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e011      	b.n	8005b2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b18:	e009      	b.n	8005b2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b28:	e001      	b.n	8005b2e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000000 	.word	0x20000000
 8005b3c:	10624dd3 	.word	0x10624dd3

08005b40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b48:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <SDMMC_GetCmdResp7+0x94>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a22      	ldr	r2, [pc, #136]	; (8005bd8 <SDMMC_GetCmdResp7+0x98>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	0a5b      	lsrs	r3, r3, #9
 8005b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1e5a      	subs	r2, r3, #1
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b6c:	e02c      	b.n	8005bc8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ef      	beq.n	8005b5e <SDMMC_GetCmdResp7+0x1e>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ea      	bne.n	8005b5e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	e014      	b.n	8005bc8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e009      	b.n	8005bc8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005bc6:	2300      	movs	r3, #0
  
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	20000000 	.word	0x20000000
 8005bd8:	10624dd3 	.word	0x10624dd3

08005bdc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005be4:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <SDMMC_GetCmdError+0x50>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a11      	ldr	r2, [pc, #68]	; (8005c30 <SDMMC_GetCmdError+0x54>)
 8005bea:	fba2 2303 	umull	r2, r3, r2, r3
 8005bee:	0a5b      	lsrs	r3, r3, #9
 8005bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1e5a      	subs	r2, r3, #1
 8005bfe:	60fa      	str	r2, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c08:	e009      	b.n	8005c1e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f1      	beq.n	8005bfa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	22c5      	movs	r2, #197	; 0xc5
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000000 	.word	0x20000000
 8005c30:	10624dd3 	.word	0x10624dd3

08005c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c34:	b084      	sub	sp, #16
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	f107 001c 	add.w	r0, r7, #28
 8005c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d122      	bne.n	8005c92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d105      	bne.n	8005c86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fdc0 	bl	800680c <USB_CoreReset>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
 8005c90:	e01a      	b.n	8005cc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fdb4 	bl	800680c <USB_CoreReset>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8005cba:	e005      	b.n	8005cc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10b      	bne.n	8005ce6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f043 0206 	orr.w	r2, r3, #6
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f043 0220 	orr.w	r2, r3, #32
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cf2:	b004      	add	sp, #16
 8005cf4:	4770      	bx	lr
	...

08005cf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d165      	bne.n	8005dd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4a41      	ldr	r2, [pc, #260]	; (8005e14 <USB_SetTurnaroundTime+0x11c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d906      	bls.n	8005d22 <USB_SetTurnaroundTime+0x2a>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4a40      	ldr	r2, [pc, #256]	; (8005e18 <USB_SetTurnaroundTime+0x120>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d202      	bcs.n	8005d22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d1c:	230f      	movs	r3, #15
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e062      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4a3c      	ldr	r2, [pc, #240]	; (8005e18 <USB_SetTurnaroundTime+0x120>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d306      	bcc.n	8005d38 <USB_SetTurnaroundTime+0x40>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4a3b      	ldr	r2, [pc, #236]	; (8005e1c <USB_SetTurnaroundTime+0x124>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d202      	bcs.n	8005d38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d32:	230e      	movs	r3, #14
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e057      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4a38      	ldr	r2, [pc, #224]	; (8005e1c <USB_SetTurnaroundTime+0x124>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d306      	bcc.n	8005d4e <USB_SetTurnaroundTime+0x56>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4a37      	ldr	r2, [pc, #220]	; (8005e20 <USB_SetTurnaroundTime+0x128>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d202      	bcs.n	8005d4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d48:	230d      	movs	r3, #13
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e04c      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	4a33      	ldr	r2, [pc, #204]	; (8005e20 <USB_SetTurnaroundTime+0x128>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d306      	bcc.n	8005d64 <USB_SetTurnaroundTime+0x6c>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4a32      	ldr	r2, [pc, #200]	; (8005e24 <USB_SetTurnaroundTime+0x12c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d802      	bhi.n	8005d64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d5e:	230c      	movs	r3, #12
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e041      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4a2f      	ldr	r2, [pc, #188]	; (8005e24 <USB_SetTurnaroundTime+0x12c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d906      	bls.n	8005d7a <USB_SetTurnaroundTime+0x82>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4a2e      	ldr	r2, [pc, #184]	; (8005e28 <USB_SetTurnaroundTime+0x130>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d802      	bhi.n	8005d7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d74:	230b      	movs	r3, #11
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e036      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4a2a      	ldr	r2, [pc, #168]	; (8005e28 <USB_SetTurnaroundTime+0x130>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d906      	bls.n	8005d90 <USB_SetTurnaroundTime+0x98>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	4a29      	ldr	r2, [pc, #164]	; (8005e2c <USB_SetTurnaroundTime+0x134>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d802      	bhi.n	8005d90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d8a:	230a      	movs	r3, #10
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	e02b      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <USB_SetTurnaroundTime+0x134>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d906      	bls.n	8005da6 <USB_SetTurnaroundTime+0xae>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <USB_SetTurnaroundTime+0x138>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d202      	bcs.n	8005da6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005da0:	2309      	movs	r3, #9
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e020      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <USB_SetTurnaroundTime+0x138>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d306      	bcc.n	8005dbc <USB_SetTurnaroundTime+0xc4>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <USB_SetTurnaroundTime+0x13c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d802      	bhi.n	8005dbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005db6:	2308      	movs	r3, #8
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e015      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <USB_SetTurnaroundTime+0x13c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d906      	bls.n	8005dd2 <USB_SetTurnaroundTime+0xda>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4a1c      	ldr	r2, [pc, #112]	; (8005e38 <USB_SetTurnaroundTime+0x140>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d202      	bcs.n	8005dd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005dcc:	2307      	movs	r3, #7
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e00a      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005dd2:	2306      	movs	r3, #6
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e007      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005dde:	2309      	movs	r3, #9
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	e001      	b.n	8005de8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005de4:	2309      	movs	r3, #9
 8005de6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	00d8acbf 	.word	0x00d8acbf
 8005e18:	00e4e1c0 	.word	0x00e4e1c0
 8005e1c:	00f42400 	.word	0x00f42400
 8005e20:	01067380 	.word	0x01067380
 8005e24:	011a499f 	.word	0x011a499f
 8005e28:	01312cff 	.word	0x01312cff
 8005e2c:	014ca43f 	.word	0x014ca43f
 8005e30:	016e3600 	.word	0x016e3600
 8005e34:	01a6ab1f 	.word	0x01a6ab1f
 8005e38:	01e84800 	.word	0x01e84800

08005e3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f023 0201 	bic.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d115      	bne.n	8005eac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f7fb f87f 	bl	8000f90 <HAL_Delay>
      ms++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fc27 	bl	80066ec <USB_GetMode>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d01e      	beq.n	8005ee2 <USB_SetCurrentMode+0x84>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b31      	cmp	r3, #49	; 0x31
 8005ea8:	d9f0      	bls.n	8005e8c <USB_SetCurrentMode+0x2e>
 8005eaa:	e01a      	b.n	8005ee2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d115      	bne.n	8005ede <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	f7fb f866 	bl	8000f90 <HAL_Delay>
      ms++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fc0e 	bl	80066ec <USB_GetMode>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <USB_SetCurrentMode+0x84>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b31      	cmp	r3, #49	; 0x31
 8005eda:	d9f0      	bls.n	8005ebe <USB_SetCurrentMode+0x60>
 8005edc:	e001      	b.n	8005ee2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e005      	b.n	8005eee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b32      	cmp	r3, #50	; 0x32
 8005ee6:	d101      	bne.n	8005eec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ef8:	b084      	sub	sp, #16
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	e009      	b.n	8005f2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3340      	adds	r3, #64	; 0x40
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b0e      	cmp	r3, #14
 8005f30:	d9f2      	bls.n	8005f18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11c      	bne.n	8005f72 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f46:	f043 0302 	orr.w	r3, r3, #2
 8005f4a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
 8005f70:	e00b      	b.n	8005f8a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	680b      	ldr	r3, [r1, #0]
 8005fa8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10c      	bne.n	8005fca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d104      	bne.n	8005fc0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f965 	bl	8006288 <USB_SetDevSpeed>
 8005fbe:	e008      	b.n	8005fd2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f960 	bl	8006288 <USB_SetDevSpeed>
 8005fc8:	e003      	b.n	8005fd2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fca:	2103      	movs	r1, #3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f95b 	bl	8006288 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fd2:	2110      	movs	r1, #16
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f8f3 	bl	80061c0 <USB_FlushTxFifo>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f91f 	bl	8006228 <USB_FlushRxFifo>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	461a      	mov	r2, r3
 8006014:	2300      	movs	r3, #0
 8006016:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	e043      	b.n	80060a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006034:	d118      	bne.n	8006068 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	461a      	mov	r2, r3
 800604a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	e013      	b.n	800607a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605e:	461a      	mov	r2, r3
 8006060:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e008      	b.n	800607a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	461a      	mov	r2, r3
 8006076:	2300      	movs	r3, #0
 8006078:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	461a      	mov	r2, r3
 8006088:	2300      	movs	r3, #0
 800608a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	461a      	mov	r2, r3
 800609a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800609e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	3301      	adds	r3, #1
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d3b7      	bcc.n	800601e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ae:	2300      	movs	r3, #0
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	e043      	b.n	800613c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ca:	d118      	bne.n	80060fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	461a      	mov	r2, r3
 80060e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e013      	b.n	8006110 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	461a      	mov	r2, r3
 80060f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e008      	b.n	8006110 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610a:	461a      	mov	r2, r3
 800610c:	2300      	movs	r3, #0
 800610e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	461a      	mov	r2, r3
 8006130:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006134:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	3301      	adds	r3, #1
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d3b7      	bcc.n	80060b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006156:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006164:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f043 0210 	orr.w	r2, r3, #16
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <USB_DevInit+0x2c4>)
 800617e:	4313      	orrs	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f043 0208 	orr.w	r2, r3, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006198:	2b01      	cmp	r3, #1
 800619a:	d107      	bne.n	80061ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	f043 0304 	orr.w	r3, r3, #4
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061b8:	b004      	add	sp, #16
 80061ba:	4770      	bx	lr
 80061bc:	803c3800 	.word	0x803c3800

080061c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a13      	ldr	r2, [pc, #76]	; (8006224 <USB_FlushTxFifo+0x64>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d901      	bls.n	80061e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e01b      	b.n	8006218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	daf2      	bge.n	80061ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	019b      	lsls	r3, r3, #6
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a08      	ldr	r2, [pc, #32]	; (8006224 <USB_FlushTxFifo+0x64>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e006      	b.n	8006218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d0f0      	beq.n	80061f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	00030d40 	.word	0x00030d40

08006228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a11      	ldr	r2, [pc, #68]	; (8006284 <USB_FlushRxFifo+0x5c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e018      	b.n	8006278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	daf2      	bge.n	8006234 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2210      	movs	r2, #16
 8006256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <USB_FlushRxFifo+0x5c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d901      	bls.n	800626a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e006      	b.n	8006278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	2b10      	cmp	r3, #16
 8006274:	d0f0      	beq.n	8006258 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	00030d40 	.word	0x00030d40

08006288 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a8:	4313      	orrs	r3, r2
 80062aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b087      	sub	sp, #28
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0306 	and.w	r3, r3, #6
 80062d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
 80062de:	e00a      	b.n	80062f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d002      	beq.n	80062ec <USB_GetDevSpeed+0x32>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d102      	bne.n	80062f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062ec:	2302      	movs	r3, #2
 80062ee:	75fb      	strb	r3, [r7, #23]
 80062f0:	e001      	b.n	80062f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80062f2:	230f      	movs	r3, #15
 80062f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d14a      	bne.n	80063b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633a:	f040 8086 	bne.w	800644a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	7812      	ldrb	r2, [r2, #0]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006360:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	7812      	ldrb	r2, [r2, #0]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006384:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3301      	adds	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006392:	4293      	cmp	r3, r2
 8006394:	d902      	bls.n	800639c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
          break;
 800639a:	e056      	b.n	800644a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063b4:	d0e7      	beq.n	8006386 <USB_EPStopXfer+0x82>
 80063b6:	e048      	b.n	800644a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d0:	d13b      	bne.n	800644a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	7812      	ldrb	r2, [r2, #0]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006418:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f242 7210 	movw	r2, #10000	; 0x2710
 8006426:	4293      	cmp	r3, r2
 8006428:	d902      	bls.n	8006430 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	75fb      	strb	r3, [r7, #23]
          break;
 800642e:	e00c      	b.n	800644a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006448:	d0e7      	beq.n	800641a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	; 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	460b      	mov	r3, r1
 8006468:	71fb      	strb	r3, [r7, #7]
 800646a:	4613      	mov	r3, r2
 800646c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006476:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d123      	bne.n	80064c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800647e:	88bb      	ldrh	r3, [r7, #4]
 8006480:	3303      	adds	r3, #3
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	e018      	b.n	80064be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	031a      	lsls	r2, r3, #12
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4413      	add	r3, r2
 8006494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006498:	461a      	mov	r2, r3
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3301      	adds	r3, #1
 80064aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	3301      	adds	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3301      	adds	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d3e2      	bcc.n	800648c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3724      	adds	r7, #36	; 0x24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b08b      	sub	sp, #44	; 0x2c
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	623b      	str	r3, [r7, #32]
 80064fe:	e014      	b.n	800652a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	601a      	str	r2, [r3, #0]
    pDest++;
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	3301      	adds	r3, #1
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	3301      	adds	r3, #1
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	3301      	adds	r3, #1
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	3301      	adds	r3, #1
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	3301      	adds	r3, #1
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	429a      	cmp	r2, r3
 8006530:	d3e6      	bcc.n	8006500 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006532:	8bfb      	ldrh	r3, [r7, #30]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01e      	beq.n	8006576 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006542:	461a      	mov	r2, r3
 8006544:	f107 0310 	add.w	r3, r7, #16
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	701a      	strb	r2, [r3, #0]
      i++;
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	3301      	adds	r3, #1
 8006562:	623b      	str	r3, [r7, #32]
      pDest++;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	3301      	adds	r3, #1
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800656a:	8bfb      	ldrh	r3, [r7, #30]
 800656c:	3b01      	subs	r3, #1
 800656e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006570:	8bfb      	ldrh	r3, [r7, #30]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1ea      	bne.n	800654c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006578:	4618      	mov	r0, r3
 800657a:	372c      	adds	r7, #44	; 0x2c
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b2:	f043 0302 	orr.w	r3, r3, #2
 80065b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4013      	ands	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065de:	68fb      	ldr	r3, [r7, #12]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	0c1b      	lsrs	r3, r3, #16
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4013      	ands	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	b29b      	uxth	r3, r3
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006682:	68bb      	ldr	r3, [r7, #8]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	01db      	lsls	r3, r3, #7
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4013      	ands	r3, r2
 80066dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066de:	68bb      	ldr	r3, [r7, #8]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0301 	and.w	r3, r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006722:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	460b      	mov	r3, r1
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	333c      	adds	r3, #60	; 0x3c
 8006766:	3304      	adds	r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4a26      	ldr	r2, [pc, #152]	; (8006808 <USB_EP0_OutStart+0xb8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d90a      	bls.n	800678a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006784:	d101      	bne.n	800678a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	e037      	b.n	80067fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b8:	f043 0318 	orr.w	r3, r3, #24
 80067bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10f      	bne.n	80067f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	4f54300a 	.word	0x4f54300a

0800680c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <USB_CoreReset+0x64>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e01b      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	daf2      	bge.n	8006818 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f043 0201 	orr.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a09      	ldr	r2, [pc, #36]	; (8006870 <USB_CoreReset+0x64>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d901      	bls.n	8006854 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e006      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d0f0      	beq.n	8006842 <USB_CoreReset+0x36>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	00030d40 	.word	0x00030d40

08006874 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006878:	4904      	ldr	r1, [pc, #16]	; (800688c <MX_FATFS_Init+0x18>)
 800687a:	4805      	ldr	r0, [pc, #20]	; (8006890 <MX_FATFS_Init+0x1c>)
 800687c:	f000 fe48 	bl	8007510 <FATFS_LinkDriver>
 8006880:	4603      	mov	r3, r0
 8006882:	461a      	mov	r2, r3
 8006884:	4b03      	ldr	r3, [pc, #12]	; (8006894 <MX_FATFS_Init+0x20>)
 8006886:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006888:	bf00      	nop
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000994 	.word	0x20000994
 8006890:	0800799c 	.word	0x0800799c
 8006894:	20000990 	.word	0x20000990

08006898 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80068a2:	f000 f879 	bl	8006998 <BSP_SD_IsDetected>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d001      	beq.n	80068b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e012      	b.n	80068d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80068b0:	480b      	ldr	r0, [pc, #44]	; (80068e0 <BSP_SD_Init+0x48>)
 80068b2:	f7fc fbad 	bl	8003010 <HAL_SD_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80068c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068c4:	4806      	ldr	r0, [pc, #24]	; (80068e0 <BSP_SD_Init+0x48>)
 80068c6:	f7fd f987 	bl	8003bd8 <HAL_SD_ConfigWideBusOperation>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80068d4:	79fb      	ldrb	r3, [r7, #7]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000374 	.word	0x20000374

080068e4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	4806      	ldr	r0, [pc, #24]	; (800691c <BSP_SD_ReadBlocks+0x38>)
 8006902:	f7fc fc35 	bl	8003170 <HAL_SD_ReadBlocks>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000374 	.word	0x20000374

08006920 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	4806      	ldr	r0, [pc, #24]	; (8006958 <BSP_SD_WriteBlocks+0x38>)
 800693e:	f7fc fdf5 	bl	800352c <HAL_SD_WriteBlocks>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000374 	.word	0x20000374

0800695c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006960:	4805      	ldr	r0, [pc, #20]	; (8006978 <BSP_SD_GetCardState+0x1c>)
 8006962:	f7fd f9d3 	bl	8003d0c <HAL_SD_GetCardState>
 8006966:	4603      	mov	r3, r0
 8006968:	2b04      	cmp	r3, #4
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
}
 8006972:	4618      	mov	r0, r3
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000374 	.word	0x20000374

0800697c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4803      	ldr	r0, [pc, #12]	; (8006994 <BSP_SD_GetCardInfo+0x18>)
 8006988:	f7fd f8fa 	bl	8003b80 <HAL_SD_GetCardInfo>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000374 	.word	0x20000374

08006998 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800699e:	2301      	movs	r3, #1
 80069a0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	b2db      	uxtb	r3, r3
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <SD_CheckStatus+0x38>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80069c4:	f7ff ffca 	bl	800695c <BSP_SD_GetCardState>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d107      	bne.n	80069de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80069ce:	4b07      	ldr	r3, [pc, #28]	; (80069ec <SD_CheckStatus+0x38>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	4b04      	ldr	r3, [pc, #16]	; (80069ec <SD_CheckStatus+0x38>)
 80069dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80069de:	4b03      	ldr	r3, [pc, #12]	; (80069ec <SD_CheckStatus+0x38>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b2db      	uxtb	r3, r3
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000009 	.word	0x20000009

080069f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <SD_initialize+0x38>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006a00:	f7ff ff4a 	bl	8006898 <BSP_SD_Init>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d107      	bne.n	8006a1a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ffd1 	bl	80069b4 <SD_CheckStatus>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
 8006a16:	4b04      	ldr	r3, [pc, #16]	; (8006a28 <SD_initialize+0x38>)
 8006a18:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006a1a:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <SD_initialize+0x38>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	b2db      	uxtb	r3, r3
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000009 	.word	0x20000009

08006a2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff ffbb 	bl	80069b4 <SD_CheckStatus>
 8006a3e:	4603      	mov	r3, r0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	68b8      	ldr	r0, [r7, #8]
 8006a66:	f7ff ff3d 	bl	80068e4 <BSP_SD_ReadBlocks>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d107      	bne.n	8006a80 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006a70:	bf00      	nop
 8006a72:	f7ff ff73 	bl	800695c <BSP_SD_GetCardState>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1fa      	bne.n	8006a72 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b086      	sub	sp, #24
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	68b8      	ldr	r0, [r7, #8]
 8006aa8:	f7ff ff3a 	bl	8006920 <BSP_SD_WriteBlocks>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d107      	bne.n	8006ac2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006ab2:	bf00      	nop
 8006ab4:	f7ff ff52 	bl	800695c <BSP_SD_GetCardState>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1fa      	bne.n	8006ab4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	603a      	str	r2, [r7, #0]
 8006ad6:	71fb      	strb	r3, [r7, #7]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006ae2:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <SD_ioctl+0xac>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <SD_ioctl+0x28>
 8006af0:	2303      	movs	r3, #3
 8006af2:	e03c      	b.n	8006b6e <SD_ioctl+0xa2>

  switch (cmd)
 8006af4:	79bb      	ldrb	r3, [r7, #6]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d834      	bhi.n	8006b64 <SD_ioctl+0x98>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <SD_ioctl+0x34>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b19 	.word	0x08006b19
 8006b08:	08006b31 	.word	0x08006b31
 8006b0c:	08006b4b 	.word	0x08006b4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006b16:	e028      	b.n	8006b6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff ff2d 	bl	800697c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006b2e:	e01c      	b.n	8006b6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b30:	f107 030c 	add.w	r3, r7, #12
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff ff21 	bl	800697c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006b48:	e00f      	b.n	8006b6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b4a:	f107 030c 	add.w	r3, r7, #12
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff ff14 	bl	800697c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	0a5a      	lsrs	r2, r3, #9
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006b62:	e002      	b.n	8006b6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006b64:	2304      	movs	r3, #4
 8006b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3730      	adds	r7, #48	; 0x30
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000009 	.word	0x20000009

08006b7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	4a08      	ldr	r2, [pc, #32]	; (8006bac <disk_status+0x30>)
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	79fa      	ldrb	r2, [r7, #7]
 8006b94:	4905      	ldr	r1, [pc, #20]	; (8006bac <disk_status+0x30>)
 8006b96:	440a      	add	r2, r1
 8006b98:	7a12      	ldrb	r2, [r2, #8]
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4798      	blx	r3
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200009c0 	.word	0x200009c0

08006bb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <disk_initialize+0x48>)
 8006bc2:	5cd3      	ldrb	r3, [r2, r3]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d111      	bne.n	8006bec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	4a0b      	ldr	r2, [pc, #44]	; (8006bf8 <disk_initialize+0x48>)
 8006bcc:	2101      	movs	r1, #1
 8006bce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <disk_initialize+0x48>)
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	79fa      	ldrb	r2, [r7, #7]
 8006bde:	4906      	ldr	r1, [pc, #24]	; (8006bf8 <disk_initialize+0x48>)
 8006be0:	440a      	add	r2, r1
 8006be2:	7a12      	ldrb	r2, [r2, #8]
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200009c0 	.word	0x200009c0

08006bfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <disk_read+0x3c>)
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	689c      	ldr	r4, [r3, #8]
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <disk_read+0x3c>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	7a18      	ldrb	r0, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	47a0      	blx	r4
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd90      	pop	{r4, r7, pc}
 8006c36:	bf00      	nop
 8006c38:	200009c0 	.word	0x200009c0

08006c3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <disk_write+0x3c>)
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	68dc      	ldr	r4, [r3, #12]
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	4a07      	ldr	r2, [pc, #28]	; (8006c78 <disk_write+0x3c>)
 8006c5c:	4413      	add	r3, r2
 8006c5e:	7a18      	ldrb	r0, [r3, #8]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	47a0      	blx	r4
 8006c68:	4603      	mov	r3, r0
 8006c6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200009c0 	.word	0x200009c0

08006c7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3301      	adds	r3, #1
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006c8c:	89fb      	ldrh	r3, [r7, #14]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	b21a      	sxth	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	b21b      	sxth	r3, r3
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	b21b      	sxth	r3, r3
 8006c9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3303      	adds	r3, #3
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	3202      	adds	r2, #2
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	3201      	adds	r2, #1
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	7812      	ldrb	r2, [r2, #0]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
	return rv;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e010      	b.n	8006d24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d02:	4a0d      	ldr	r2, [pc, #52]	; (8006d38 <clear_lock+0x44>)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	4413      	add	r3, r2
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d105      	bne.n	8006d1e <clear_lock+0x2a>
 8006d12:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <clear_lock+0x44>)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	4413      	add	r3, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d9eb      	bls.n	8006d02 <clear_lock+0xe>
	}
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	200009a0 	.word	0x200009a0

08006d3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	78db      	ldrb	r3, [r3, #3]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d034      	beq.n	8006dba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7858      	ldrb	r0, [r3, #1]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d60:	2301      	movs	r3, #1
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	f7ff ff6a 	bl	8006c3c <disk_write>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e022      	b.n	8006dba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d217      	bcs.n	8006dba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	789b      	ldrb	r3, [r3, #2]
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	e010      	b.n	8006db4 <sync_window+0x78>
					wsect += fs->fsize;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4413      	add	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7858      	ldrb	r0, [r3, #1]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006da6:	2301      	movs	r3, #1
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	f7ff ff47 	bl	8006c3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d8eb      	bhi.n	8006d92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d01b      	beq.n	8006e14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ffad 	bl	8006d3c <sync_window>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d113      	bne.n	8006e14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	7858      	ldrb	r0, [r3, #1]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006df6:	2301      	movs	r3, #1
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	f7ff feff 	bl	8006bfc <disk_read>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b087      	sub	sp, #28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d031      	beq.n	8006e98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e002      	b.n	8006e42 <get_ldnumber+0x24>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d903      	bls.n	8006e52 <get_ldnumber+0x34>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b3a      	cmp	r3, #58	; 0x3a
 8006e50:	d1f4      	bne.n	8006e3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b3a      	cmp	r3, #58	; 0x3a
 8006e58:	d11c      	bne.n	8006e94 <get_ldnumber+0x76>
			tp = *path;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	60fa      	str	r2, [r7, #12]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	3b30      	subs	r3, #48	; 0x30
 8006e6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b09      	cmp	r3, #9
 8006e70:	d80e      	bhi.n	8006e90 <get_ldnumber+0x72>
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d10a      	bne.n	8006e90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d107      	bne.n	8006e90 <get_ldnumber+0x72>
					vol = (int)i;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	3301      	adds	r3, #1
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	e002      	b.n	8006e9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e98:	693b      	ldr	r3, [r7, #16]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	70da      	strb	r2, [r3, #3]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff ff7e 	bl	8006dc4 <move_window>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <check_fs+0x2a>
 8006ece:	2304      	movs	r3, #4
 8006ed0:	e038      	b.n	8006f44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3330      	adds	r3, #48	; 0x30
 8006ed6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff fece 	bl	8006c7c <ld_word>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d001      	beq.n	8006ef0 <check_fs+0x48>
 8006eec:	2303      	movs	r3, #3
 8006eee:	e029      	b.n	8006f44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ef6:	2be9      	cmp	r3, #233	; 0xe9
 8006ef8:	d009      	beq.n	8006f0e <check_fs+0x66>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f00:	2beb      	cmp	r3, #235	; 0xeb
 8006f02:	d11e      	bne.n	8006f42 <check_fs+0x9a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f0a:	2b90      	cmp	r3, #144	; 0x90
 8006f0c:	d119      	bne.n	8006f42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3330      	adds	r3, #48	; 0x30
 8006f12:	3336      	adds	r3, #54	; 0x36
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fec9 	bl	8006cac <ld_dword>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <check_fs+0xa4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d101      	bne.n	8006f2a <check_fs+0x82>
 8006f26:	2300      	movs	r3, #0
 8006f28:	e00c      	b.n	8006f44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3330      	adds	r3, #48	; 0x30
 8006f2e:	3352      	adds	r3, #82	; 0x52
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff febb 	bl	8006cac <ld_dword>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4a05      	ldr	r2, [pc, #20]	; (8006f50 <check_fs+0xa8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d101      	bne.n	8006f42 <check_fs+0x9a>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e000      	b.n	8006f44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f42:	2302      	movs	r3, #2
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	00544146 	.word	0x00544146
 8006f50:	33544146 	.word	0x33544146

08006f54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b096      	sub	sp, #88	; 0x58
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff ff58 	bl	8006e1e <get_ldnumber>
 8006f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da01      	bge.n	8006f7a <find_volume+0x26>
 8006f76:	230b      	movs	r3, #11
 8006f78:	e22d      	b.n	80073d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f7a:	4aa1      	ldr	r2, [pc, #644]	; (8007200 <find_volume+0x2ac>)
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <find_volume+0x3a>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	e223      	b.n	80073d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fde7 	bl	8006b7c <disk_status>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10c      	bne.n	8006fda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <find_volume+0x82>
 8006fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	e1ff      	b.n	80073d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e1fd      	b.n	80073d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fddf 	bl	8006bb0 <disk_initialize>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007004:	2303      	movs	r3, #3
 8007006:	e1e6      	b.n	80073d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <find_volume+0xca>
 800700e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800701a:	230a      	movs	r3, #10
 800701c:	e1db      	b.n	80073d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007022:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007026:	f7ff ff3f 	bl	8006ea8 <check_fs>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007034:	2b02      	cmp	r3, #2
 8007036:	d149      	bne.n	80070cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007038:	2300      	movs	r3, #0
 800703a:	643b      	str	r3, [r7, #64]	; 0x40
 800703c:	e01e      	b.n	800707c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800704c:	4413      	add	r3, r2
 800704e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	3304      	adds	r3, #4
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d006      	beq.n	8007068 <find_volume+0x114>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	3308      	adds	r3, #8
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff fe24 	bl	8006cac <ld_dword>
 8007064:	4602      	mov	r2, r0
 8007066:	e000      	b.n	800706a <find_volume+0x116>
 8007068:	2200      	movs	r2, #0
 800706a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	3358      	adds	r3, #88	; 0x58
 8007070:	443b      	add	r3, r7
 8007072:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007078:	3301      	adds	r3, #1
 800707a:	643b      	str	r3, [r7, #64]	; 0x40
 800707c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707e:	2b03      	cmp	r3, #3
 8007080:	d9dd      	bls.n	800703e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007082:	2300      	movs	r3, #0
 8007084:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <find_volume+0x13e>
 800708c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708e:	3b01      	subs	r3, #1
 8007090:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	3358      	adds	r3, #88	; 0x58
 8007098:	443b      	add	r3, r7
 800709a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800709e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <find_volume+0x15e>
 80070a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070aa:	f7ff fefd 	bl	8006ea8 <check_fs>
 80070ae:	4603      	mov	r3, r0
 80070b0:	e000      	b.n	80070b4 <find_volume+0x160>
 80070b2:	2303      	movs	r3, #3
 80070b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80070b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d905      	bls.n	80070cc <find_volume+0x178>
 80070c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c2:	3301      	adds	r3, #1
 80070c4:	643b      	str	r3, [r7, #64]	; 0x40
 80070c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d9e2      	bls.n	8007092 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d101      	bne.n	80070d8 <find_volume+0x184>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e17e      	b.n	80073d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d901      	bls.n	80070e4 <find_volume+0x190>
 80070e0:	230d      	movs	r3, #13
 80070e2:	e178      	b.n	80073d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	3330      	adds	r3, #48	; 0x30
 80070e8:	330b      	adds	r3, #11
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fdc6 	bl	8006c7c <ld_word>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f6:	d001      	beq.n	80070fc <find_volume+0x1a8>
 80070f8:	230d      	movs	r3, #13
 80070fa:	e16c      	b.n	80073d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	3330      	adds	r3, #48	; 0x30
 8007100:	3316      	adds	r3, #22
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fdba 	bl	8006c7c <ld_word>
 8007108:	4603      	mov	r3, r0
 800710a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800710c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <find_volume+0x1cc>
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	3330      	adds	r3, #48	; 0x30
 8007116:	3324      	adds	r3, #36	; 0x24
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fdc7 	bl	8006cac <ld_dword>
 800711e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007124:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	789b      	ldrb	r3, [r3, #2]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d005      	beq.n	8007144 <find_volume+0x1f0>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	789b      	ldrb	r3, [r3, #2]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d001      	beq.n	8007144 <find_volume+0x1f0>
 8007140:	230d      	movs	r3, #13
 8007142:	e148      	b.n	80073d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	789b      	ldrb	r3, [r3, #2]
 8007148:	461a      	mov	r2, r3
 800714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b29a      	uxth	r2, r3
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	895b      	ldrh	r3, [r3, #10]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <find_volume+0x224>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	895b      	ldrh	r3, [r3, #10]
 800716a:	461a      	mov	r2, r3
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	895b      	ldrh	r3, [r3, #10]
 8007170:	3b01      	subs	r3, #1
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <find_volume+0x228>
 8007178:	230d      	movs	r3, #13
 800717a:	e12c      	b.n	80073d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	3330      	adds	r3, #48	; 0x30
 8007180:	3311      	adds	r3, #17
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fd7a 	bl	8006c7c <ld_word>
 8007188:	4603      	mov	r3, r0
 800718a:	461a      	mov	r2, r3
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	891b      	ldrh	r3, [r3, #8]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <find_volume+0x24e>
 800719e:	230d      	movs	r3, #13
 80071a0:	e119      	b.n	80073d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	3330      	adds	r3, #48	; 0x30
 80071a6:	3313      	adds	r3, #19
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fd67 	bl	8006c7c <ld_word>
 80071ae:	4603      	mov	r3, r0
 80071b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <find_volume+0x272>
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	3330      	adds	r3, #48	; 0x30
 80071bc:	3320      	adds	r3, #32
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fd74 	bl	8006cac <ld_dword>
 80071c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	3330      	adds	r3, #48	; 0x30
 80071ca:	330e      	adds	r3, #14
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fd55 	bl	8006c7c <ld_word>
 80071d2:	4603      	mov	r3, r0
 80071d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <find_volume+0x28c>
 80071dc:	230d      	movs	r3, #13
 80071de:	e0fa      	b.n	80073d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e4:	4413      	add	r3, r2
 80071e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e8:	8912      	ldrh	r2, [r2, #8]
 80071ea:	0912      	lsrs	r2, r2, #4
 80071ec:	b292      	uxth	r2, r2
 80071ee:	4413      	add	r3, r2
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d204      	bcs.n	8007204 <find_volume+0x2b0>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e0eb      	b.n	80073d6 <find_volume+0x482>
 80071fe:	bf00      	nop
 8007200:	20000998 	.word	0x20000998
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800720c:	8952      	ldrh	r2, [r2, #10]
 800720e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <find_volume+0x2ca>
 800721a:	230d      	movs	r3, #13
 800721c:	e0db      	b.n	80073d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800721e:	2303      	movs	r3, #3
 8007220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800722a:	4293      	cmp	r3, r2
 800722c:	d802      	bhi.n	8007234 <find_volume+0x2e0>
 800722e:	2302      	movs	r3, #2
 8007230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	f640 72f5 	movw	r2, #4085	; 0xff5
 800723a:	4293      	cmp	r3, r2
 800723c:	d802      	bhi.n	8007244 <find_volume+0x2f0>
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	1c9a      	adds	r2, r3, #2
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007250:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007252:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007256:	441a      	add	r2, r3
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800725c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	441a      	add	r2, r3
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800726a:	2b03      	cmp	r3, #3
 800726c:	d11e      	bne.n	80072ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	3330      	adds	r3, #48	; 0x30
 8007272:	332a      	adds	r3, #42	; 0x2a
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fd01 	bl	8006c7c <ld_word>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <find_volume+0x330>
 8007280:	230d      	movs	r3, #13
 8007282:	e0a8      	b.n	80073d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	891b      	ldrh	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <find_volume+0x33c>
 800728c:	230d      	movs	r3, #13
 800728e:	e0a2      	b.n	80073d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	3330      	adds	r3, #48	; 0x30
 8007294:	332c      	adds	r3, #44	; 0x2c
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff fd08 	bl	8006cac <ld_dword>
 800729c:	4602      	mov	r2, r0
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	647b      	str	r3, [r7, #68]	; 0x44
 80072aa:	e01f      	b.n	80072ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	891b      	ldrh	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <find_volume+0x364>
 80072b4:	230d      	movs	r3, #13
 80072b6:	e08e      	b.n	80073d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	6a1a      	ldr	r2, [r3, #32]
 80072bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072be:	441a      	add	r2, r3
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d103      	bne.n	80072d4 <find_volume+0x380>
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	e00a      	b.n	80072ea <find_volume+0x396>
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	4613      	mov	r3, r2
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	4413      	add	r3, r2
 80072de:	085a      	lsrs	r2, r3, #1
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072ea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80072f6:	0a5b      	lsrs	r3, r3, #9
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d201      	bcs.n	8007300 <find_volume+0x3ac>
 80072fc:	230d      	movs	r3, #13
 80072fe:	e06a      	b.n	80073d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	f04f 32ff 	mov.w	r2, #4294967295
 8007306:	611a      	str	r2, [r3, #16]
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	2280      	movs	r2, #128	; 0x80
 8007314:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007316:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800731a:	2b03      	cmp	r3, #3
 800731c:	d149      	bne.n	80073b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	3330      	adds	r3, #48	; 0x30
 8007322:	3330      	adds	r3, #48	; 0x30
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fca9 	bl	8006c7c <ld_word>
 800732a:	4603      	mov	r3, r0
 800732c:	2b01      	cmp	r3, #1
 800732e:	d140      	bne.n	80073b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007332:	3301      	adds	r3, #1
 8007334:	4619      	mov	r1, r3
 8007336:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007338:	f7ff fd44 	bl	8006dc4 <move_window>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d137      	bne.n	80073b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	2200      	movs	r2, #0
 8007346:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	3330      	adds	r3, #48	; 0x30
 800734c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff fc93 	bl	8006c7c <ld_word>
 8007356:	4603      	mov	r3, r0
 8007358:	461a      	mov	r2, r3
 800735a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800735e:	429a      	cmp	r2, r3
 8007360:	d127      	bne.n	80073b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	3330      	adds	r3, #48	; 0x30
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fca0 	bl	8006cac <ld_dword>
 800736c:	4603      	mov	r3, r0
 800736e:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <find_volume+0x48c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d11e      	bne.n	80073b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	3330      	adds	r3, #48	; 0x30
 8007378:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fc95 	bl	8006cac <ld_dword>
 8007382:	4603      	mov	r3, r0
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <find_volume+0x490>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d113      	bne.n	80073b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	3330      	adds	r3, #48	; 0x30
 800738e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fc8a 	bl	8006cac <ld_dword>
 8007398:	4602      	mov	r2, r0
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	3330      	adds	r3, #48	; 0x30
 80073a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fc80 	bl	8006cac <ld_dword>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073ba:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <find_volume+0x494>)
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	3301      	adds	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <find_volume+0x494>)
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <find_volume+0x494>)
 80073c8:	881a      	ldrh	r2, [r3, #0]
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073d0:	f7ff fc90 	bl	8006cf4 <clear_lock>
#endif
	return FR_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3758      	adds	r7, #88	; 0x58
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	41615252 	.word	0x41615252
 80073e4:	61417272 	.word	0x61417272
 80073e8:	2000099c 	.word	0x2000099c

080073ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80073fe:	f107 0310 	add.w	r3, r7, #16
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fd0b 	bl	8006e1e <get_ldnumber>
 8007408:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	2b00      	cmp	r3, #0
 800740e:	da01      	bge.n	8007414 <f_mount+0x28>
 8007410:	230b      	movs	r3, #11
 8007412:	e02b      	b.n	800746c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007414:	4a17      	ldr	r2, [pc, #92]	; (8007474 <f_mount+0x88>)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800741c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007424:	69b8      	ldr	r0, [r7, #24]
 8007426:	f7ff fc65 	bl	8006cf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	490d      	ldr	r1, [pc, #52]	; (8007474 <f_mount+0x88>)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <f_mount+0x66>
 800744c:	79fb      	ldrb	r3, [r7, #7]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d001      	beq.n	8007456 <f_mount+0x6a>
 8007452:	2300      	movs	r3, #0
 8007454:	e00a      	b.n	800746c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007456:	f107 010c 	add.w	r1, r7, #12
 800745a:	f107 0308 	add.w	r3, r7, #8
 800745e:	2200      	movs	r2, #0
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fd77 	bl	8006f54 <find_volume>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800746a:	7dfb      	ldrb	r3, [r7, #23]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3720      	adds	r7, #32
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000998 	.word	0x20000998

08007478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800748e:	4b1f      	ldr	r3, [pc, #124]	; (800750c <FATFS_LinkDriverEx+0x94>)
 8007490:	7a5b      	ldrb	r3, [r3, #9]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d131      	bne.n	80074fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007498:	4b1c      	ldr	r3, [pc, #112]	; (800750c <FATFS_LinkDriverEx+0x94>)
 800749a:	7a5b      	ldrb	r3, [r3, #9]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	4b1a      	ldr	r3, [pc, #104]	; (800750c <FATFS_LinkDriverEx+0x94>)
 80074a2:	2100      	movs	r1, #0
 80074a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80074a6:	4b19      	ldr	r3, [pc, #100]	; (800750c <FATFS_LinkDriverEx+0x94>)
 80074a8:	7a5b      	ldrb	r3, [r3, #9]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4a17      	ldr	r2, [pc, #92]	; (800750c <FATFS_LinkDriverEx+0x94>)
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <FATFS_LinkDriverEx+0x94>)
 80074b8:	7a5b      	ldrb	r3, [r3, #9]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <FATFS_LinkDriverEx+0x94>)
 80074c0:	4413      	add	r3, r2
 80074c2:	79fa      	ldrb	r2, [r7, #7]
 80074c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80074c6:	4b11      	ldr	r3, [pc, #68]	; (800750c <FATFS_LinkDriverEx+0x94>)
 80074c8:	7a5b      	ldrb	r3, [r3, #9]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	b2d1      	uxtb	r1, r2
 80074d0:	4a0e      	ldr	r2, [pc, #56]	; (800750c <FATFS_LinkDriverEx+0x94>)
 80074d2:	7251      	strb	r1, [r2, #9]
 80074d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80074d6:	7dbb      	ldrb	r3, [r7, #22]
 80074d8:	3330      	adds	r3, #48	; 0x30
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	3301      	adds	r3, #1
 80074e4:	223a      	movs	r2, #58	; 0x3a
 80074e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	3302      	adds	r3, #2
 80074ec:	222f      	movs	r2, #47	; 0x2f
 80074ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	3303      	adds	r3, #3
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	200009c0 	.word	0x200009c0

08007510 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800751a:	2200      	movs	r2, #0
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff ffaa 	bl	8007478 <FATFS_LinkDriverEx>
 8007524:	4603      	mov	r3, r0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <__libc_init_array>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	4d0d      	ldr	r5, [pc, #52]	; (8007568 <__libc_init_array+0x38>)
 8007534:	4c0d      	ldr	r4, [pc, #52]	; (800756c <__libc_init_array+0x3c>)
 8007536:	1b64      	subs	r4, r4, r5
 8007538:	10a4      	asrs	r4, r4, #2
 800753a:	2600      	movs	r6, #0
 800753c:	42a6      	cmp	r6, r4
 800753e:	d109      	bne.n	8007554 <__libc_init_array+0x24>
 8007540:	4d0b      	ldr	r5, [pc, #44]	; (8007570 <__libc_init_array+0x40>)
 8007542:	4c0c      	ldr	r4, [pc, #48]	; (8007574 <__libc_init_array+0x44>)
 8007544:	f000 f820 	bl	8007588 <_init>
 8007548:	1b64      	subs	r4, r4, r5
 800754a:	10a4      	asrs	r4, r4, #2
 800754c:	2600      	movs	r6, #0
 800754e:	42a6      	cmp	r6, r4
 8007550:	d105      	bne.n	800755e <__libc_init_array+0x2e>
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	f855 3b04 	ldr.w	r3, [r5], #4
 8007558:	4798      	blx	r3
 800755a:	3601      	adds	r6, #1
 800755c:	e7ee      	b.n	800753c <__libc_init_array+0xc>
 800755e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007562:	4798      	blx	r3
 8007564:	3601      	adds	r6, #1
 8007566:	e7f2      	b.n	800754e <__libc_init_array+0x1e>
 8007568:	080079b8 	.word	0x080079b8
 800756c:	080079b8 	.word	0x080079b8
 8007570:	080079b8 	.word	0x080079b8
 8007574:	080079bc 	.word	0x080079bc

08007578 <memset>:
 8007578:	4402      	add	r2, r0
 800757a:	4603      	mov	r3, r0
 800757c:	4293      	cmp	r3, r2
 800757e:	d100      	bne.n	8007582 <memset+0xa>
 8007580:	4770      	bx	lr
 8007582:	f803 1b01 	strb.w	r1, [r3], #1
 8007586:	e7f9      	b.n	800757c <memset+0x4>

08007588 <_init>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr

08007594 <_fini>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr
