
SD_syetem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800bae8  0800bae8  0001bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c034  0800c034  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c03c  0800c03c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000285c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200028cc  200028cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015edf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000336c  00000000  00000000  00035f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  000392f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  0003a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ee9  00000000  00000000  0003b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001773c  00000000  00000000  0005f429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4aa  00000000  00000000  00076b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014300f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004eb4  00000000  00000000  00143060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bad0 	.word	0x0800bad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800bad0 	.word	0x0800bad0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <Ringbuf_init+0x3c>)
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <Ringbuf_init+0x40>)
 8000bb8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <Ringbuf_init+0x44>)
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <Ringbuf_init+0x48>)
 8000bbe:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <Ringbuf_init+0x4c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <Ringbuf_init+0x4c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0201 	orr.w	r2, r2, #1
 8000bce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <Ringbuf_init+0x4c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <Ringbuf_init+0x4c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f042 0220 	orr.w	r2, r2, #32
 8000bde:	60da      	str	r2, [r3, #12]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000011c 	.word	0x2000011c
 8000bf0:	2000008c 	.word	0x2000008c
 8000bf4:	20000120 	.word	0x20000120
 8000bf8:	200000d4 	.word	0x200000d4
 8000bfc:	200022e0 	.word	0x200022e0

08000c00 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	3301      	adds	r3, #1
 8000c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c16:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d007      	beq.n	8000c32 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	79f9      	ldrb	r1, [r7, #7]
 8000c2a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <Uart_read>:

int Uart_read(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <Uart_read+0x4c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <Uart_read+0x4c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d102      	bne.n	8000c5c <Uart_read+0x1c>
  {
    return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e010      	b.n	8000c7e <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <Uart_read+0x4c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <Uart_read+0x4c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	5cd3      	ldrb	r3, [r2, r3]
 8000c68:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <Uart_read+0x4c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <Uart_read+0x4c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000011c 	.word	0x2000011c

08000c90 <Uart_write>:

void Uart_write(int c)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (c>0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dd21      	ble.n	8000ce2 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <Uart_write+0x60>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000caa:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000cac:	bf00      	nop
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <Uart_write+0x60>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d0f9      	beq.n	8000cae <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <Uart_write+0x60>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <Uart_write+0x60>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	b2c9      	uxtb	r1, r1
 8000cc8:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <Uart_write+0x60>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <Uart_write+0x64>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <Uart_write+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ce0:	60da      	str	r2, [r3, #12]
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000120 	.word	0x20000120
 8000cf4:	200022e0 	.word	0x200022e0

08000cf8 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <IsDataAvailable+0x2c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <IsDataAvailable+0x2c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3340      	adds	r3, #64	; 0x40
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2000011c 	.word	0x2000011c

08000d28 <Uart_sendstring>:
	}
  else return -1;
}

void Uart_sendstring (const char *s)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000d30:	e006      	b.n	8000d40 <Uart_sendstring+0x18>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ffa8 	bl	8000c90 <Uart_write>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f4      	bne.n	8000d32 <Uart_sendstring+0xa>
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <Get_string>:

  while(*s) Uart_write(*s++);
}

void Get_string (char *buffer)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	int index=0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

	while (_rx_buffer->tail>_rx_buffer->head)
 8000d60:	e01e      	b.n	8000da0 <Get_string+0x4c>
	{
		if ((_rx_buffer->buffer[_rx_buffer->head-1] == '\n')||((_rx_buffer->head == 0) && (_rx_buffer->buffer[UART_BUFFER_SIZE-1] == '\n')))
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <Get_string+0xac>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <Get_string+0xac>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	2b0a      	cmp	r3, #10
 8000d72:	d00a      	beq.n	8000d8a <Get_string+0x36>
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <Get_string+0xac>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d110      	bne.n	8000da0 <Get_string+0x4c>
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <Get_string+0xac>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d10a      	bne.n	8000da0 <Get_string+0x4c>
			{
				buffer[index] = Uart_read();
 8000d8a:	f7ff ff59 	bl	8000c40 <Uart_read>
 8000d8e:	4601      	mov	r1, r0
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	b2ca      	uxtb	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
				index++;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
	while (_rx_buffer->tail>_rx_buffer->head)
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <Get_string+0xac>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <Get_string+0xac>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8d8      	bhi.n	8000d62 <Get_string+0xe>
			}
	}
	unsigned int start = _rx_buffer->tail;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <Get_string+0xac>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	60fb      	str	r3, [r7, #12]
	unsigned int end = (_rx_buffer->head);
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <Get_string+0xac>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	60bb      	str	r3, [r7, #8]
	if ((_rx_buffer->buffer[end-1] == '\n'))
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <Get_string+0xac>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	5cd3      	ldrb	r3, [r2, r3]
 8000dca:	2b0a      	cmp	r3, #10
 8000dcc:	d114      	bne.n	8000df8 <Get_string+0xa4>
	{

		for (unsigned int i=start; i<end; i++)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	e00d      	b.n	8000df0 <Get_string+0x9c>
		{
			buffer[index] = Uart_read();
 8000dd4:	f7ff ff34 	bl	8000c40 <Uart_read>
 8000dd8:	4601      	mov	r1, r0
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	b2ca      	uxtb	r2, r1
 8000de2:	701a      	strb	r2, [r3, #0]
			index++;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
		for (unsigned int i=start; i<end; i++)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	3301      	adds	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d3ed      	bcc.n	8000dd4 <Get_string+0x80>
		}
	}
}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000011c 	.word	0x2000011c

08000e04 <wait_until>:

int wait_until (char *string, char*buffertostore)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	while (!(IsDataAvailable()));
 8000e0e:	bf00      	nop
 8000e10:	f7ff ff72 	bl	8000cf8 <IsDataAvailable>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0fa      	beq.n	8000e10 <wait_until+0xc>
	int index=0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]

	while (_rx_buffer->tail>_rx_buffer->head)
 8000e1e:	e01e      	b.n	8000e5e <wait_until+0x5a>
	{
		if ((_rx_buffer->buffer[_rx_buffer->head-1] == '\n')||((_rx_buffer->head == 0) && (_rx_buffer->buffer[UART_BUFFER_SIZE-1] == '\n')))
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <wait_until+0xc0>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <wait_until+0xc0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	2b0a      	cmp	r3, #10
 8000e30:	d00a      	beq.n	8000e48 <wait_until+0x44>
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <wait_until+0xc0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d110      	bne.n	8000e5e <wait_until+0x5a>
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <wait_until+0xc0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000e44:	2b0a      	cmp	r3, #10
 8000e46:	d10a      	bne.n	8000e5e <wait_until+0x5a>
			{
				buffertostore[index] = Uart_read();
 8000e48:	f7ff fefa 	bl	8000c40 <Uart_read>
 8000e4c:	4601      	mov	r1, r0
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	b2ca      	uxtb	r2, r1
 8000e56:	701a      	strb	r2, [r3, #0]
				index++;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
	while (_rx_buffer->tail>_rx_buffer->head)
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <wait_until+0xc0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <wait_until+0xc0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d8d8      	bhi.n	8000e20 <wait_until+0x1c>
			}
	}

	unsigned int start = _rx_buffer->tail;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <wait_until+0xc0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e74:	60fb      	str	r3, [r7, #12]
	unsigned int end = (_rx_buffer->head);
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <wait_until+0xc0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	60bb      	str	r3, [r7, #8]
	if ((_rx_buffer->buffer[end-1] == '\n'))
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <wait_until+0xc0>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	5cd3      	ldrb	r3, [r2, r3]
 8000e88:	2b0a      	cmp	r3, #10
 8000e8a:	d116      	bne.n	8000eba <wait_until+0xb6>
	{
		for (unsigned int i=start; i<end; i++)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e00d      	b.n	8000eae <wait_until+0xaa>
		{
			buffertostore[index] = Uart_read();
 8000e92:	f7ff fed5 	bl	8000c40 <Uart_read>
 8000e96:	4601      	mov	r1, r0
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
			index++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
		for (unsigned int i=start; i<end; i++)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3ed      	bcc.n	8000e92 <wait_until+0x8e>
		}
		return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <wait_until+0xb8>
	}
	return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000011c 	.word	0x2000011c

08000ec8 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d013      	beq.n	8000f12 <Uart_isr+0x4a>
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00e      	beq.n	8000f12 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <Uart_isr+0xac>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe78 	bl	8000c00 <store_char>
        return;
 8000f10:	e02c      	b.n	8000f6c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d027      	beq.n	8000f6c <Uart_isr+0xa4>
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d022      	beq.n	8000f6c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <Uart_isr+0xb0>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <Uart_isr+0xb0>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d108      	bne.n	8000f44 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f40:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000f42:	e012      	b.n	8000f6a <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <Uart_isr+0xb0>)
 8000f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <Uart_isr+0xb0>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <Uart_isr+0xb0>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	3301      	adds	r3, #1
 8000f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <Uart_isr+0xb0>)
 8000f5a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	7bba      	ldrb	r2, [r7, #14]
 8000f68:	605a      	str	r2, [r3, #4]
    	return;
 8000f6a:	bf00      	nop
    }
}
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000011c 	.word	0x2000011c
 8000f78:	200000d4 	.word	0x200000d4

08000f7c <bufsize>:
char path[PATH_SIZE];  // buffer to store path

int i=0;

int bufsize (char *buf)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	int i=0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000f88:	e002      	b.n	8000f90 <bufsize+0x14>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f6      	bne.n	8000f8a <bufsize+0xe>
	return i;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <clear_buffer>:

void clear_buffer (void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	e007      	b.n	8000fc8 <clear_buffer+0x1c>
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <clear_buffer+0x30>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b7f      	cmp	r3, #127	; 0x7f
 8000fcc:	ddf4      	ble.n	8000fb8 <clear_buffer+0xc>
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	200021bc 	.word	0x200021bc

08000fe0 <clear_path>:

void clear_path (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
	for (int i=0; i<PATH_SIZE; i++) path[i] = '\0';
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e007      	b.n	8000ffc <clear_path+0x1c>
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <clear_path+0x30>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b1f      	cmp	r3, #31
 8001000:	ddf4      	ble.n	8000fec <clear_path+0xc>
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	2000223c 	.word	0x2000223c

08001014 <send_uart>:

void send_uart (char *string)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
//	uint8_t len = strlen ((const char *) string);
//	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
	Uart_sendstring(string);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fe83 	bl	8000d28 <Uart_sendstring>
	clear_buffer();
 8001022:	f7ff ffc3 	bl	8000fac <clear_buffer>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <cmdlength>:

int cmdlength (char *str)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	int i=0;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
	while (*str++ != ' ') i++;
 800103a:	e002      	b.n	8001042 <cmdlength+0x14>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3301      	adds	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b20      	cmp	r3, #32
 800104c:	d1f6      	bne.n	800103c <cmdlength+0xe>
	return i;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <get_path>:
void get_path (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	int start = cmdlength(buffer)+1;
 8001062:	4816      	ldr	r0, [pc, #88]	; (80010bc <get_path+0x60>)
 8001064:	f7ff ffe3 	bl	800102e <cmdlength>
 8001068:	4603      	mov	r3, r0
 800106a:	3301      	adds	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
	int end = bufsize(buffer)-2;
 800106e:	4813      	ldr	r0, [pc, #76]	; (80010bc <get_path+0x60>)
 8001070:	f7ff ff84 	bl	8000f7c <bufsize>
 8001074:	4603      	mov	r3, r0
 8001076:	3b02      	subs	r3, #2
 8001078:	603b      	str	r3, [r7, #0]

	int j=0;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
	for (int i=start; i<end; i++)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	e011      	b.n	80010a8 <get_path+0x4c>
	{
		if (buffer[i] != ' ') path[j++] = buffer[i];
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <get_path+0x60>)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b20      	cmp	r3, #32
 800108e:	d010      	beq.n	80010b2 <get_path+0x56>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	60fa      	str	r2, [r7, #12]
 8001096:	4909      	ldr	r1, [pc, #36]	; (80010bc <get_path+0x60>)
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	440a      	add	r2, r1
 800109c:	7811      	ldrb	r1, [r2, #0]
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <get_path+0x64>)
 80010a0:	54d1      	strb	r1, [r2, r3]
	for (int i=start; i<end; i++)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbe9      	blt.n	8001084 <get_path+0x28>
		else break;
	}
}
 80010b0:	e000      	b.n	80010b4 <get_path+0x58>
		else break;
 80010b2:	bf00      	nop
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200021bc 	.word	0x200021bc
 80010c0:	2000223c 	.word	0x2000223c

080010c4 <mount_sd>:

void mount_sd (void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	490a      	ldr	r1, [pc, #40]	; (80010f4 <mount_sd+0x30>)
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <mount_sd+0x34>)
 80010ce:	f008 fec5 	bl	8009e5c <f_mount>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <mount_sd+0x38>)
 80010d8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <mount_sd+0x38>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <mount_sd+0x26>
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <mount_sd+0x3c>)
 80010e4:	f7ff ff96 	bl	8001014 <send_uart>
	else send_uart("SD CARD mounted successfully...\n");
}
 80010e8:	e002      	b.n	80010f0 <mount_sd+0x2c>
	else send_uart("SD CARD mounted successfully...\n");
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <mount_sd+0x40>)
 80010ec:	f7ff ff92 	bl	8001014 <send_uart>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	0800bae8 	.word	0x0800bae8
 80010f8:	20000124 	.word	0x20000124
 80010fc:	200021a0 	.word	0x200021a0
 8001100:	0800baec 	.word	0x0800baec
 8001104:	0800bb0c 	.word	0x0800bb0c

08001108 <scan_files>:
	else send_uart("error!!! in UNMOUNTING SD CARD\n");
}

/* Start node to be scanned (***also used as work area***) */
FRESULT scan_files (char* pat)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;

    char path[20];
    sprintf (path, "%s",pat);
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	493b      	ldr	r1, [pc, #236]	; (8001204 <scan_files+0xfc>)
 8001118:	4618      	mov	r0, r3
 800111a:	f00a f857 	bl	800b1cc <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800111e:	f107 0208 	add.w	r2, r7, #8
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f009 fc44 	bl	800a9b6 <f_opendir>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <scan_files+0x100>)
 8001134:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <scan_files+0x100>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d15c      	bne.n	80011f8 <scan_files+0xf0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4932      	ldr	r1, [pc, #200]	; (800120c <scan_files+0x104>)
 8001144:	4618      	mov	r0, r3
 8001146:	f009 fccf 	bl	800aae8 <f_readdir>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <scan_files+0x100>)
 8001150:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <scan_files+0x100>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d149      	bne.n	80011ee <scan_files+0xe6>
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <scan_files+0x104>)
 800115c:	7a5b      	ldrb	r3, [r3, #9]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d045      	beq.n	80011ee <scan_files+0xe6>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <scan_files+0x104>)
 8001164:	7a1b      	ldrb	r3, [r3, #8]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	2b00      	cmp	r3, #0
 800116c:	d031      	beq.n	80011d2 <scan_files+0xca>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800116e:	4928      	ldr	r1, [pc, #160]	; (8001210 <scan_files+0x108>)
 8001170:	4828      	ldr	r0, [pc, #160]	; (8001214 <scan_files+0x10c>)
 8001172:	f7ff f82d 	bl	80001d0 <strcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d035      	beq.n	80011e8 <scan_files+0xe0>
            	sprintf (buffer, "Dir: %s\r\n", fno.fname);
 800117c:	4a24      	ldr	r2, [pc, #144]	; (8001210 <scan_files+0x108>)
 800117e:	4926      	ldr	r1, [pc, #152]	; (8001218 <scan_files+0x110>)
 8001180:	4826      	ldr	r0, [pc, #152]	; (800121c <scan_files+0x114>)
 8001182:	f00a f823 	bl	800b1cc <siprintf>
            	send_uart(buffer);
 8001186:	4825      	ldr	r0, [pc, #148]	; (800121c <scan_files+0x114>)
 8001188:	f7ff ff44 	bl	8001014 <send_uart>
                i = strlen(path);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f827 	bl	80001e4 <strlen>
 8001196:	64f8      	str	r0, [r7, #76]	; 0x4c
                sprintf(&path[i], "/%s", fno.fname);
 8001198:	f107 0208 	add.w	r2, r7, #8
 800119c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800119e:	4413      	add	r3, r2
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <scan_files+0x108>)
 80011a2:	491f      	ldr	r1, [pc, #124]	; (8001220 <scan_files+0x118>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00a f811 	bl	800b1cc <siprintf>
                fresult = scan_files(path);                     /* Enter the directory */
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffaa 	bl	8001108 <scan_files>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <scan_files+0x100>)
 80011ba:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <scan_files+0x100>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d113      	bne.n	80011ec <scan_files+0xe4>
                path[i] = 0;
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ca:	4413      	add	r3, r2
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e7b5      	b.n	800113e <scan_files+0x36>
            }
            else
            {                                       /* It is a file. */
               sprintf(buffer,"File: %s/%s\n", path, fno.fname);
 80011d2:	f107 0208 	add.w	r2, r7, #8
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <scan_files+0x108>)
 80011d8:	4912      	ldr	r1, [pc, #72]	; (8001224 <scan_files+0x11c>)
 80011da:	4810      	ldr	r0, [pc, #64]	; (800121c <scan_files+0x114>)
 80011dc:	f009 fff6 	bl	800b1cc <siprintf>
               send_uart(buffer);
 80011e0:	480e      	ldr	r0, [pc, #56]	; (800121c <scan_files+0x114>)
 80011e2:	f7ff ff17 	bl	8001014 <send_uart>
 80011e6:	e7aa      	b.n	800113e <scan_files+0x36>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80011e8:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80011ea:	e7a8      	b.n	800113e <scan_files+0x36>
                if (fresult != FR_OK) break;
 80011ec:	bf00      	nop
            }
        }
        f_closedir(&dir);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4618      	mov	r0, r3
 80011f4:	f009 fc52 	bl	800aa9c <f_closedir>
    }
    return fresult;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <scan_files+0x100>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3750      	adds	r7, #80	; 0x50
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800bb74 	.word	0x0800bb74
 8001208:	200021a0 	.word	0x200021a0
 800120c:	20002188 	.word	0x20002188
 8001210:	20002191 	.word	0x20002191
 8001214:	0800bb78 	.word	0x0800bb78
 8001218:	0800bb84 	.word	0x0800bb84
 800121c:	200021bc 	.word	0x200021bc
 8001220:	0800bb90 	.word	0x0800bb90
 8001224:	0800bb94 	.word	0x0800bb94

08001228 <write_file>:




void write_file (char *name)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001230:	4940      	ldr	r1, [pc, #256]	; (8001334 <write_file+0x10c>)
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f009 fc95 	bl	800ab62 <f_stat>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <write_file+0x110>)
 800123e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001240:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <write_file+0x110>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <write_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	493c      	ldr	r1, [pc, #240]	; (800133c <write_file+0x114>)
 800124c:	483c      	ldr	r0, [pc, #240]	; (8001340 <write_file+0x118>)
 800124e:	f009 ffbd 	bl	800b1cc <siprintf>
		send_uart (buffer);
 8001252:	483b      	ldr	r0, [pc, #236]	; (8001340 <write_file+0x118>)
 8001254:	f7ff fede 	bl	8001014 <send_uart>
	    {
	    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
	    	send_uart(buffer);
	    }
	}
}
 8001258:	e068      	b.n	800132c <write_file+0x104>
	    fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 800125a:	2202      	movs	r2, #2
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4839      	ldr	r0, [pc, #228]	; (8001344 <write_file+0x11c>)
 8001260:	f008 fe42 	bl	8009ee8 <f_open>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b33      	ldr	r3, [pc, #204]	; (8001338 <write_file+0x110>)
 800126a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <write_file+0x110>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <write_file+0x64>
	    	sprintf (buffer, "error no %d in opening file *%s*\n", fresult, name);
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <write_file+0x110>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4932      	ldr	r1, [pc, #200]	; (8001348 <write_file+0x120>)
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <write_file+0x118>)
 8001280:	f009 ffa4 	bl	800b1cc <siprintf>
	    	send_uart(buffer);
 8001284:	482e      	ldr	r0, [pc, #184]	; (8001340 <write_file+0x118>)
 8001286:	f7ff fec5 	bl	8001014 <send_uart>
 800128a:	e007      	b.n	800129c <write_file+0x74>
	    	sprintf (buffer, "file *%s* is opened. Now enter the string you want to write\n", name);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	492f      	ldr	r1, [pc, #188]	; (800134c <write_file+0x124>)
 8001290:	482b      	ldr	r0, [pc, #172]	; (8001340 <write_file+0x118>)
 8001292:	f009 ff9b 	bl	800b1cc <siprintf>
	    	send_uart (buffer);
 8001296:	482a      	ldr	r0, [pc, #168]	; (8001340 <write_file+0x118>)
 8001298:	f7ff febc 	bl	8001014 <send_uart>
	    while (!(wait_until("\r\n", buffer)));
 800129c:	bf00      	nop
 800129e:	4928      	ldr	r1, [pc, #160]	; (8001340 <write_file+0x118>)
 80012a0:	482b      	ldr	r0, [pc, #172]	; (8001350 <write_file+0x128>)
 80012a2:	f7ff fdaf 	bl	8000e04 <wait_until>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f8      	beq.n	800129e <write_file+0x76>
	    fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80012ac:	4824      	ldr	r0, [pc, #144]	; (8001340 <write_file+0x118>)
 80012ae:	f7ff fe65 	bl	8000f7c <bufsize>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <write_file+0x12c>)
 80012b8:	4921      	ldr	r1, [pc, #132]	; (8001340 <write_file+0x118>)
 80012ba:	4822      	ldr	r0, [pc, #136]	; (8001344 <write_file+0x11c>)
 80012bc:	f009 f93f 	bl	800a53e <f_write>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <write_file+0x110>)
 80012c6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <write_file+0x110>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00d      	beq.n	80012ec <write_file+0xc4>
	    	clear_buffer();
 80012d0:	f7ff fe6c 	bl	8000fac <clear_buffer>
	    	sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <write_file+0x110>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	491e      	ldr	r1, [pc, #120]	; (8001358 <write_file+0x130>)
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <write_file+0x118>)
 80012e0:	f009 ff74 	bl	800b1cc <siprintf>
	    	send_uart(buffer);
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <write_file+0x118>)
 80012e6:	f7ff fe95 	bl	8001014 <send_uart>
 80012ea:	e009      	b.n	8001300 <write_file+0xd8>
	    	clear_buffer();
 80012ec:	f7ff fe5e 	bl	8000fac <clear_buffer>
	    	sprintf (buffer, "*%s* written successfully\n", name);
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	491a      	ldr	r1, [pc, #104]	; (800135c <write_file+0x134>)
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <write_file+0x118>)
 80012f6:	f009 ff69 	bl	800b1cc <siprintf>
	    	send_uart(buffer);
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <write_file+0x118>)
 80012fc:	f7ff fe8a 	bl	8001014 <send_uart>
	    fresult = f_close(&fil);
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <write_file+0x11c>)
 8001302:	f009 fb2e 	bl	800a962 <f_close>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <write_file+0x110>)
 800130c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <write_file+0x110>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00a      	beq.n	800132c <write_file+0x104>
	    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <write_file+0x110>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4910      	ldr	r1, [pc, #64]	; (8001360 <write_file+0x138>)
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <write_file+0x118>)
 8001322:	f009 ff53 	bl	800b1cc <siprintf>
	    	send_uart(buffer);
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <write_file+0x118>)
 8001328:	f7ff fe74 	bl	8001014 <send_uart>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20002188 	.word	0x20002188
 8001338:	200021a0 	.word	0x200021a0
 800133c:	0800bba4 	.word	0x0800bba4
 8001340:	200021bc 	.word	0x200021bc
 8001344:	20001158 	.word	0x20001158
 8001348:	0800bbbc 	.word	0x0800bbbc
 800134c:	0800bbe0 	.word	0x0800bbe0
 8001350:	0800bc20 	.word	0x0800bc20
 8001354:	200021a8 	.word	0x200021a8
 8001358:	0800bc24 	.word	0x0800bc24
 800135c:	0800bc48 	.word	0x0800bc48
 8001360:	0800bc64 	.word	0x0800bc64

08001364 <read_file>:

void read_file (char *name)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800136c:	4937      	ldr	r1, [pc, #220]	; (800144c <read_file+0xe8>)
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f009 fbf7 	bl	800ab62 <f_stat>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <read_file+0xec>)
 800137a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <read_file+0xec>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <read_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4933      	ldr	r1, [pc, #204]	; (8001454 <read_file+0xf0>)
 8001388:	4833      	ldr	r0, [pc, #204]	; (8001458 <read_file+0xf4>)
 800138a:	f009 ff1f 	bl	800b1cc <siprintf>
		send_uart (buffer);
 800138e:	4832      	ldr	r0, [pc, #200]	; (8001458 <read_file+0xf4>)
 8001390:	f7ff fe40 	bl	8001014 <send_uart>
		{
		   	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
		   	send_uart(buffer);
		}
	}
}
 8001394:	e055      	b.n	8001442 <read_file+0xde>
		fresult = f_open(&fil, name, FA_READ);
 8001396:	2201      	movs	r2, #1
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4830      	ldr	r0, [pc, #192]	; (800145c <read_file+0xf8>)
 800139c:	f008 fda4 	bl	8009ee8 <f_open>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <read_file+0xec>)
 80013a6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <read_file+0xec>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <read_file+0x62>
			sprintf (buffer, "error no %d in opening file *%s*\n", fresult, name);
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <read_file+0xec>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4929      	ldr	r1, [pc, #164]	; (8001460 <read_file+0xfc>)
 80013ba:	4827      	ldr	r0, [pc, #156]	; (8001458 <read_file+0xf4>)
 80013bc:	f009 ff06 	bl	800b1cc <siprintf>
		    	send_uart(buffer);
 80013c0:	4825      	ldr	r0, [pc, #148]	; (8001458 <read_file+0xf4>)
 80013c2:	f7ff fe27 	bl	8001014 <send_uart>
		sprintf (buffer, "reading data from the file *%s*\n", name);
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4926      	ldr	r1, [pc, #152]	; (8001464 <read_file+0x100>)
 80013ca:	4823      	ldr	r0, [pc, #140]	; (8001458 <read_file+0xf4>)
 80013cc:	f009 fefe 	bl	800b1cc <siprintf>
		send_uart (buffer);
 80013d0:	4821      	ldr	r0, [pc, #132]	; (8001458 <read_file+0xf4>)
 80013d2:	f7ff fe1f 	bl	8001014 <send_uart>
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <read_file+0xf8>)
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <read_file+0x104>)
 80013dc:	491e      	ldr	r1, [pc, #120]	; (8001458 <read_file+0xf4>)
 80013de:	481f      	ldr	r0, [pc, #124]	; (800145c <read_file+0xf8>)
 80013e0:	f008 ff4e 	bl	800a280 <f_read>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <read_file+0xec>)
 80013ea:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <read_file+0xec>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00d      	beq.n	8001410 <read_file+0xac>
		  	clear_buffer();
 80013f4:	f7ff fdda 	bl	8000fac <clear_buffer>
		 	sprintf (buffer, "error no %d in reading file *%s*\n", fresult, name);
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <read_file+0xec>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	491a      	ldr	r1, [pc, #104]	; (800146c <read_file+0x108>)
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <read_file+0xf4>)
 8001404:	f009 fee2 	bl	800b1cc <siprintf>
		  	send_uart(buffer);
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <read_file+0xf4>)
 800140a:	f7ff fe03 	bl	8001014 <send_uart>
 800140e:	e002      	b.n	8001416 <read_file+0xb2>
		else send_uart(buffer);
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <read_file+0xf4>)
 8001412:	f7ff fdff 	bl	8001014 <send_uart>
		fresult = f_close(&fil);
 8001416:	4811      	ldr	r0, [pc, #68]	; (800145c <read_file+0xf8>)
 8001418:	f009 faa3 	bl	800a962 <f_close>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <read_file+0xec>)
 8001422:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <read_file+0xec>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00a      	beq.n	8001442 <read_file+0xde>
		   	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <read_file+0xec>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	490e      	ldr	r1, [pc, #56]	; (8001470 <read_file+0x10c>)
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <read_file+0xf4>)
 8001438:	f009 fec8 	bl	800b1cc <siprintf>
		   	send_uart(buffer);
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <read_file+0xf4>)
 800143e:	f7ff fde9 	bl	8001014 <send_uart>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20002188 	.word	0x20002188
 8001450:	200021a0 	.word	0x200021a0
 8001454:	0800bba4 	.word	0x0800bba4
 8001458:	200021bc 	.word	0x200021bc
 800145c:	20001158 	.word	0x20001158
 8001460:	0800bbbc 	.word	0x0800bbbc
 8001464:	0800bc88 	.word	0x0800bc88
 8001468:	200021a4 	.word	0x200021a4
 800146c:	0800bcac 	.word	0x0800bcac
 8001470:	0800bc64 	.word	0x0800bc64

08001474 <remove_file>:
    }
	}
}

void remove_file (char *name)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800147c:	491a      	ldr	r1, [pc, #104]	; (80014e8 <remove_file+0x74>)
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f009 fb6f 	bl	800ab62 <f_stat>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <remove_file+0x78>)
 800148a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <remove_file+0x78>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <remove_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4916      	ldr	r1, [pc, #88]	; (80014f0 <remove_file+0x7c>)
 8001498:	4816      	ldr	r0, [pc, #88]	; (80014f4 <remove_file+0x80>)
 800149a:	f009 fe97 	bl	800b1cc <siprintf>
		send_uart (buffer);
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <remove_file+0x80>)
 80014a0:	f7ff fdb8 	bl	8001014 <send_uart>
		sprintf (buffer, "error in removing *%s*\n", name);
		send_uart (buffer);
	}
	}

}
 80014a4:	e01b      	b.n	80014de <remove_file+0x6a>
	fresult = f_unlink (name);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f009 fc49 	bl	800ad3e <f_unlink>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <remove_file+0x78>)
 80014b2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <remove_file+0x78>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d108      	bne.n	80014ce <remove_file+0x5a>
		sprintf (buffer, "*%s* has been removed successfully\n", name);
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	490e      	ldr	r1, [pc, #56]	; (80014f8 <remove_file+0x84>)
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <remove_file+0x80>)
 80014c2:	f009 fe83 	bl	800b1cc <siprintf>
		send_uart (buffer);
 80014c6:	480b      	ldr	r0, [pc, #44]	; (80014f4 <remove_file+0x80>)
 80014c8:	f7ff fda4 	bl	8001014 <send_uart>
}
 80014cc:	e007      	b.n	80014de <remove_file+0x6a>
		sprintf (buffer, "error in removing *%s*\n", name);
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	490a      	ldr	r1, [pc, #40]	; (80014fc <remove_file+0x88>)
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <remove_file+0x80>)
 80014d4:	f009 fe7a 	bl	800b1cc <siprintf>
		send_uart (buffer);
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <remove_file+0x80>)
 80014da:	f7ff fd9b 	bl	8001014 <send_uart>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20002188 	.word	0x20002188
 80014ec:	200021a0 	.word	0x200021a0
 80014f0:	0800bba4 	.word	0x0800bba4
 80014f4:	200021bc 	.word	0x200021bc
 80014f8:	0800bd2c 	.word	0x0800bd2c
 80014fc:	0800bd50 	.word	0x0800bd50

08001500 <create_dir>:

void create_dir (char *name)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f009 fcc3 	bl	800ae94 <f_mkdir>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <create_dir+0x4c>)
 8001514:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <create_dir+0x4c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <create_dir+0x30>
    {
    	sprintf (buffer, "*%s* has been created successfully\n", name);
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	490b      	ldr	r1, [pc, #44]	; (8001550 <create_dir+0x50>)
 8001522:	480c      	ldr	r0, [pc, #48]	; (8001554 <create_dir+0x54>)
 8001524:	f009 fe52 	bl	800b1cc <siprintf>
    	send_uart (buffer);
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <create_dir+0x54>)
 800152a:	f7ff fd73 	bl	8001014 <send_uart>
    else
    {
    	sprintf (buffer, "error no %d in creating directory\n", fresult);
    	send_uart(buffer);
    }
}
 800152e:	e009      	b.n	8001544 <create_dir+0x44>
    	sprintf (buffer, "error no %d in creating directory\n", fresult);
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <create_dir+0x4c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <create_dir+0x58>)
 8001538:	4806      	ldr	r0, [pc, #24]	; (8001554 <create_dir+0x54>)
 800153a:	f009 fe47 	bl	800b1cc <siprintf>
    	send_uart(buffer);
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <create_dir+0x54>)
 8001540:	f7ff fd68 	bl	8001014 <send_uart>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200021a0 	.word	0x200021a0
 8001550:	0800bd68 	.word	0x0800bd68
 8001554:	200021bc 	.word	0x200021bc
 8001558:	0800bd8c 	.word	0x0800bd8c

0800155c <check_sd>:

void check_sd (void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 8001560:	4a26      	ldr	r2, [pc, #152]	; (80015fc <check_sd+0xa0>)
 8001562:	4927      	ldr	r1, [pc, #156]	; (8001600 <check_sd+0xa4>)
 8001564:	4827      	ldr	r0, [pc, #156]	; (8001604 <check_sd+0xa8>)
 8001566:	f009 fb35 	bl	800abd4 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <check_sd+0xa0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	3b02      	subs	r3, #2
 8001572:	4a22      	ldr	r2, [pc, #136]	; (80015fc <check_sd+0xa0>)
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	8952      	ldrh	r2, [r2, #10]
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f8fb 	bl	8000778 <__aeabi_ui2d>
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <check_sd+0xac>)
 8001588:	f7fe fe8a 	bl	80002a0 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff f96a 	bl	800086c <__aeabi_d2uiz>
 8001598:	4603      	mov	r3, r0
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <check_sd+0xb0>)
 800159c:	6013      	str	r3, [r2, #0]
    sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <check_sd+0xb0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	491a      	ldr	r1, [pc, #104]	; (8001610 <check_sd+0xb4>)
 80015a6:	481b      	ldr	r0, [pc, #108]	; (8001614 <check_sd+0xb8>)
 80015a8:	f009 fe10 	bl	800b1cc <siprintf>
    send_uart(buffer);
 80015ac:	4819      	ldr	r0, [pc, #100]	; (8001614 <check_sd+0xb8>)
 80015ae:	f7ff fd31 	bl	8001014 <send_uart>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <check_sd+0xa0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	895b      	ldrh	r3, [r3, #10]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <check_sd+0xa4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f8d8 	bl	8000778 <__aeabi_ui2d>
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <check_sd+0xac>)
 80015ce:	f7fe fe67 	bl	80002a0 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff f947 	bl	800086c <__aeabi_d2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <check_sd+0xbc>)
 80015e2:	6013      	str	r3, [r2, #0]
    sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <check_sd+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	490c      	ldr	r1, [pc, #48]	; (800161c <check_sd+0xc0>)
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <check_sd+0xb8>)
 80015ee:	f009 fded 	bl	800b1cc <siprintf>
    send_uart(buffer);
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <check_sd+0xb8>)
 80015f4:	f7ff fd0e 	bl	8001014 <send_uart>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200021ac 	.word	0x200021ac
 8001600:	200021b0 	.word	0x200021b0
 8001604:	0800bdb0 	.word	0x0800bdb0
 8001608:	3fe00000 	.word	0x3fe00000
 800160c:	200021b4 	.word	0x200021b4
 8001610:	0800bdb4 	.word	0x0800bdb4
 8001614:	200021bc 	.word	0x200021bc
 8001618:	200021b8 	.word	0x200021b8
 800161c:	0800bdd0 	.word	0x0800bdd0

08001620 <check_file>:

void check_file (char *name)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
	  fresult = f_stat(name, &fno);
 8001628:	4948      	ldr	r1, [pc, #288]	; (800174c <check_file+0x12c>)
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f009 fa99 	bl	800ab62 <f_stat>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b46      	ldr	r3, [pc, #280]	; (8001750 <check_file+0x130>)
 8001636:	701a      	strb	r2, [r3, #0]
	  switch (fresult)
 8001638:	4b45      	ldr	r3, [pc, #276]	; (8001750 <check_file+0x130>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <check_file+0x26>
 8001640:	2b04      	cmp	r3, #4
 8001642:	d06b      	beq.n	800171c <check_file+0xfc>
 8001644:	e073      	b.n	800172e <check_file+0x10e>
	  {
	    case FR_OK:

	        sprintf(buffer,"Below are the details of the *%s* \nSize: %lu\n",name, fno.fsize);
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <check_file+0x12c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4941      	ldr	r1, [pc, #260]	; (8001754 <check_file+0x134>)
 800164e:	4842      	ldr	r0, [pc, #264]	; (8001758 <check_file+0x138>)
 8001650:	f009 fdbc 	bl	800b1cc <siprintf>
	        send_uart (buffer);
 8001654:	4840      	ldr	r0, [pc, #256]	; (8001758 <check_file+0x138>)
 8001656:	f7ff fcdd 	bl	8001014 <send_uart>
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
	               (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <check_file+0x12c>)
 800165c:	889b      	ldrh	r3, [r3, #4]
 800165e:	0a5b      	lsrs	r3, r3, #9
 8001660:	b29b      	uxth	r3, r3
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001662:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
	               (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <check_file+0x12c>)
 8001668:	889b      	ldrh	r3, [r3, #4]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	b29b      	uxth	r3, r3
 800166e:	f003 000f 	and.w	r0, r3, #15
	               (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8001672:	4b36      	ldr	r3, [pc, #216]	; (800174c <check_file+0x12c>)
 8001674:	889b      	ldrh	r3, [r3, #4]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001676:	f003 031f 	and.w	r3, r3, #31
	               fno.ftime >> 11, fno.ftime >> 5 & 63);
 800167a:	4a34      	ldr	r2, [pc, #208]	; (800174c <check_file+0x12c>)
 800167c:	88d2      	ldrh	r2, [r2, #6]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800167e:	0ad2      	lsrs	r2, r2, #11
 8001680:	b292      	uxth	r2, r2
 8001682:	4614      	mov	r4, r2
	               fno.ftime >> 11, fno.ftime >> 5 & 63);
 8001684:	4a31      	ldr	r2, [pc, #196]	; (800174c <check_file+0x12c>)
 8001686:	88d2      	ldrh	r2, [r2, #6]
	        sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001688:	0952      	lsrs	r2, r2, #5
 800168a:	b292      	uxth	r2, r2
 800168c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001690:	9202      	str	r2, [sp, #8]
 8001692:	9401      	str	r4, [sp, #4]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	4930      	ldr	r1, [pc, #192]	; (800175c <check_file+0x13c>)
 800169c:	482e      	ldr	r0, [pc, #184]	; (8001758 <check_file+0x138>)
 800169e:	f009 fd95 	bl	800b1cc <siprintf>
	        send_uart (buffer);
 80016a2:	482d      	ldr	r0, [pc, #180]	; (8001758 <check_file+0x138>)
 80016a4:	f7ff fcb6 	bl	8001014 <send_uart>
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
	               (fno.fattrib & AM_DIR) ? 'D' : '-',
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <check_file+0x12c>)
 80016aa:	7a1b      	ldrb	r3, [r3, #8]
 80016ac:	f003 0310 	and.w	r3, r3, #16
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <check_file+0x98>
 80016b4:	2044      	movs	r0, #68	; 0x44
 80016b6:	e000      	b.n	80016ba <check_file+0x9a>
 80016b8:	202d      	movs	r0, #45	; 0x2d
	               (fno.fattrib & AM_RDO) ? 'R' : '-',
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <check_file+0x12c>)
 80016bc:	7a1b      	ldrb	r3, [r3, #8]
 80016be:	f003 0301 	and.w	r3, r3, #1
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <check_file+0xaa>
 80016c6:	2452      	movs	r4, #82	; 0x52
 80016c8:	e000      	b.n	80016cc <check_file+0xac>
 80016ca:	242d      	movs	r4, #45	; 0x2d
	               (fno.fattrib & AM_HID) ? 'H' : '-',
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <check_file+0x12c>)
 80016ce:	7a1b      	ldrb	r3, [r3, #8]
 80016d0:	f003 0302 	and.w	r3, r3, #2
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <check_file+0xbc>
 80016d8:	2348      	movs	r3, #72	; 0x48
 80016da:	e000      	b.n	80016de <check_file+0xbe>
 80016dc:	232d      	movs	r3, #45	; 0x2d
	               (fno.fattrib & AM_SYS) ? 'S' : '-',
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <check_file+0x12c>)
 80016e0:	7a12      	ldrb	r2, [r2, #8]
 80016e2:	f002 0204 	and.w	r2, r2, #4
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d001      	beq.n	80016ee <check_file+0xce>
 80016ea:	2253      	movs	r2, #83	; 0x53
 80016ec:	e000      	b.n	80016f0 <check_file+0xd0>
 80016ee:	222d      	movs	r2, #45	; 0x2d
	               (fno.fattrib & AM_ARC) ? 'A' : '-');
 80016f0:	4916      	ldr	r1, [pc, #88]	; (800174c <check_file+0x12c>)
 80016f2:	7a09      	ldrb	r1, [r1, #8]
 80016f4:	f001 0120 	and.w	r1, r1, #32
	        sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 80016f8:	2900      	cmp	r1, #0
 80016fa:	d001      	beq.n	8001700 <check_file+0xe0>
 80016fc:	2141      	movs	r1, #65	; 0x41
 80016fe:	e000      	b.n	8001702 <check_file+0xe2>
 8001700:	212d      	movs	r1, #45	; 0x2d
 8001702:	9102      	str	r1, [sp, #8]
 8001704:	9201      	str	r2, [sp, #4]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4623      	mov	r3, r4
 800170a:	4602      	mov	r2, r0
 800170c:	4914      	ldr	r1, [pc, #80]	; (8001760 <check_file+0x140>)
 800170e:	4812      	ldr	r0, [pc, #72]	; (8001758 <check_file+0x138>)
 8001710:	f009 fd5c 	bl	800b1cc <siprintf>
	        send_uart (buffer);
 8001714:	4810      	ldr	r0, [pc, #64]	; (8001758 <check_file+0x138>)
 8001716:	f7ff fc7d 	bl	8001014 <send_uart>
	        break;
 800171a:	e013      	b.n	8001744 <check_file+0x124>

	    case FR_NO_FILE:
	        sprintf(buffer,"*%s* does not exist.\n", name);
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4911      	ldr	r1, [pc, #68]	; (8001764 <check_file+0x144>)
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <check_file+0x138>)
 8001722:	f009 fd53 	bl	800b1cc <siprintf>
	        send_uart (buffer);
 8001726:	480c      	ldr	r0, [pc, #48]	; (8001758 <check_file+0x138>)
 8001728:	f7ff fc74 	bl	8001014 <send_uart>
	        break;
 800172c:	e00a      	b.n	8001744 <check_file+0x124>

	    default:
	        sprintf(buffer,"An error occurred. (%d)\n", fresult);
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <check_file+0x130>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <check_file+0x148>)
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <check_file+0x138>)
 8001738:	f009 fd48 	bl	800b1cc <siprintf>
	        send_uart (buffer);
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <check_file+0x138>)
 800173e:	f7ff fc69 	bl	8001014 <send_uart>
	    }
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	20002188 	.word	0x20002188
 8001750:	200021a0 	.word	0x200021a0
 8001754:	0800bdec 	.word	0x0800bdec
 8001758:	200021bc 	.word	0x200021bc
 800175c:	0800be1c 	.word	0x0800be1c
 8001760:	0800be40 	.word	0x0800be40
 8001764:	0800be58 	.word	0x0800be58
 8001768:	0800be70 	.word	0x0800be70

0800176c <update_file>:

void update_file (char *name)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001774:	4940      	ldr	r1, [pc, #256]	; (8001878 <update_file+0x10c>)
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f009 f9f3 	bl	800ab62 <f_stat>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b3e      	ldr	r3, [pc, #248]	; (800187c <update_file+0x110>)
 8001782:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001784:	4b3d      	ldr	r3, [pc, #244]	; (800187c <update_file+0x110>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <update_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	493c      	ldr	r1, [pc, #240]	; (8001880 <update_file+0x114>)
 8001790:	483c      	ldr	r0, [pc, #240]	; (8001884 <update_file+0x118>)
 8001792:	f009 fd1b 	bl	800b1cc <siprintf>
		send_uart (buffer);
 8001796:	483b      	ldr	r0, [pc, #236]	; (8001884 <update_file+0x118>)
 8001798:	f7ff fc3c 	bl	8001014 <send_uart>
			    {
			    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
			    	send_uart(buffer);
			    }
		}
}
 800179c:	e068      	b.n	8001870 <update_file+0x104>
			    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800179e:	2232      	movs	r2, #50	; 0x32
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4839      	ldr	r0, [pc, #228]	; (8001888 <update_file+0x11c>)
 80017a4:	f008 fba0 	bl	8009ee8 <f_open>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <update_file+0x110>)
 80017ae:	701a      	strb	r2, [r3, #0]
			    if (fresult != FR_OK)
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <update_file+0x110>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00b      	beq.n	80017d0 <update_file+0x64>
			    	sprintf (buffer, "error no %d in opening file *%s*\n", fresult, name);
 80017b8:	4b30      	ldr	r3, [pc, #192]	; (800187c <update_file+0x110>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4932      	ldr	r1, [pc, #200]	; (800188c <update_file+0x120>)
 80017c2:	4830      	ldr	r0, [pc, #192]	; (8001884 <update_file+0x118>)
 80017c4:	f009 fd02 	bl	800b1cc <siprintf>
			    	send_uart(buffer);
 80017c8:	482e      	ldr	r0, [pc, #184]	; (8001884 <update_file+0x118>)
 80017ca:	f7ff fc23 	bl	8001014 <send_uart>
 80017ce:	e007      	b.n	80017e0 <update_file+0x74>
			    	sprintf (buffer, "file *%s* is opened. Now enter the string you want to update\n", name);
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	492f      	ldr	r1, [pc, #188]	; (8001890 <update_file+0x124>)
 80017d4:	482b      	ldr	r0, [pc, #172]	; (8001884 <update_file+0x118>)
 80017d6:	f009 fcf9 	bl	800b1cc <siprintf>
			    	send_uart (buffer);
 80017da:	482a      	ldr	r0, [pc, #168]	; (8001884 <update_file+0x118>)
 80017dc:	f7ff fc1a 	bl	8001014 <send_uart>
			    while (!(wait_until("\r\n", buffer)));
 80017e0:	bf00      	nop
 80017e2:	4928      	ldr	r1, [pc, #160]	; (8001884 <update_file+0x118>)
 80017e4:	482b      	ldr	r0, [pc, #172]	; (8001894 <update_file+0x128>)
 80017e6:	f7ff fb0d 	bl	8000e04 <wait_until>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f8      	beq.n	80017e2 <update_file+0x76>
			    fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80017f0:	4824      	ldr	r0, [pc, #144]	; (8001884 <update_file+0x118>)
 80017f2:	f7ff fbc3 	bl	8000f7c <bufsize>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <update_file+0x12c>)
 80017fc:	4921      	ldr	r1, [pc, #132]	; (8001884 <update_file+0x118>)
 80017fe:	4822      	ldr	r0, [pc, #136]	; (8001888 <update_file+0x11c>)
 8001800:	f008 fe9d 	bl	800a53e <f_write>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <update_file+0x110>)
 800180a:	701a      	strb	r2, [r3, #0]
			    if (fresult != FR_OK)
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <update_file+0x110>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00d      	beq.n	8001830 <update_file+0xc4>
			    	clear_buffer();
 8001814:	f7ff fbca 	bl	8000fac <clear_buffer>
			    	sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <update_file+0x110>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	491e      	ldr	r1, [pc, #120]	; (800189c <update_file+0x130>)
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <update_file+0x118>)
 8001824:	f009 fcd2 	bl	800b1cc <siprintf>
			    	send_uart(buffer);
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <update_file+0x118>)
 800182a:	f7ff fbf3 	bl	8001014 <send_uart>
 800182e:	e009      	b.n	8001844 <update_file+0xd8>
			    	clear_buffer();
 8001830:	f7ff fbbc 	bl	8000fac <clear_buffer>
			    	sprintf (buffer, "*%s* written successfully\n", name);
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	491a      	ldr	r1, [pc, #104]	; (80018a0 <update_file+0x134>)
 8001838:	4812      	ldr	r0, [pc, #72]	; (8001884 <update_file+0x118>)
 800183a:	f009 fcc7 	bl	800b1cc <siprintf>
			    	send_uart(buffer);
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <update_file+0x118>)
 8001840:	f7ff fbe8 	bl	8001014 <send_uart>
			    fresult = f_close(&fil);
 8001844:	4810      	ldr	r0, [pc, #64]	; (8001888 <update_file+0x11c>)
 8001846:	f009 f88c 	bl	800a962 <f_close>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <update_file+0x110>)
 8001850:	701a      	strb	r2, [r3, #0]
			    if (fresult != FR_OK)
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <update_file+0x110>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <update_file+0x104>
			    	sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <update_file+0x110>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4910      	ldr	r1, [pc, #64]	; (80018a4 <update_file+0x138>)
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <update_file+0x118>)
 8001866:	f009 fcb1 	bl	800b1cc <siprintf>
			    	send_uart(buffer);
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <update_file+0x118>)
 800186c:	f7ff fbd2 	bl	8001014 <send_uart>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20002188 	.word	0x20002188
 800187c:	200021a0 	.word	0x200021a0
 8001880:	0800bba4 	.word	0x0800bba4
 8001884:	200021bc 	.word	0x200021bc
 8001888:	20001158 	.word	0x20001158
 800188c:	0800bbbc 	.word	0x0800bbbc
 8001890:	0800be8c 	.word	0x0800be8c
 8001894:	0800bc20 	.word	0x0800bc20
 8001898:	200021a8 	.word	0x200021a8
 800189c:	0800bc24 	.word	0x0800bc24
 80018a0:	0800bc48 	.word	0x0800bc48
 80018a4:	0800bc64 	.word	0x0800bc64

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ae:	f000 fd7b 	bl	80023a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b2:	f000 f9a1 	bl	8001bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b6:	f000 faab 	bl	8001e10 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80018ba:	f000 fa07 	bl	8001ccc <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80018be:	f000 fa25 	bl	8001d0c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80018c2:	f006 fa6f 	bl	8007da4 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80018c6:	f000 fa4b 	bl	8001d60 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80018ca:	f000 fa73 	bl	8001db4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 80018ce:	f7ff f96f 	bl	8000bb0 <Ringbuf_init>
  mount_sd();
 80018d2:	f7ff fbf7 	bl	80010c4 <mount_sd>

  /* Infinite loop */

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 80018d6:	21c0      	movs	r1, #192	; 0xc0
 80018d8:	48ba      	ldr	r0, [pc, #744]	; (8001bc4 <main+0x31c>)
 80018da:	f001 f954 	bl	8002b86 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80018de:	2064      	movs	r0, #100	; 0x64
 80018e0:	f000 fdd4 	bl	800248c <HAL_Delay>
    while(IsDataAvailable())
 80018e4:	e166      	b.n	8001bb4 <main+0x30c>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	48b6      	ldr	r0, [pc, #728]	; (8001bc4 <main+0x31c>)
 80018ec:	f001 f932 	bl	8002b54 <HAL_GPIO_WritePin>
    	Get_string(buffer);
 80018f0:	48b5      	ldr	r0, [pc, #724]	; (8001bc8 <main+0x320>)
 80018f2:	f7ff fa2f 	bl	8000d54 <Get_string>
    	int len= cmdlength(buffer);
 80018f6:	48b4      	ldr	r0, [pc, #720]	; (8001bc8 <main+0x320>)
 80018f8:	f7ff fb99 	bl	800102e <cmdlength>
 80018fc:	6078      	str	r0, [r7, #4]
    	get_path();
 80018fe:	f7ff fbad 	bl	800105c <get_path>

    	if(!(strncmp("ls",buffer,len)))cmd='l';
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	461a      	mov	r2, r3
 8001906:	49b0      	ldr	r1, [pc, #704]	; (8001bc8 <main+0x320>)
 8001908:	48b0      	ldr	r0, [pc, #704]	; (8001bcc <main+0x324>)
 800190a:	f009 fc7f 	bl	800b20c <strncmp>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <main+0x72>
 8001914:	4bae      	ldr	r3, [pc, #696]	; (8001bd0 <main+0x328>)
 8001916:	226c      	movs	r2, #108	; 0x6c
 8001918:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("mkdir",buffer,len)))cmd='m';
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	49aa      	ldr	r1, [pc, #680]	; (8001bc8 <main+0x320>)
 8001920:	48ac      	ldr	r0, [pc, #688]	; (8001bd4 <main+0x32c>)
 8001922:	f009 fc73 	bl	800b20c <strncmp>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <main+0x8a>
 800192c:	4ba8      	ldr	r3, [pc, #672]	; (8001bd0 <main+0x328>)
 800192e:	226d      	movs	r2, #109	; 0x6d
 8001930:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("mkfil",buffer,len)))cmd='c';
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	461a      	mov	r2, r3
 8001936:	49a4      	ldr	r1, [pc, #656]	; (8001bc8 <main+0x320>)
 8001938:	48a7      	ldr	r0, [pc, #668]	; (8001bd8 <main+0x330>)
 800193a:	f009 fc67 	bl	800b20c <strncmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <main+0xa2>
 8001944:	4ba2      	ldr	r3, [pc, #648]	; (8001bd0 <main+0x328>)
 8001946:	2263      	movs	r2, #99	; 0x63
 8001948:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("read",buffer,len)))cmd='r';
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	461a      	mov	r2, r3
 800194e:	499e      	ldr	r1, [pc, #632]	; (8001bc8 <main+0x320>)
 8001950:	48a2      	ldr	r0, [pc, #648]	; (8001bdc <main+0x334>)
 8001952:	f009 fc5b 	bl	800b20c <strncmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <main+0xba>
 800195c:	4b9c      	ldr	r3, [pc, #624]	; (8001bd0 <main+0x328>)
 800195e:	2272      	movs	r2, #114	; 0x72
 8001960:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("write",buffer,len)))cmd='w';
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	461a      	mov	r2, r3
 8001966:	4998      	ldr	r1, [pc, #608]	; (8001bc8 <main+0x320>)
 8001968:	489d      	ldr	r0, [pc, #628]	; (8001be0 <main+0x338>)
 800196a:	f009 fc4f 	bl	800b20c <strncmp>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <main+0xd2>
 8001974:	4b96      	ldr	r3, [pc, #600]	; (8001bd0 <main+0x328>)
 8001976:	2277      	movs	r2, #119	; 0x77
 8001978:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("rm",buffer,len)))cmd='d';
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	461a      	mov	r2, r3
 800197e:	4992      	ldr	r1, [pc, #584]	; (8001bc8 <main+0x320>)
 8001980:	4898      	ldr	r0, [pc, #608]	; (8001be4 <main+0x33c>)
 8001982:	f009 fc43 	bl	800b20c <strncmp>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <main+0xea>
 800198c:	4b90      	ldr	r3, [pc, #576]	; (8001bd0 <main+0x328>)
 800198e:	2264      	movs	r2, #100	; 0x64
 8001990:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("update",buffer,len)))cmd='u';
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	461a      	mov	r2, r3
 8001996:	498c      	ldr	r1, [pc, #560]	; (8001bc8 <main+0x320>)
 8001998:	4893      	ldr	r0, [pc, #588]	; (8001be8 <main+0x340>)
 800199a:	f009 fc37 	bl	800b20c <strncmp>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <main+0x102>
 80019a4:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <main+0x328>)
 80019a6:	2275      	movs	r2, #117	; 0x75
 80019a8:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("checkfile",buffer,len)))cmd='f';
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4986      	ldr	r1, [pc, #536]	; (8001bc8 <main+0x320>)
 80019b0:	488e      	ldr	r0, [pc, #568]	; (8001bec <main+0x344>)
 80019b2:	f009 fc2b 	bl	800b20c <strncmp>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <main+0x11a>
 80019bc:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <main+0x328>)
 80019be:	2266      	movs	r2, #102	; 0x66
 80019c0:	701a      	strb	r2, [r3, #0]
    	if(!(strncmp("checksd",buffer,len)))cmd='s';
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4980      	ldr	r1, [pc, #512]	; (8001bc8 <main+0x320>)
 80019c8:	4889      	ldr	r0, [pc, #548]	; (8001bf0 <main+0x348>)
 80019ca:	f009 fc1f 	bl	800b20c <strncmp>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <main+0x132>
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <main+0x328>)
 80019d6:	2273      	movs	r2, #115	; 0x73
 80019d8:	701a      	strb	r2, [r3, #0]


    	switch (cmd)
 80019da:	4b7d      	ldr	r3, [pc, #500]	; (8001bd0 <main+0x328>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3b63      	subs	r3, #99	; 0x63
 80019e0:	2b14      	cmp	r3, #20
 80019e2:	f200 80e2 	bhi.w	8001baa <main+0x302>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <main+0x144>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	08001a95 	.word	0x08001a95
 80019f0:	08001b0d 	.word	0x08001b0d
 80019f4:	08001bab 	.word	0x08001bab
 80019f8:	08001b5d 	.word	0x08001b5d
 80019fc:	08001bab 	.word	0x08001bab
 8001a00:	08001bab 	.word	0x08001bab
 8001a04:	08001bab 	.word	0x08001bab
 8001a08:	08001bab 	.word	0x08001bab
 8001a0c:	08001bab 	.word	0x08001bab
 8001a10:	08001a41 	.word	0x08001a41
 8001a14:	08001a6d 	.word	0x08001a6d
 8001a18:	08001bab 	.word	0x08001bab
 8001a1c:	08001bab 	.word	0x08001bab
 8001a20:	08001bab 	.word	0x08001bab
 8001a24:	08001bab 	.word	0x08001bab
 8001a28:	08001abd 	.word	0x08001abd
 8001a2c:	08001b85 	.word	0x08001b85
 8001a30:	08001bab 	.word	0x08001bab
 8001a34:	08001b35 	.word	0x08001b35
 8001a38:	08001bab 	.word	0x08001bab
 8001a3c:	08001ae5 	.word	0x08001ae5
    	{
		case ('l'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001a40:	21c0      	movs	r1, #192	; 0xc0
 8001a42:	4860      	ldr	r0, [pc, #384]	; (8001bc4 <main+0x31c>)
 8001a44:	f001 f89f 	bl	8002b86 <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 8001a48:	2014      	movs	r0, #20
 8001a4a:	f000 fd1f 	bl	800248c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001a4e:	21c0      	movs	r1, #192	; 0xc0
 8001a50:	485c      	ldr	r0, [pc, #368]	; (8001bc4 <main+0x31c>)
 8001a52:	f001 f898 	bl	8002b86 <HAL_GPIO_TogglePin>
				scan_files(path);
 8001a56:	4867      	ldr	r0, [pc, #412]	; (8001bf4 <main+0x34c>)
 8001a58:	f7ff fb56 	bl	8001108 <scan_files>
				cmd=0;
 8001a5c:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <main+0x328>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
				clear_path();
 8001a62:	f7ff fabd 	bl	8000fe0 <clear_path>
				clear_buffer();
 8001a66:	f7ff faa1 	bl	8000fac <clear_buffer>
				break;
 8001a6a:	e0a3      	b.n	8001bb4 <main+0x30c>
		case ('m'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	4855      	ldr	r0, [pc, #340]	; (8001bc4 <main+0x31c>)
 8001a70:	f001 f889 	bl	8002b86 <HAL_GPIO_TogglePin>
				HAL_Delay(20);
 8001a74:	2014      	movs	r0, #20
 8001a76:	f000 fd09 	bl	800248c <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	4851      	ldr	r0, [pc, #324]	; (8001bc4 <main+0x31c>)
 8001a7e:	f001 f882 	bl	8002b86 <HAL_GPIO_TogglePin>
				create_dir(path);
 8001a82:	485c      	ldr	r0, [pc, #368]	; (8001bf4 <main+0x34c>)
 8001a84:	f7ff fd3c 	bl	8001500 <create_dir>
				cmd=0;
 8001a88:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <main+0x328>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
				clear_path();
 8001a8e:	f7ff faa7 	bl	8000fe0 <clear_path>
						break;
 8001a92:	e08f      	b.n	8001bb4 <main+0x30c>
		case ('c'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001a94:	2140      	movs	r1, #64	; 0x40
 8001a96:	484b      	ldr	r0, [pc, #300]	; (8001bc4 <main+0x31c>)
 8001a98:	f001 f875 	bl	8002b86 <HAL_GPIO_TogglePin>
				HAL_Delay(20);
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f000 fcf5 	bl	800248c <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	4847      	ldr	r0, [pc, #284]	; (8001bc4 <main+0x31c>)
 8001aa6:	f001 f86e 	bl	8002b86 <HAL_GPIO_TogglePin>
				        create_dir(path);
 8001aaa:	4852      	ldr	r0, [pc, #328]	; (8001bf4 <main+0x34c>)
 8001aac:	f7ff fd28 	bl	8001500 <create_dir>
						cmd=0;
 8001ab0:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <main+0x328>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
						clear_path();
 8001ab6:	f7ff fa93 	bl	8000fe0 <clear_path>
						break;
 8001aba:	e07b      	b.n	8001bb4 <main+0x30c>
		case ('r'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	4841      	ldr	r0, [pc, #260]	; (8001bc4 <main+0x31c>)
 8001ac0:	f001 f861 	bl	8002b86 <HAL_GPIO_TogglePin>
						HAL_Delay(20);
 8001ac4:	2014      	movs	r0, #20
 8001ac6:	f000 fce1 	bl	800248c <HAL_Delay>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001aca:	2140      	movs	r1, #64	; 0x40
 8001acc:	483d      	ldr	r0, [pc, #244]	; (8001bc4 <main+0x31c>)
 8001ace:	f001 f85a 	bl	8002b86 <HAL_GPIO_TogglePin>

				        read_file(path);
 8001ad2:	4848      	ldr	r0, [pc, #288]	; (8001bf4 <main+0x34c>)
 8001ad4:	f7ff fc46 	bl	8001364 <read_file>
						cmd=0;
 8001ad8:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <main+0x328>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
			     		clear_path();
 8001ade:	f7ff fa7f 	bl	8000fe0 <clear_path>
						break;
 8001ae2:	e067      	b.n	8001bb4 <main+0x30c>
		case ('w'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	4837      	ldr	r0, [pc, #220]	; (8001bc4 <main+0x31c>)
 8001ae8:	f001 f84d 	bl	8002b86 <HAL_GPIO_TogglePin>
						HAL_Delay(20);
 8001aec:	2014      	movs	r0, #20
 8001aee:	f000 fccd 	bl	800248c <HAL_Delay>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001af2:	2140      	movs	r1, #64	; 0x40
 8001af4:	4833      	ldr	r0, [pc, #204]	; (8001bc4 <main+0x31c>)
 8001af6:	f001 f846 	bl	8002b86 <HAL_GPIO_TogglePin>
				write_file(path);
 8001afa:	483e      	ldr	r0, [pc, #248]	; (8001bf4 <main+0x34c>)
 8001afc:	f7ff fb94 	bl	8001228 <write_file>
								cmd=0;
 8001b00:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <main+0x328>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
								clear_path();
 8001b06:	f7ff fa6b 	bl	8000fe0 <clear_path>
						break;
 8001b0a:	e053      	b.n	8001bb4 <main+0x30c>

		case ('d'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b0c:	2140      	movs	r1, #64	; 0x40
 8001b0e:	482d      	ldr	r0, [pc, #180]	; (8001bc4 <main+0x31c>)
 8001b10:	f001 f839 	bl	8002b86 <HAL_GPIO_TogglePin>
						HAL_Delay(20);
 8001b14:	2014      	movs	r0, #20
 8001b16:	f000 fcb9 	bl	800248c <HAL_Delay>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	4829      	ldr	r0, [pc, #164]	; (8001bc4 <main+0x31c>)
 8001b1e:	f001 f832 	bl	8002b86 <HAL_GPIO_TogglePin>

                        remove_file(path);
 8001b22:	4834      	ldr	r0, [pc, #208]	; (8001bf4 <main+0x34c>)
 8001b24:	f7ff fca6 	bl	8001474 <remove_file>
		                cmd=0;
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <main+0x328>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
						clear_path();
 8001b2e:	f7ff fa57 	bl	8000fe0 <clear_path>
						break;
 8001b32:	e03f      	b.n	8001bb4 <main+0x30c>
		case ('u'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b34:	2140      	movs	r1, #64	; 0x40
 8001b36:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <main+0x31c>)
 8001b38:	f001 f825 	bl	8002b86 <HAL_GPIO_TogglePin>
						HAL_Delay(20);
 8001b3c:	2014      	movs	r0, #20
 8001b3e:	f000 fca5 	bl	800248c <HAL_Delay>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b42:	2140      	movs	r1, #64	; 0x40
 8001b44:	481f      	ldr	r0, [pc, #124]	; (8001bc4 <main+0x31c>)
 8001b46:	f001 f81e 	bl	8002b86 <HAL_GPIO_TogglePin>

	                    update_file(path);
 8001b4a:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <main+0x34c>)
 8001b4c:	f7ff fe0e 	bl	800176c <update_file>
		                cmd=0;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <main+0x328>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
						clear_path();
 8001b56:	f7ff fa43 	bl	8000fe0 <clear_path>
						break;
 8001b5a:	e02b      	b.n	8001bb4 <main+0x30c>
		case ('f'):
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	4819      	ldr	r0, [pc, #100]	; (8001bc4 <main+0x31c>)
 8001b60:	f001 f811 	bl	8002b86 <HAL_GPIO_TogglePin>
						HAL_Delay(20);
 8001b64:	2014      	movs	r0, #20
 8001b66:	f000 fc91 	bl	800248c <HAL_Delay>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <main+0x31c>)
 8001b6e:	f001 f80a 	bl	8002b86 <HAL_GPIO_TogglePin>

						check_file(path);
 8001b72:	4820      	ldr	r0, [pc, #128]	; (8001bf4 <main+0x34c>)
 8001b74:	f7ff fd54 	bl	8001620 <check_file>
		                cmd=0;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <main+0x328>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
						clear_path();
 8001b7e:	f7ff fa2f 	bl	8000fe0 <clear_path>
						break;
 8001b82:	e017      	b.n	8001bb4 <main+0x30c>
		case ('s'):
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b84:	2140      	movs	r1, #64	; 0x40
 8001b86:	480f      	ldr	r0, [pc, #60]	; (8001bc4 <main+0x31c>)
 8001b88:	f000 fffd 	bl	8002b86 <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 8001b8c:	2014      	movs	r0, #20
 8001b8e:	f000 fc7d 	bl	800248c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b92:	2140      	movs	r1, #64	; 0x40
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <main+0x31c>)
 8001b96:	f000 fff6 	bl	8002b86 <HAL_GPIO_TogglePin>

						check_sd();
 8001b9a:	f7ff fcdf 	bl	800155c <check_sd>
	                	cmd=0;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <main+0x328>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
						clear_path();
 8001ba4:	f7ff fa1c 	bl	8000fe0 <clear_path>
						break;
 8001ba8:	e004      	b.n	8001bb4 <main+0x30c>

		default:
			clear_buffer();
 8001baa:	f7ff f9ff 	bl	8000fac <clear_buffer>
			clear_path();
 8001bae:	f7ff fa17 	bl	8000fe0 <clear_path>
			break;
 8001bb2:	bf00      	nop
    while(IsDataAvailable())
 8001bb4:	f7ff f8a0 	bl	8000cf8 <IsDataAvailable>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f47f ae93 	bne.w	80018e6 <main+0x3e>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001bc0:	e689      	b.n	80018d6 <main+0x2e>
 8001bc2:	bf00      	nop
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	200021bc 	.word	0x200021bc
 8001bcc:	0800becc 	.word	0x0800becc
 8001bd0:	20002874 	.word	0x20002874
 8001bd4:	0800bed0 	.word	0x0800bed0
 8001bd8:	0800bed8 	.word	0x0800bed8
 8001bdc:	0800bee0 	.word	0x0800bee0
 8001be0:	0800bee8 	.word	0x0800bee8
 8001be4:	0800bef0 	.word	0x0800bef0
 8001be8:	0800bef4 	.word	0x0800bef4
 8001bec:	0800befc 	.word	0x0800befc
 8001bf0:	0800bf08 	.word	0x0800bf08
 8001bf4:	2000223c 	.word	0x2000223c

08001bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b094      	sub	sp, #80	; 0x50
 8001bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	2230      	movs	r2, #48	; 0x30
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f009 fad8 	bl	800b1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c6c:	23a8      	movs	r3, #168	; 0xa8
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c74:	2307      	movs	r3, #7
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 ffc7 	bl	8003c10 <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c88:	f000 f92e 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fa28 	bl	8004100 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cb6:	f000 f917 	bl	8001ee8 <Error_Handler>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3750      	adds	r7, #80	; 0x50
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000

08001ccc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_SDIO_SD_Init+0x38>)
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <MX_SDIO_SD_Init+0x3c>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_SDIO_SD_Init+0x38>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_SDIO_SD_Init+0x38>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_SDIO_SD_Init+0x38>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_SDIO_SD_Init+0x38>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <MX_SDIO_SD_Init+0x38>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <MX_SDIO_SD_Init+0x38>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	2000225c 	.word	0x2000225c
 8001d08:	40012c00 	.word	0x40012c00

08001d0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <MX_USART1_UART_Init+0x50>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_USART1_UART_Init+0x4c>)
 8001d44:	f003 fd87 	bl	8005856 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d4e:	f000 f8cb 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200022e0 	.word	0x200022e0
 8001d5c:	40011000 	.word	0x40011000

08001d60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <MX_USART2_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d98:	f003 fd5d 	bl	8005856 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001da2:	f000 f8a1 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20002324 	.word	0x20002324
 8001db0:	40004400 	.word	0x40004400

08001db4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc8:	2202      	movs	r2, #2
 8001dca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	f000 fedf 	bl	8002bba <HAL_PCD_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e02:	f000 f871 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20002368 	.word	0x20002368

08001e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_GPIO_Init+0xd0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	21c0      	movs	r1, #192	; 0xc0
 8001eb6:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <MX_GPIO_Init+0xd4>)
 8001eb8:	f000 fe4c 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ebc:	23c0      	movs	r3, #192	; 0xc0
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_GPIO_Init+0xd4>)
 8001ed4:	f000 fca2 	bl	800281c <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <Error_Handler+0x8>
	...

08001ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a28      	ldr	r2, [pc, #160]	; (8002004 <HAL_SD_MspInit+0xc0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d14a      	bne.n	8001ffc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_SD_MspInit+0xc4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001fba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001fbe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fcc:	230c      	movs	r3, #12
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <HAL_SD_MspInit+0xc8>)
 8001fd8:	f000 fc20 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fec:	230c      	movs	r3, #12
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <HAL_SD_MspInit+0xcc>)
 8001ff8:	f000 fc10 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40023800 	.word	0x40023800
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00

08002014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a49      	ldr	r2, [pc, #292]	; (8002158 <HAL_UART_MspInit+0x144>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d153      	bne.n	80020de <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <HAL_UART_MspInit+0x148>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a47      	ldr	r2, [pc, #284]	; (800215c <HAL_UART_MspInit+0x148>)
 8002040:	f043 0310 	orr.w	r3, r3, #16
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b45      	ldr	r3, [pc, #276]	; (800215c <HAL_UART_MspInit+0x148>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_UART_MspInit+0x148>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a40      	ldr	r2, [pc, #256]	; (800215c <HAL_UART_MspInit+0x148>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_UART_MspInit+0x148>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_UART_MspInit+0x148>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a39      	ldr	r2, [pc, #228]	; (800215c <HAL_UART_MspInit+0x148>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <HAL_UART_MspInit+0x148>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800209c:	2307      	movs	r3, #7
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	482e      	ldr	r0, [pc, #184]	; (8002160 <HAL_UART_MspInit+0x14c>)
 80020a8:	f000 fbb8 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020ac:	2340      	movs	r3, #64	; 0x40
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020bc:	2307      	movs	r3, #7
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4827      	ldr	r0, [pc, #156]	; (8002164 <HAL_UART_MspInit+0x150>)
 80020c8:	f000 fba8 	bl	800281c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2025      	movs	r0, #37	; 0x25
 80020d2:	f000 fada 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020d6:	2025      	movs	r0, #37	; 0x25
 80020d8:	f000 faf3 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020dc:	e038      	b.n	8002150 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_UART_MspInit+0x154>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d133      	bne.n	8002150 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_UART_MspInit+0x148>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_UART_MspInit+0x148>)
 80020f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_UART_MspInit+0x148>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_UART_MspInit+0x148>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_UART_MspInit+0x148>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_UART_MspInit+0x148>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002120:	230c      	movs	r3, #12
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002130:	2307      	movs	r3, #7
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	4809      	ldr	r0, [pc, #36]	; (8002160 <HAL_UART_MspInit+0x14c>)
 800213c:	f000 fb6e 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2026      	movs	r0, #38	; 0x26
 8002146:	f000 faa0 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800214a:	2026      	movs	r0, #38	; 0x26
 800214c:	f000 fab9 	bl	80026c2 <HAL_NVIC_EnableIRQ>
}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40011000 	.word	0x40011000
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40004400 	.word	0x40004400

0800216c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800218c:	d147      	bne.n	800221e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a24      	ldr	r2, [pc, #144]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	481b      	ldr	r0, [pc, #108]	; (800222c <HAL_PCD_MspInit+0xc0>)
 80021c0:	f000 fb2c 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021d6:	230a      	movs	r3, #10
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4812      	ldr	r0, [pc, #72]	; (800222c <HAL_PCD_MspInit+0xc0>)
 80021e2:	f000 fb1b 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 80021ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f0:	6353      	str	r3, [r2, #52]	; 0x34
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_PCD_MspInit+0xbc>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2043      	movs	r0, #67	; 0x43
 8002214:	f000 fa39 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002218:	2043      	movs	r0, #67	; 0x43
 800221a:	f000 fa52 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler+0x4>

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <MemManage_Handler+0x4>

08002242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler+0x4>

0800224e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227c:	f000 f8e6 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <USART1_IRQHandler+0x14>)
 800228a:	f7fe fe1d 	bl	8000ec8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800228e:	4802      	ldr	r0, [pc, #8]	; (8002298 <USART1_IRQHandler+0x14>)
 8002290:	f003 fb2e 	bl	80058f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200022e0 	.word	0x200022e0

0800229c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <USART2_IRQHandler+0x10>)
 80022a2:	f003 fb25 	bl	80058f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20002324 	.word	0x20002324

080022b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <OTG_FS_IRQHandler+0x10>)
 80022b6:	f000 fd9d 	bl	8002df4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20002368 	.word	0x20002368

080022c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_sbrk+0x5c>)
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <_sbrk+0x60>)
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x64>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <_sbrk+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d207      	bcs.n	8002304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f4:	f008 ff38 	bl	800b168 <__errno>
 80022f8:	4603      	mov	r3, r0
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e009      	b.n	8002318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_sbrk+0x64>)
 8002314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20020000 	.word	0x20020000
 8002324:	00000400 	.word	0x00000400
 8002328:	20002878 	.word	0x20002878
 800232c:	200028d0 	.word	0x200028d0

08002330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <SystemInit+0x20>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <SystemInit+0x20>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800238c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002360:	e002      	b.n	8002368 <LoopCopyDataInit>

08002362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002366:	3304      	adds	r3, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800236c:	d3f9      	bcc.n	8002362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002370:	4c0b      	ldr	r4, [pc, #44]	; (80023a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002374:	e001      	b.n	800237a <LoopFillZerobss>

08002376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002378:	3204      	adds	r2, #4

0800237a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800237c:	d3fb      	bcc.n	8002376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800237e:	f7ff ffd7 	bl	8002330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f008 fef7 	bl	800b174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002386:	f7ff fa8f 	bl	80018a8 <main>
  bx  lr    
 800238a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800238c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002394:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002398:	0800c044 	.word	0x0800c044
  ldr r2, =_sbss
 800239c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80023a0:	200028cc 	.word	0x200028cc

080023a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC_IRQHandler>
	...

080023a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_Init+0x40>)
 80023b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_Init+0x40>)
 80023be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x40>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f94f 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	200f      	movs	r0, #15
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fd8a 	bl	8001ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f967 	bl	80026de <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f000 f92f 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000000 	.word	0x20000000
 8002444:	20000008 	.word	0x20000008
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x20>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x24>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_IncTick+0x24>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000008 	.word	0x20000008
 8002470:	2000287c 	.word	0x2000287c

08002474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2000287c 	.word	0x2000287c

0800248c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff ffee 	bl	8002474 <HAL_GetTick>
 8002498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d005      	beq.n	80024b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_Delay+0x44>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024b2:	bf00      	nop
 80024b4:	f7ff ffde 	bl	8002474 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d8f7      	bhi.n	80024b4 <HAL_Delay+0x28>
  {
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	; (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff29 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff3e 	bl	800251c <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff8e 	bl	80025c8 <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5d 	bl	8002574 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff31 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff feb6 	bl	8002474 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d008      	beq.n	8002728 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e052      	b.n	80027ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0216 	bic.w	r2, r2, #22
 8002736:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002746:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <HAL_DMA_Abort+0x62>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0208 	bic.w	r2, r2, #8
 8002766:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002778:	e013      	b.n	80027a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800277a:	f7ff fe7b 	bl	8002474 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b05      	cmp	r3, #5
 8002786:	d90c      	bls.n	80027a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2203      	movs	r2, #3
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e015      	b.n	80027ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e4      	bne.n	800277a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	223f      	movs	r2, #63	; 0x3f
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d004      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e00c      	b.n	800280e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2205      	movs	r2, #5
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e16b      	b.n	8002b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 815a 	bne.w	8002b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b4 	beq.w	8002b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a5b      	ldr	r2, [pc, #364]	; (8002b2c <HAL_GPIO_Init+0x310>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_GPIO_Init+0x314>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_GPIO_Init+0x318>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <HAL_GPIO_Init+0x31c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4f      	ldr	r2, [pc, #316]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <HAL_GPIO_Init+0x324>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_GPIO_Init+0x328>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x20a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00e      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <HAL_GPIO_Init+0x310>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ada:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f ae90 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b98:	887a      	ldrh	r2, [r7, #2]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	041a      	lsls	r2, r3, #16
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	619a      	str	r2, [r3, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bbc:	b08f      	sub	sp, #60	; 0x3c
 8002bbe:	af0a      	add	r7, sp, #40	; 0x28
 8002bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e10f      	b.n	8002dec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fac0 	bl	800216c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 fbae 	bl	800736c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	687e      	ldr	r6, [r7, #4]
 8002c18:	466d      	mov	r5, sp
 8002c1a:	f106 0410 	add.w	r4, r6, #16
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c2e:	1d33      	adds	r3, r6, #4
 8002c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	f004 fa96 	bl	8007164 <USB_CoreInit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0d0      	b.n	8002dec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fb9c 	bl	800738e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e04a      	b.n	8002cf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	333d      	adds	r3, #61	; 0x3d
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	333c      	adds	r3, #60	; 0x3c
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	b298      	uxth	r0, r3
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3344      	adds	r3, #68	; 0x44
 8002c98:	4602      	mov	r2, r0
 8002c9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	3340      	adds	r3, #64	; 0x40
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3348      	adds	r3, #72	; 0x48
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334c      	adds	r3, #76	; 0x4c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3354      	adds	r3, #84	; 0x54
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3af      	bcc.n	8002c5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e044      	b.n	8002d8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3b5      	bcc.n	8002d02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	687e      	ldr	r6, [r7, #4]
 8002d9e:	466d      	mov	r5, sp
 8002da0:	f106 0410 	add.w	r4, r6, #16
 8002da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db4:	1d33      	adds	r3, r6, #4
 8002db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db8:	6838      	ldr	r0, [r7, #0]
 8002dba:	f004 fb35 	bl	8007428 <USB_DevInit>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e00d      	b.n	8002dec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 fe65 	bl	8007ab4 <USB_DevDisconnect>

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002df4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b08d      	sub	sp, #52	; 0x34
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 ff06 	bl	8007c1c <USB_GetMode>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 848a 	bne.w	800372c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fe6a 	bl	8007af6 <USB_ReadInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8480 	beq.w	800372a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fe57 	bl	8007af6 <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f002 0202 	and.w	r2, r2, #2
 8002e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fe45 	bl	8007af6 <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d161      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0210 	bic.w	r2, r2, #16
 8002e84:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 020f 	and.w	r2, r3, #15
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	0c5b      	lsrs	r3, r3, #17
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d124      	bne.n	8002efc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d035      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6a38      	ldr	r0, [r7, #32]
 8002ed2:	f004 fd97 	bl	8007a04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee2:	441a      	add	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef4:	441a      	add	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	621a      	str	r2, [r3, #32]
 8002efa:	e016      	b.n	8002f2a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	0c5b      	lsrs	r3, r3, #17
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	2b06      	cmp	r3, #6
 8002f06:	d110      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f0e:	2208      	movs	r2, #8
 8002f10:	4619      	mov	r1, r3
 8002f12:	6a38      	ldr	r0, [r7, #32]
 8002f14:	f004 fd76 	bl	8007a04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f24:	441a      	add	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0210 	orr.w	r2, r2, #16
 8002f38:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f004 fdd9 	bl	8007af6 <USB_ReadInterrupts>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f4e:	f040 80a7 	bne.w	80030a0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fdde 	bl	8007b1c <USB_ReadDevAllOutEpInterrupt>
 8002f60:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f62:	e099      	b.n	8003098 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 808e 	beq.w	800308c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fe02 	bl	8007b84 <USB_ReadDevOutEPInterrupt>
 8002f80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fcfb 	bl	800399c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00c      	beq.n	8002fca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fdd1 	bl	8003b6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d030      	beq.n	8003052 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d109      	bne.n	8003010 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	3304      	adds	r3, #4
 8003024:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	78db      	ldrb	r3, [r3, #3]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d108      	bne.n	8003040 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fbc3 	bl	80037c6 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304c:	461a      	mov	r2, r3
 800304e:	2302      	movs	r3, #2
 8003050:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	461a      	mov	r2, r3
 800306a:	2320      	movs	r3, #32
 800306c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003084:	461a      	mov	r2, r3
 8003086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800308a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	3301      	adds	r3, #1
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	f47f af62 	bne.w	8002f64 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fd26 	bl	8007af6 <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030b4:	f040 80db 	bne.w	800326e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fd47 	bl	8007b50 <USB_ReadDevAllInEpInterrupt>
 80030c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030c8:	e0cd      	b.n	8003266 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80c2 	beq.w	800325a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f004 fd6d 	bl	8007bc0 <USB_ReadDevInEPInterrupt>
 80030e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d057      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	2201      	movs	r2, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	69f9      	ldr	r1, [r7, #28]
 800310e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003112:	4013      	ands	r3, r2
 8003114:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003122:	461a      	mov	r2, r3
 8003124:	2301      	movs	r3, #1
 8003126:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d132      	bne.n	8003196 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	334c      	adds	r3, #76	; 0x4c
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4403      	add	r3, r0
 8003150:	3348      	adds	r3, #72	; 0x48
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4419      	add	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4403      	add	r3, r0
 8003164:	334c      	adds	r3, #76	; 0x4c
 8003166:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d113      	bne.n	8003196 <HAL_PCD_IRQHandler+0x3a2>
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3354      	adds	r3, #84	; 0x54
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d108      	bne.n	8003196 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800318e:	461a      	mov	r2, r3
 8003190:	2101      	movs	r1, #1
 8003192:	f004 fd75 	bl	8007c80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	b2db      	uxtb	r3, r3
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fad4 	bl	800374a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b8:	461a      	mov	r2, r3
 80031ba:	2308      	movs	r3, #8
 80031bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d4:	461a      	mov	r2, r3
 80031d6:	2310      	movs	r3, #16
 80031d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f0:	461a      	mov	r2, r3
 80031f2:	2340      	movs	r3, #64	; 0x40
 80031f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d023      	beq.n	8003248 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003202:	6a38      	ldr	r0, [r7, #32]
 8003204:	f004 fa74 	bl	80076f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	78db      	ldrb	r3, [r3, #3]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2200      	movs	r2, #0
 8003228:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fad4 	bl	80037de <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	461a      	mov	r2, r3
 8003244:	2302      	movs	r3, #2
 8003246:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fb13 	bl	8003880 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	3301      	adds	r3, #1
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	f47f af2e 	bne.w	80030ca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fc3f 	bl	8007af6 <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800327e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003282:	d122      	bne.n	80032ca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d108      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032aa:	2100      	movs	r1, #0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fca3 	bl	8003bf8 <HAL_PCDEx_LPM_Callback>
 80032b2:	e002      	b.n	80032ba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fa7c 	bl	80037b2 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fc11 	bl	8007af6 <USB_ReadInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032de:	d112      	bne.n	8003306 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa54 	bl	800379e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003304:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 fbf3 	bl	8007af6 <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	f040 80b7 	bne.w	800348c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2110      	movs	r1, #16
 8003338:	4618      	mov	r0, r3
 800333a:	f004 f9d9 	bl	80076f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003342:	e046      	b.n	80033d2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003350:	461a      	mov	r2, r3
 8003352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003356:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	440a      	add	r2, r1
 800336e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003376:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800338a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	3301      	adds	r3, #1
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d8:	429a      	cmp	r2, r3
 80033da:	d3b3      	bcc.n	8003344 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d016      	beq.n	8003426 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003408:	f043 030b 	orr.w	r3, r3, #11
 800340c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341e:	f043 030b 	orr.w	r3, r3, #11
 8003422:	6453      	str	r3, [r2, #68]	; 0x44
 8003424:	e015      	b.n	8003452 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003438:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800343c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344c:	f043 030b 	orr.w	r3, r3, #11
 8003450:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003460:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003464:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003476:	461a      	mov	r2, r3
 8003478:	f004 fc02 	bl	8007c80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800348a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fb30 	bl	8007af6 <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a0:	d124      	bne.n	80034ec <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 fbc6 	bl	8007c38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f004 f99a 	bl	80077ea <USB_GetDevSpeed>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	f001 f809 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80034c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	4620      	mov	r0, r4
 80034d2:	f003 fea9 	bl	8007228 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f957 	bl	800378a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 fb00 	bl	8007af6 <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d10a      	bne.n	8003516 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f938 	bl	8003776 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f002 0208 	and.w	r2, r2, #8
 8003514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f004 faeb 	bl	8007af6 <USB_ReadInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d122      	bne.n	8003570 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003536:	2301      	movs	r3, #1
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e014      	b.n	8003566 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f95f 	bl	800381e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	3301      	adds	r3, #1
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	429a      	cmp	r2, r3
 800356e:	d3e5      	bcc.n	800353c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f004 fabe 	bl	8007af6 <USB_ReadInterrupts>
 800357a:	4603      	mov	r3, r0
 800357c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003584:	d13b      	bne.n	80035fe <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003586:	2301      	movs	r3, #1
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	e02b      	b.n	80035e4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3340      	adds	r3, #64	; 0x40
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d115      	bne.n	80035de <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da12      	bge.n	80035de <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	333f      	adds	r3, #63	; 0x3f
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f920 	bl	800381e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	3301      	adds	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3ce      	bcc.n	800358c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fa77 	bl	8007af6 <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003612:	d155      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003614:	2301      	movs	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	e045      	b.n	80036a6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d12e      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003642:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	da2b      	bge.n	80036a0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003654:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003658:	429a      	cmp	r2, r3
 800365a:	d121      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369c:	6053      	str	r3, [r2, #4]
            break;
 800369e:	e007      	b.n	80036b0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	3301      	adds	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d3b4      	bcc.n	800361a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f004 fa16 	bl	8007af6 <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d10a      	bne.n	80036ec <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f88d 	bl	80037f6 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 fa00 	bl	8007af6 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d115      	bne.n	800372c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f879 	bl	800380a <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	e000      	b.n	800372c <HAL_PCD_IRQHandler+0x938>
      return;
 800372a:	bf00      	nop
    }
  }
}
 800372c:	3734      	adds	r7, #52	; 0x34
 800372e:	46bd      	mov	sp, r7
 8003730:	bd90      	pop	{r4, r7, pc}

08003732 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800382a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382e:	2b00      	cmp	r3, #0
 8003830:	da0c      	bge.n	800384c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 020f 	and.w	r2, r3, #15
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	3338      	adds	r3, #56	; 0x38
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e00c      	b.n	8003866 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 020f 	and.w	r2, r3, #15
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	f003 ffe1 	bl	8007834 <USB_EPStopXfer>
 8003872:	4603      	mov	r3, r0
 8003874:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003876:	7afb      	ldrb	r3, [r7, #11]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	3338      	adds	r3, #56	; 0x38
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d901      	bls.n	80038b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e06c      	b.n	8003992 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d902      	bls.n	80038d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3303      	adds	r3, #3
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038dc:	e02b      	b.n	8003936 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d902      	bls.n	80038fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3303      	adds	r3, #3
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6919      	ldr	r1, [r3, #16]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003912:	b2db      	uxtb	r3, r3
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4603      	mov	r3, r0
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f004 f835 	bl	8007988 <USB_WritePacket>

    ep->xfer_buff  += len;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1a      	ldr	r2, [r3, #32]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	b29b      	uxth	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d809      	bhi.n	8003960 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003954:	429a      	cmp	r2, r3
 8003956:	d203      	bcs.n	8003960 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1be      	bne.n	80038de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	429a      	cmp	r2, r3
 800396a:	d811      	bhi.n	8003990 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	43db      	mvns	r3, r3
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800398c:	4013      	ands	r3, r2
 800398e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	333c      	adds	r3, #60	; 0x3c
 80039b4:	3304      	adds	r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d17b      	bne.n	8003aca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4a61      	ldr	r2, [pc, #388]	; (8003b64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	f240 80b9 	bls.w	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80b3 	beq.w	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fe:	461a      	mov	r2, r3
 8003a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a04:	6093      	str	r3, [r2, #8]
 8003a06:	e0a7      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2320      	movs	r3, #32
 8003a22:	6093      	str	r3, [r2, #8]
 8003a24:	e098      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8093 	bne.w	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4a4b      	ldr	r2, [pc, #300]	; (8003b64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d90f      	bls.n	8003a5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	461a      	mov	r2, r3
 8003a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a56:	6093      	str	r3, [r2, #8]
 8003a58:	e07e      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	0159      	lsls	r1, r3, #5
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	440b      	add	r3, r1
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d114      	bne.n	8003abc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f004 f8ea 	bl	8007c80 <USB_EP0_OutStart>
 8003aac:	e006      	b.n	8003abc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	441a      	add	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fe35 	bl	8003732 <HAL_PCD_DataOutStageCallback>
 8003ac8:	e046      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d124      	bne.n	8003b1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	e032      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fe0c 	bl	8003732 <HAL_PCD_DataOutStageCallback>
 8003b1a:	e01d      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d114      	bne.n	8003b4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b44:	461a      	mov	r2, r3
 8003b46:	2100      	movs	r1, #0
 8003b48:	f004 f89a 	bl	8007c80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fded 	bl	8003732 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	4f54300a 	.word	0x4f54300a
 8003b68:	4f54310a 	.word	0x4f54310a

08003b6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	333c      	adds	r3, #60	; 0x3c
 8003b84:	3304      	adds	r3, #4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a15      	ldr	r2, [pc, #84]	; (8003bf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d90e      	bls.n	8003bc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fdce 	bl	8003762 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d90c      	bls.n	8003be8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003be0:	461a      	mov	r2, r3
 8003be2:	2101      	movs	r1, #1
 8003be4:	f004 f84c 	bl	8007c80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	4f54300a 	.word	0x4f54300a

08003bf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e267      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d075      	beq.n	8003d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2e:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d00c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3a:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d112      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4b82      	ldr	r3, [pc, #520]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4b7e      	ldr	r3, [pc, #504]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d05b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x108>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d157      	bne.n	8003d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e242      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_OscConfig+0x74>
 8003c76:	4b76      	ldr	r3, [pc, #472]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a75      	ldr	r2, [pc, #468]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x98>
 8003c8e:	4b70      	ldr	r3, [pc, #448]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6f      	ldr	r2, [pc, #444]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b6d      	ldr	r3, [pc, #436]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6c      	ldr	r2, [pc, #432]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003ca8:	4b69      	ldr	r3, [pc, #420]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a68      	ldr	r2, [pc, #416]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fbd4 	bl	8002474 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fbd0 	bl	8002474 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e207      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xc0>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fbc0 	bl	8002474 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe fbbc 	bl	8002474 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e1f3      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xe8>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d063      	beq.n	8003dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d26:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b44      	ldr	r3, [pc, #272]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d116      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e1c7      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4937      	ldr	r1, [pc, #220]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e03a      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x244>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fe fb75 	bl	8002474 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fb71 	bl	8002474 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1a8      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4925      	ldr	r1, [pc, #148]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
 8003dc0:	e015      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCC_OscConfig+0x244>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fb54 	bl	8002474 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7fe fb50 	bl	8002474 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e187      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d036      	beq.n	8003e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_RCC_OscConfig+0x248>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fe fb34 	bl	8002474 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e10:	f7fe fb30 	bl	8002474 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e167      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x200>
 8003e2e:	e01b      	b.n	8003e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_OscConfig+0x248>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fe fb1d 	bl	8002474 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	e00e      	b.n	8003e5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7fe fb19 	bl	8002474 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d907      	bls.n	8003e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e150      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	42470000 	.word	0x42470000
 8003e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ea      	bne.n	8003e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8097 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4b81      	ldr	r3, [pc, #516]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	4b7d      	ldr	r3, [pc, #500]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a7c      	ldr	r2, [pc, #496]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b7a      	ldr	r3, [pc, #488]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	4b77      	ldr	r3, [pc, #476]	; (8004084 <HAL_RCC_OscConfig+0x474>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d118      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb2:	4b74      	ldr	r3, [pc, #464]	; (8004084 <HAL_RCC_OscConfig+0x474>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a73      	ldr	r2, [pc, #460]	; (8004084 <HAL_RCC_OscConfig+0x474>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fad9 	bl	8002474 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec6:	f7fe fad5 	bl	8002474 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e10c      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed8:	4b6a      	ldr	r3, [pc, #424]	; (8004084 <HAL_RCC_OscConfig+0x474>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x2ea>
 8003eec:	4b64      	ldr	r3, [pc, #400]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a63      	ldr	r2, [pc, #396]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	e01c      	b.n	8003f34 <HAL_RCC_OscConfig+0x324>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x30c>
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a5e      	ldr	r2, [pc, #376]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0e:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0x324>
 8003f1c:	4b58      	ldr	r3, [pc, #352]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a57      	ldr	r2, [pc, #348]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	4b55      	ldr	r3, [pc, #340]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a54      	ldr	r2, [pc, #336]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fa9a 	bl	8002474 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7fe fa96 	bl	8002474 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e0cb      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	4b49      	ldr	r3, [pc, #292]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ee      	beq.n	8003f44 <HAL_RCC_OscConfig+0x334>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7fe fa84 	bl	8002474 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fe fa80 	bl	8002474 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0b5      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ee      	bne.n	8003f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	4b39      	ldr	r3, [pc, #228]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	4a38      	ldr	r2, [pc, #224]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a1 	beq.w	80040f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fae:	4b34      	ldr	r3, [pc, #208]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d05c      	beq.n	8004074 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d141      	bne.n	8004046 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCC_OscConfig+0x478>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fa54 	bl	8002474 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fe fa50 	bl	8002474 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e087      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	3b01      	subs	r3, #1
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	491b      	ldr	r1, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_RCC_OscConfig+0x478>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fe fa29 	bl	8002474 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fe fa25 	bl	8002474 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e05c      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x416>
 8004044:	e054      	b.n	80040f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_RCC_OscConfig+0x478>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fe fa12 	bl	8002474 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004054:	f7fe fa0e 	bl	8002474 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e045      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_OscConfig+0x470>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x444>
 8004072:	e03d      	b.n	80040f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e038      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
 8004080:	40023800 	.word	0x40023800
 8004084:	40007000 	.word	0x40007000
 8004088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x4ec>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d028      	beq.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d121      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d11a      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d111      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	3b01      	subs	r3, #1
 80040d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d107      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0cc      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b68      	ldr	r3, [pc, #416]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d90c      	bls.n	800413c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b8      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a58      	ldr	r2, [pc, #352]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800415e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a52      	ldr	r2, [pc, #328]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b50      	ldr	r3, [pc, #320]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	494d      	ldr	r1, [pc, #308]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d044      	beq.n	8004220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d119      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d003      	beq.n	80041be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e067      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4934      	ldr	r1, [pc, #208]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f0:	f7fe f940 	bl	8002474 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fe f93c 	bl	8002474 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e04f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d20c      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e032      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4916      	ldr	r1, [pc, #88]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490e      	ldr	r1, [pc, #56]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004286:	f000 f821 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490a      	ldr	r1, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe f8a0 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00
 80042bc:	40023800 	.word	0x40023800
 80042c0:	0800bf54 	.word	0x0800bf54
 80042c4:	20000000 	.word	0x20000000
 80042c8:	20000004 	.word	0x20000004

080042cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d0:	b094      	sub	sp, #80	; 0x50
 80042d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	647b      	str	r3, [r7, #68]	; 0x44
 80042d8:	2300      	movs	r3, #0
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	2300      	movs	r3, #0
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e4:	4b79      	ldr	r3, [pc, #484]	; (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d00d      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x40>
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	f200 80e1 	bhi.w	80044b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x34>
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d003      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x3a>
 80042fe:	e0db      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004300:	4b73      	ldr	r3, [pc, #460]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004302:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004304:	e0db      	b.n	80044be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004306:	4b73      	ldr	r3, [pc, #460]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004308:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800430a:	e0d8      	b.n	80044be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800430c:	4b6f      	ldr	r3, [pc, #444]	; (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004316:	4b6d      	ldr	r3, [pc, #436]	; (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d063      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004322:	4b6a      	ldr	r3, [pc, #424]	; (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	2200      	movs	r2, #0
 800432a:	63bb      	str	r3, [r7, #56]	; 0x38
 800432c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
 8004336:	2300      	movs	r3, #0
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
 800433a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800433e:	4622      	mov	r2, r4
 8004340:	462b      	mov	r3, r5
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	0159      	lsls	r1, r3, #5
 800434c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004350:	0150      	lsls	r0, r2, #5
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4621      	mov	r1, r4
 8004358:	1a51      	subs	r1, r2, r1
 800435a:	6139      	str	r1, [r7, #16]
 800435c:	4629      	mov	r1, r5
 800435e:	eb63 0301 	sbc.w	r3, r3, r1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004370:	4659      	mov	r1, fp
 8004372:	018b      	lsls	r3, r1, #6
 8004374:	4651      	mov	r1, sl
 8004376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437a:	4651      	mov	r1, sl
 800437c:	018a      	lsls	r2, r1, #6
 800437e:	4651      	mov	r1, sl
 8004380:	ebb2 0801 	subs.w	r8, r2, r1
 8004384:	4659      	mov	r1, fp
 8004386:	eb63 0901 	sbc.w	r9, r3, r1
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439e:	4690      	mov	r8, r2
 80043a0:	4699      	mov	r9, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	eb18 0303 	adds.w	r3, r8, r3
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	462b      	mov	r3, r5
 80043ac:	eb49 0303 	adc.w	r3, r9, r3
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043be:	4629      	mov	r1, r5
 80043c0:	024b      	lsls	r3, r1, #9
 80043c2:	4621      	mov	r1, r4
 80043c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043c8:	4621      	mov	r1, r4
 80043ca:	024a      	lsls	r2, r1, #9
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d2:	2200      	movs	r2, #0
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043dc:	f7fc fa66 	bl	80008ac <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e8:	e058      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	099b      	lsrs	r3, r3, #6
 80043f0:	2200      	movs	r2, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	4611      	mov	r1, r2
 80043f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	2300      	movs	r3, #0
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004400:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004404:	4642      	mov	r2, r8
 8004406:	464b      	mov	r3, r9
 8004408:	f04f 0000 	mov.w	r0, #0
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	0159      	lsls	r1, r3, #5
 8004412:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004416:	0150      	lsls	r0, r2, #5
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4641      	mov	r1, r8
 800441e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb63 0b01 	sbc.w	fp, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004434:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004438:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800443c:	ebb2 040a 	subs.w	r4, r2, sl
 8004440:	eb63 050b 	sbc.w	r5, r3, fp
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	00eb      	lsls	r3, r5, #3
 800444e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004452:	00e2      	lsls	r2, r4, #3
 8004454:	4614      	mov	r4, r2
 8004456:	461d      	mov	r5, r3
 8004458:	4643      	mov	r3, r8
 800445a:	18e3      	adds	r3, r4, r3
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	464b      	mov	r3, r9
 8004460:	eb45 0303 	adc.w	r3, r5, r3
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004472:	4629      	mov	r1, r5
 8004474:	028b      	lsls	r3, r1, #10
 8004476:	4621      	mov	r1, r4
 8004478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800447c:	4621      	mov	r1, r4
 800447e:	028a      	lsls	r2, r1, #10
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004486:	2200      	movs	r2, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	61fa      	str	r2, [r7, #28]
 800448c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004490:	f7fc fa0c 	bl	80008ac <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	3301      	adds	r3, #1
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044b6:	e002      	b.n	80044be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3750      	adds	r7, #80	; 0x50
 80044c4:	46bd      	mov	sp, r7
 80044c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	00f42400 	.word	0x00f42400
 80044d4:	007a1200 	.word	0x007a1200

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_RCC_GetHCLKFreq+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000000 	.word	0x20000000

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0a9b      	lsrs	r3, r3, #10
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	0800bf64 	.word	0x0800bf64

08004518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800451c:	f7ff ffdc 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0b5b      	lsrs	r3, r3, #13
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	; (800453c <HAL_RCC_GetPCLK2Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	0800bf64 	.word	0x0800bf64

08004540 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e022      	b.n	8004598 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fd fced 	bl	8001f44 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2203      	movs	r2, #3
 800456e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f814 	bl	80045a0 <HAL_SD_InitCard>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e00a      	b.n	8004598 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045a0:	b5b0      	push	{r4, r5, r7, lr}
 80045a2:	b08e      	sub	sp, #56	; 0x38
 80045a4:	af04      	add	r7, sp, #16
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80045bc:	2376      	movs	r3, #118	; 0x76
 80045be:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681d      	ldr	r5, [r3, #0]
 80045c4:	466c      	mov	r4, sp
 80045c6:	f107 0314 	add.w	r3, r7, #20
 80045ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045d2:	f107 0308 	add.w	r3, r7, #8
 80045d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d8:	4628      	mov	r0, r5
 80045da:	f002 f84f 	bl	800667c <SDIO_Init>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80045e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e04f      	b.n	8004690 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80045f0:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_SD_InitCard+0xf8>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f002 f887 	bl	800670e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <HAL_SD_InitCard+0xf8>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004606:	2002      	movs	r0, #2
 8004608:	f7fd ff40 	bl	800248c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 ff03 	bl	8005418 <SD_PowerON>
 8004612:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e02e      	b.n	8004690 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fe22 	bl	800527c <SD_InitCard>
 8004638:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e01b      	b.n	8004690 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004660:	4618      	mov	r0, r3
 8004662:	f002 f8e6 	bl	8006832 <SDMMC_CmdBlockLength>
 8004666:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00f      	beq.n	800468e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a0a      	ldr	r2, [pc, #40]	; (800469c <HAL_SD_InitCard+0xfc>)
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bdb0      	pop	{r4, r5, r7, pc}
 8004698:	422580a0 	.word	0x422580a0
 800469c:	004005ff 	.word	0x004005ff

080046a0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b092      	sub	sp, #72	; 0x48
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80046ae:	f7fd fee1 	bl	8002474 <HAL_GetTick>
 80046b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e1bd      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 81b0 	bne.w	8004a40 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	441a      	add	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d907      	bls.n	8004704 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e1a4      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2203      	movs	r2, #3
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2200      	movs	r2, #0
 8004712:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	2b01      	cmp	r3, #1
 800471a:	d002      	beq.n	8004722 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	025b      	lsls	r3, r3, #9
 8004720:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800472e:	2390      	movs	r3, #144	; 0x90
 8004730:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004732:	2302      	movs	r3, #2
 8004734:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800473a:	2301      	movs	r3, #1
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f107 0214 	add.w	r2, r7, #20
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f002 f846 	bl	80067da <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d90a      	bls.n	800476a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2202      	movs	r2, #2
 8004758:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004760:	4618      	mov	r0, r3
 8004762:	f002 f8aa 	bl	80068ba <SDMMC_CmdReadMultiBlock>
 8004766:	6478      	str	r0, [r7, #68]	; 0x44
 8004768:	e009      	b.n	800477e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004776:	4618      	mov	r0, r3
 8004778:	f002 f87d 	bl	8006876 <SDMMC_CmdReadSingleBlock>
 800477c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	2b00      	cmp	r3, #0
 8004782:	d012      	beq.n	80047aa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a7a      	ldr	r2, [pc, #488]	; (8004974 <HAL_SD_ReadBlocks+0x2d4>)
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004792:	431a      	orrs	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e151      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80047ae:	e061      	b.n	8004874 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d03c      	beq.n	8004838 <HAL_SD_ReadBlocks+0x198>
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d039      	beq.n	8004838 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	643b      	str	r3, [r7, #64]	; 0x40
 80047c8:	e033      	b.n	8004832 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 ff7f 	bl	80066d2 <SDIO_ReadFIFO>
 80047d4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	3301      	adds	r3, #1
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	3b01      	subs	r3, #1
 80047e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	3301      	adds	r3, #1
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	3b01      	subs	r3, #1
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	b2da      	uxtb	r2, r3
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	3301      	adds	r3, #1
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004812:	3b01      	subs	r3, #1
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	0e1b      	lsrs	r3, r3, #24
 800481a:	b2da      	uxtb	r2, r3
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004822:	3301      	adds	r3, #1
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004828:	3b01      	subs	r3, #1
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800482c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482e:	3301      	adds	r3, #1
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
 8004832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004834:	2b07      	cmp	r3, #7
 8004836:	d9c8      	bls.n	80047ca <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004838:	f7fd fe1c 	bl	8002474 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004844:	429a      	cmp	r2, r3
 8004846:	d902      	bls.n	800484e <HAL_SD_ReadBlocks+0x1ae>
 8004848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484a:	2b00      	cmp	r3, #0
 800484c:	d112      	bne.n	8004874 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a48      	ldr	r2, [pc, #288]	; (8004974 <HAL_SD_ReadBlocks+0x2d4>)
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e0ec      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487a:	f240 332a 	movw	r3, #810	; 0x32a
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d095      	beq.n	80047b0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d022      	beq.n	80048d8 <HAL_SD_ReadBlocks+0x238>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d91f      	bls.n	80048d8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	2b03      	cmp	r3, #3
 800489e:	d01b      	beq.n	80048d8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 f86f 	bl	8006988 <SDMMC_CmdStopTransfer>
 80048aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <HAL_SD_ReadBlocks+0x2d4>)
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0ba      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d012      	beq.n	800490c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a22      	ldr	r2, [pc, #136]	; (8004974 <HAL_SD_ReadBlocks+0x2d4>)
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	f043 0208 	orr.w	r2, r3, #8
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0a0      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d012      	beq.n	8004940 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a15      	ldr	r2, [pc, #84]	; (8004974 <HAL_SD_ReadBlocks+0x2d4>)
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	f043 0202 	orr.w	r2, r3, #2
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e086      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d063      	beq.n	8004a16 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a08      	ldr	r2, [pc, #32]	; (8004974 <HAL_SD_ReadBlocks+0x2d4>)
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e06c      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
 8004974:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fea8 	bl	80066d2 <SDIO_ReadFIFO>
 8004982:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	b2da      	uxtb	r2, r3
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	3301      	adds	r3, #1
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	3b01      	subs	r3, #1
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	3301      	adds	r3, #1
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	3b01      	subs	r3, #1
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	3301      	adds	r3, #1
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	3b01      	subs	r3, #1
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	0e1b      	lsrs	r3, r3, #24
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	3301      	adds	r3, #1
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	3b01      	subs	r3, #1
 80049d8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80049da:	f7fd fd4b 	bl	8002474 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d902      	bls.n	80049f0 <HAL_SD_ReadBlocks+0x350>
 80049ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d112      	bne.n	8004a16 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_SD_ReadBlocks+0x3b8>)
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e01b      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SD_ReadBlocks+0x38a>
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1a6      	bne.n	8004978 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e006      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3748      	adds	r7, #72	; 0x48
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	004005ff 	.word	0x004005ff

08004a5c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b092      	sub	sp, #72	; 0x48
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a6a:	f7fd fd03 	bl	8002474 <HAL_GetTick>
 8004a6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e166      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	f040 8159 	bne.w	8004d4e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	441a      	add	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d907      	bls.n	8004ac0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e14d      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	025b      	lsls	r3, r3, #9
 8004ae8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004aea:	2390      	movs	r3, #144	; 0x90
 8004aec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f107 0218 	add.w	r2, r7, #24
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 fe68 	bl	80067da <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d90a      	bls.n	8004b26 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 ff10 	bl	8006942 <SDMMC_CmdWriteMultiBlock>
 8004b22:	6478      	str	r0, [r7, #68]	; 0x44
 8004b24:	e009      	b.n	8004b3a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2210      	movs	r2, #16
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fee3 	bl	80068fe <SDMMC_CmdWriteSingleBlock>
 8004b38:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d012      	beq.n	8004b66 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a87      	ldr	r2, [pc, #540]	; (8004d64 <HAL_SD_WriteBlocks+0x308>)
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0fa      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004b6a:	e065      	b.n	8004c38 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d040      	beq.n	8004bfc <HAL_SD_WriteBlocks+0x1a0>
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d03d      	beq.n	8004bfc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004b80:	2300      	movs	r3, #0
 8004b82:	643b      	str	r3, [r7, #64]	; 0x40
 8004b84:	e037      	b.n	8004bf6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	3301      	adds	r3, #1
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b94:	3b01      	subs	r3, #1
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	021a      	lsls	r2, r3, #8
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bac:	3b01      	subs	r3, #1
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	041a      	lsls	r2, r3, #16
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	061a      	lsls	r2, r3, #24
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f107 0214 	add.w	r2, r7, #20
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 fd7e 	bl	80066ec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf8:	2b07      	cmp	r3, #7
 8004bfa:	d9c4      	bls.n	8004b86 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004bfc:	f7fd fc3a 	bl	8002474 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d902      	bls.n	8004c12 <HAL_SD_WriteBlocks+0x1b6>
 8004c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d112      	bne.n	8004c38 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a53      	ldr	r2, [pc, #332]	; (8004d64 <HAL_SD_WriteBlocks+0x308>)
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e091      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	f240 331a 	movw	r3, #794	; 0x31a
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d091      	beq.n	8004b6c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d022      	beq.n	8004c9c <HAL_SD_WriteBlocks+0x240>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d91f      	bls.n	8004c9c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d01b      	beq.n	8004c9c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fe8d 	bl	8006988 <SDMMC_CmdStopTransfer>
 8004c6e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <HAL_SD_WriteBlocks+0x308>)
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e05f      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d012      	beq.n	8004cd0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <HAL_SD_WriteBlocks+0x308>)
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f043 0208 	orr.w	r2, r3, #8
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e045      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <HAL_SD_WriteBlocks+0x308>)
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	f043 0202 	orr.w	r2, r3, #2
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e02b      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d012      	beq.n	8004d38 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a13      	ldr	r2, [pc, #76]	; (8004d64 <HAL_SD_WriteBlocks+0x308>)
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	f043 0210 	orr.w	r2, r3, #16
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e011      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e006      	b.n	8004d5c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3748      	adds	r7, #72	; 0x48
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	004005ff 	.word	0x004005ff

08004d68 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d76:	0f9b      	lsrs	r3, r3, #30
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d82:	0e9b      	lsrs	r3, r3, #26
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d94:	0e1b      	lsrs	r3, r3, #24
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc8:	0d1b      	lsrs	r3, r3, #20
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de6:	0bdb      	lsrs	r3, r3, #15
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df8:	0b9b      	lsrs	r3, r3, #14
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0a:	0b5b      	lsrs	r3, r3, #13
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e1c:	0b1b      	lsrs	r3, r3, #12
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d163      	bne.n	8004f00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3c:	009a      	lsls	r2, r3, #2
 8004e3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e42:	4013      	ands	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004e48:	0f92      	lsrs	r2, r2, #30
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e54:	0edb      	lsrs	r3, r3, #27
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	0e1b      	lsrs	r3, r3, #24
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e78:	0d5b      	lsrs	r3, r3, #21
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8a:	0c9b      	lsrs	r3, r3, #18
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9c:	0bdb      	lsrs	r3, r3, #15
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	7e1b      	ldrb	r3, [r3, #24]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004eca:	fb03 f202 	mul.w	r2, r3, r2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	7a1b      	ldrb	r3, [r3, #8]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	2201      	movs	r2, #1
 8004ede:	409a      	lsls	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004eec:	0a52      	lsrs	r2, r2, #9
 8004eee:	fb03 f202 	mul.w	r2, r3, r2
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004efc:	661a      	str	r2, [r3, #96]	; 0x60
 8004efe:	e031      	b.n	8004f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d11d      	bne.n	8004f44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	3301      	adds	r3, #1
 8004f24:	029a      	lsls	r2, r3, #10
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	661a      	str	r2, [r3, #96]	; 0x60
 8004f42:	e00f      	b.n	8004f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a58      	ldr	r2, [pc, #352]	; (80050ac <HAL_SD_GetCardCSD+0x344>)
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e09d      	b.n	80050a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f68:	0b9b      	lsrs	r3, r3, #14
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7a:	09db      	lsrs	r3, r3, #7
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	0fdb      	lsrs	r3, r3, #31
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	0f5b      	lsrs	r3, r3, #29
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	0e9b      	lsrs	r3, r3, #26
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	0d9b      	lsrs	r3, r3, #22
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	0d5b      	lsrs	r3, r3, #21
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	0c1b      	lsrs	r3, r3, #16
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	b2da      	uxtb	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	0bdb      	lsrs	r3, r3, #15
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	b2da      	uxtb	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	0b9b      	lsrs	r3, r3, #14
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	0b5b      	lsrs	r3, r3, #13
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	0b1b      	lsrs	r3, r3, #12
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	0a9b      	lsrs	r3, r3, #10
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	b2da      	uxtb	r2, r3
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800508e:	b2da      	uxtb	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	004005ff 	.word	0x004005ff

080050b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005108:	b5b0      	push	{r4, r5, r7, lr}
 800510a:	b08e      	sub	sp, #56	; 0x38
 800510c:	af04      	add	r7, sp, #16
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2203      	movs	r2, #3
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005124:	2b03      	cmp	r3, #3
 8005126:	d02e      	beq.n	8005186 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d106      	bne.n	800513e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
 800513c:	e029      	b.n	8005192 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005144:	d10a      	bne.n	800515c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa1c 	bl	8005584 <SD_WideBus_Enable>
 800514c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
 800515a:	e01a      	b.n	8005192 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa59 	bl	800561a <SD_WideBus_Disable>
 8005168:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
 8005176:	e00c      	b.n	8005192 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
 8005184:	e005      	b.n	8005192 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a26      	ldr	r2, [pc, #152]	; (8005238 <HAL_SD_ConfigWideBusOperation+0x130>)
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80051b0:	e01f      	b.n	80051f2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681d      	ldr	r5, [r3, #0]
 80051d8:	466c      	mov	r4, sp
 80051da:	f107 0314 	add.w	r3, r7, #20
 80051de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ec:	4628      	mov	r0, r5
 80051ee:	f001 fa45 	bl	800667c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fb19 	bl	8006832 <SDMMC_CmdBlockLength>
 8005200:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00c      	beq.n	8005222 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <HAL_SD_ConfigWideBusOperation+0x130>)
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800522a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800522e:	4618      	mov	r0, r3
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bdb0      	pop	{r4, r5, r7, pc}
 8005236:	bf00      	nop
 8005238:	004005ff 	.word	0x004005ff

0800523c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005248:	f107 030c 	add.w	r3, r7, #12
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f970 	bl	8005534 <SD_SendStatus>
 8005254:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005272:	693b      	ldr	r3, [r7, #16]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800527c:	b5b0      	push	{r4, r5, r7, lr}
 800527e:	b094      	sub	sp, #80	; 0x50
 8005280:	af04      	add	r7, sp, #16
 8005282:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005284:	2301      	movs	r3, #1
 8005286:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fa4c 	bl	800672a <SDIO_GetPowerState>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005298:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800529c:	e0b8      	b.n	8005410 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d02f      	beq.n	8005306 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 fc76 	bl	8006b9c <SDMMC_CmdSendCID>
 80052b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <SD_InitCard+0x40>
    {
      return errorstate;
 80052b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ba:	e0a9      	b.n	8005410 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fa76 	bl	80067b4 <SDIO_GetResponse>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2104      	movs	r1, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 fa6d 	bl	80067b4 <SDIO_GetResponse>
 80052da:	4602      	mov	r2, r0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2108      	movs	r1, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fa64 	bl	80067b4 <SDIO_GetResponse>
 80052ec:	4602      	mov	r2, r0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	210c      	movs	r1, #12
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 fa5b 	bl	80067b4 <SDIO_GetResponse>
 80052fe:	4602      	mov	r2, r0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	2b03      	cmp	r3, #3
 800530c:	d00d      	beq.n	800532a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f107 020e 	add.w	r2, r7, #14
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f001 fc7c 	bl	8006c16 <SDMMC_CmdSetRelAdd>
 800531e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <SD_InitCard+0xae>
    {
      return errorstate;
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	e072      	b.n	8005410 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	2b03      	cmp	r3, #3
 8005330:	d036      	beq.n	80053a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f001 fc46 	bl	8006bd8 <SDMMC_CmdSendCSD>
 800534c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800534e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005356:	e05b      	b.n	8005410 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f001 fa28 	bl	80067b4 <SDIO_GetResponse>
 8005364:	4602      	mov	r2, r0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2104      	movs	r1, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f001 fa1f 	bl	80067b4 <SDIO_GetResponse>
 8005376:	4602      	mov	r2, r0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2108      	movs	r1, #8
 8005382:	4618      	mov	r0, r3
 8005384:	f001 fa16 	bl	80067b4 <SDIO_GetResponse>
 8005388:	4602      	mov	r2, r0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	210c      	movs	r1, #12
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fa0d 	bl	80067b4 <SDIO_GetResponse>
 800539a:	4602      	mov	r2, r0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2104      	movs	r1, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 fa04 	bl	80067b4 <SDIO_GetResponse>
 80053ac:	4603      	mov	r3, r0
 80053ae:	0d1a      	lsrs	r2, r3, #20
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053b4:	f107 0310 	add.w	r3, r7, #16
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fcd4 	bl	8004d68 <HAL_SD_GetCardCSD>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053ca:	e021      	b.n	8005410 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	2200      	movs	r2, #0
 80053d8:	461c      	mov	r4, r3
 80053da:	4615      	mov	r5, r2
 80053dc:	4622      	mov	r2, r4
 80053de:	462b      	mov	r3, r5
 80053e0:	4608      	mov	r0, r1
 80053e2:	f001 faf3 	bl	80069cc <SDMMC_CmdSelDesel>
 80053e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <SD_InitCard+0x176>
  {
    return errorstate;
 80053ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f0:	e00e      	b.n	8005410 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681d      	ldr	r5, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	466c      	mov	r4, sp
 80053fa:	f103 0210 	add.w	r2, r3, #16
 80053fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8005400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005404:	3304      	adds	r3, #4
 8005406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005408:	4628      	mov	r0, r5
 800540a:	f001 f937 	bl	800667c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3740      	adds	r7, #64	; 0x40
 8005414:	46bd      	mov	sp, r7
 8005416:	bdb0      	pop	{r4, r5, r7, pc}

08005418 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f001 faee 	bl	8006a12 <SDMMC_CmdGoIdleState>
 8005436:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <SD_PowerON+0x2a>
  {
    return errorstate;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	e072      	b.n	8005528 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fb01 	bl	8006a4e <SDMMC_CmdOperCond>
 800544c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fad7 	bl	8006a12 <SDMMC_CmdGoIdleState>
 8005464:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <SD_PowerON+0x5e>
    {
      return errorstate;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	e05b      	b.n	8005528 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547a:	2b01      	cmp	r3, #1
 800547c:	d137      	bne.n	80054ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fb01 	bl	8006a8c <SDMMC_CmdAppCommand>
 800548a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02d      	beq.n	80054ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005492:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005496:	e047      	b.n	8005528 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 faf4 	bl	8006a8c <SDMMC_CmdAppCommand>
 80054a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	e03b      	b.n	8005528 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	491e      	ldr	r1, [pc, #120]	; (8005530 <SD_PowerON+0x118>)
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fb0a 	bl	8006ad0 <SDMMC_CmdAppOperCommand>
 80054bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054c8:	e02e      	b.n	8005528 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f96f 	bl	80067b4 <SDIO_GetResponse>
 80054d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	0fdb      	lsrs	r3, r3, #31
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <SD_PowerON+0xcc>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <SD_PowerON+0xce>
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]

    count++;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d802      	bhi.n	80054fe <SD_PowerON+0xe6>
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0cc      	beq.n	8005498 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005504:	4293      	cmp	r3, r2
 8005506:	d902      	bls.n	800550e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800550c:	e00c      	b.n	8005528 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
 800551e:	e002      	b.n	8005526 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	c1100000 	.word	0xc1100000

08005534 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005548:	e018      	b.n	800557c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f001 fb7e 	bl	8006c58 <SDMMC_CmdSendStatus>
 800555c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	e009      	b.n	800557c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f001 f920 	bl	80067b4 <SDIO_GetResponse>
 8005574:	4602      	mov	r2, r0
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f90a 	bl	80067b4 <SDIO_GetResponse>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055aa:	d102      	bne.n	80055b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055b0:	e02f      	b.n	8005612 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80055b2:	f107 030c 	add.w	r3, r7, #12
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f879 	bl	80056b0 <SD_FindSCR>
 80055be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	e023      	b.n	8005612 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01c      	beq.n	800560e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	041b      	lsls	r3, r3, #16
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f001 fa53 	bl	8006a8c <SDMMC_CmdAppCommand>
 80055e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	e00f      	b.n	8005612 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2102      	movs	r1, #2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f001 fa8c 	bl	8006b16 <SDMMC_CmdBusWidth>
 80055fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	e003      	b.n	8005612 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800560a:	2300      	movs	r3, #0
 800560c:	e001      	b.n	8005612 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800560e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f001 f8bf 	bl	80067b4 <SDIO_GetResponse>
 8005636:	4603      	mov	r3, r0
 8005638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005640:	d102      	bne.n	8005648 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005646:	e02f      	b.n	80056a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005648:	f107 030c 	add.w	r3, r7, #12
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f82e 	bl	80056b0 <SD_FindSCR>
 8005654:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	e023      	b.n	80056a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01c      	beq.n	80056a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f001 fa08 	bl	8006a8c <SDMMC_CmdAppCommand>
 800567c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	e00f      	b.n	80056a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f001 fa41 	bl	8006b16 <SDMMC_CmdBusWidth>
 8005694:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	e003      	b.n	80056a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e001      	b.n	80056a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b08f      	sub	sp, #60	; 0x3c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056ba:	f7fc fedb 	bl	8002474 <HAL_GetTick>
 80056be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80056c4:	2300      	movs	r3, #0
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2108      	movs	r1, #8
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 f8ab 	bl	8006832 <SDMMC_CmdBlockLength>
 80056dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	e0b2      	b.n	800584e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f001 f9c9 	bl	8006a8c <SDMMC_CmdAppCommand>
 80056fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	e0a3      	b.n	800584e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800570c:	2308      	movs	r3, #8
 800570e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005710:	2330      	movs	r3, #48	; 0x30
 8005712:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005714:	2302      	movs	r3, #2
 8005716:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005718:	2300      	movs	r3, #0
 800571a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800571c:	2301      	movs	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f107 0210 	add.w	r2, r7, #16
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f855 	bl	80067da <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f001 fa10 	bl	8006b5a <SDMMC_CmdSendSCR>
 800573a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02a      	beq.n	8005798 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	e083      	b.n	800584e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00f      	beq.n	8005774 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6819      	ldr	r1, [r3, #0]
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	f107 0208 	add.w	r2, r7, #8
 8005760:	18d4      	adds	r4, r2, r3
 8005762:	4608      	mov	r0, r1
 8005764:	f000 ffb5 	bl	80066d2 <SDIO_ReadFIFO>
 8005768:	4603      	mov	r3, r0
 800576a:	6023      	str	r3, [r4, #0]
      index++;
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	3301      	adds	r3, #1
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
 8005772:	e006      	b.n	8005782 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d012      	beq.n	80057a8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005782:	f7fc fe77 	bl	8002474 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d102      	bne.n	8005798 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005792:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005796:	e05a      	b.n	800584e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0cf      	beq.n	8005746 <SD_FindSCR+0x96>
 80057a6:	e000      	b.n	80057aa <SD_FindSCR+0xfa>
      break;
 80057a8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2208      	movs	r2, #8
 80057be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80057c0:	2308      	movs	r3, #8
 80057c2:	e044      	b.n	800584e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2202      	movs	r2, #2
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80057da:	2302      	movs	r3, #2
 80057dc:	e037      	b.n	800584e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2220      	movs	r2, #32
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80057f4:	2320      	movs	r3, #32
 80057f6:	e02a      	b.n	800584e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005800:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	061a      	lsls	r2, r3, #24
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800580e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005818:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0e1b      	lsrs	r3, r3, #24
 800581e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	601a      	str	r2, [r3, #0]
    scr++;
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	3304      	adds	r3, #4
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	061a      	lsls	r2, r3, #24
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005836:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005840:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	0e1b      	lsrs	r3, r3, #24
 8005846:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	373c      	adds	r7, #60	; 0x3c
 8005852:	46bd      	mov	sp, r7
 8005854:	bd90      	pop	{r4, r7, pc}

08005856 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e03f      	b.n	80058e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fc fbc9 	bl	8002014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2224      	movs	r2, #36	; 0x24
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005898:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fc7a 	bl	8006194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b0ba      	sub	sp, #232	; 0xe8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800591c:	2300      	movs	r3, #0
 800591e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800592e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_UART_IRQHandler+0x66>
 8005942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fb65 	bl	800601e <UART_Receive_IT>
      return;
 8005954:	e256      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80de 	beq.w	8005b1c <HAL_UART_IRQHandler+0x22c>
 8005960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005970:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80d1 	beq.w	8005b1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <HAL_UART_IRQHandler+0xae>
 8005986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <HAL_UART_IRQHandler+0xd2>
 80059aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0202 	orr.w	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0xf6>
 80059ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0204 	orr.w	r2, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d011      	beq.n	8005a16 <HAL_UART_IRQHandler+0x126>
 80059f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d105      	bne.n	8005a0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0208 	orr.w	r2, r3, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 81ed 	beq.w	8005dfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_UART_IRQHandler+0x14e>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 faf0 	bl	800601e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2301      	moveq	r3, #1
 8005a4e:	2300      	movne	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <HAL_UART_IRQHandler+0x17a>
 8005a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d04f      	beq.n	8005b0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9f8 	bl	8005e60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d141      	bne.n	8005b02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1d9      	bne.n	8005a7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d013      	beq.n	8005afa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	4a7d      	ldr	r2, [pc, #500]	; (8005ccc <HAL_UART_IRQHandler+0x3dc>)
 8005ad8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fc fe79 	bl	80027d6 <HAL_DMA_Abort_IT>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005af4:	4610      	mov	r0, r2
 8005af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e00e      	b.n	8005b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f99a 	bl	8005e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	e00a      	b.n	8005b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f996 	bl	8005e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	e006      	b.n	8005b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f992 	bl	8005e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b16:	e170      	b.n	8005dfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	bf00      	nop
    return;
 8005b1a:	e16e      	b.n	8005dfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 814a 	bne.w	8005dba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8143 	beq.w	8005dba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 813c 	beq.w	8005dba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	f040 80b4 	bne.w	8005cd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8140 	beq.w	8005dfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b86:	429a      	cmp	r2, r3
 8005b88:	f080 8139 	bcs.w	8005dfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9e:	f000 8088 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1d9      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e1      	bne.n	8005bee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3314      	adds	r3, #20
 8005c30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3314      	adds	r3, #20
 8005c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e3      	bne.n	8005c2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c82:	f023 0310 	bic.w	r3, r3, #16
 8005c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c94:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e3      	bne.n	8005c70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fc fd22 	bl	80026f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8c0 	bl	8005e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cc8:	e099      	b.n	8005dfe <HAL_UART_IRQHandler+0x50e>
 8005cca:	bf00      	nop
 8005ccc:	08005f27 	.word	0x08005f27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 808b 	beq.w	8005e02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8086 	beq.w	8005e02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e3      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3314      	adds	r3, #20
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d52:	633a      	str	r2, [r7, #48]	; 0x30
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e3      	bne.n	8005d2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0310 	bic.w	r3, r3, #16
 8005d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d98:	61fa      	str	r2, [r7, #28]
 8005d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	69b9      	ldr	r1, [r7, #24]
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	617b      	str	r3, [r7, #20]
   return(result);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e3      	bne.n	8005d74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f848 	bl	8005e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005db8:	e023      	b.n	8005e02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_UART_IRQHandler+0x4ea>
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8bb 	bl	8005f4e <UART_Transmit_IT>
    return;
 8005dd8:	e014      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00e      	beq.n	8005e04 <HAL_UART_IRQHandler+0x514>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8fb 	bl	8005fee <UART_EndTransmit_IT>
    return;
 8005df8:	e004      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
    return;
 8005dfa:	bf00      	nop
 8005dfc:	e002      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
      return;
 8005dfe:	bf00      	nop
 8005e00:	e000      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
      return;
 8005e02:	bf00      	nop
  }
}
 8005e04:	37e8      	adds	r7, #232	; 0xe8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop

08005e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b095      	sub	sp, #84	; 0x54
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e88:	643a      	str	r2, [r7, #64]	; 0x40
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e5      	bne.n	8005e68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d119      	bne.n	8005f0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	330c      	adds	r3, #12
 8005ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0310 	bic.w	r3, r3, #16
 8005eee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	330c      	adds	r3, #12
 8005ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef8:	61ba      	str	r2, [r7, #24]
 8005efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6979      	ldr	r1, [r7, #20]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	613b      	str	r3, [r7, #16]
   return(result);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e5      	bne.n	8005ed8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f1a:	bf00      	nop
 8005f1c:	3754      	adds	r7, #84	; 0x54
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff ff77 	bl	8005e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b21      	cmp	r3, #33	; 0x21
 8005f60:	d13e      	bne.n	8005fe0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6a:	d114      	bne.n	8005f96 <UART_Transmit_IT+0x48>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d110      	bne.n	8005f96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	1c9a      	adds	r2, r3, #2
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	621a      	str	r2, [r3, #32]
 8005f94:	e008      	b.n	8005fa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	1c59      	adds	r1, r3, #1
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6211      	str	r1, [r2, #32]
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10f      	bne.n	8005fdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e000      	b.n	8005fe2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fe0:	2302      	movs	r3, #2
  }
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fefc 	bl	8005e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b08c      	sub	sp, #48	; 0x30
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b22      	cmp	r3, #34	; 0x22
 8006030:	f040 80ab 	bne.w	800618a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603c:	d117      	bne.n	800606e <UART_Receive_IT+0x50>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d113      	bne.n	800606e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006046:	2300      	movs	r3, #0
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605c:	b29a      	uxth	r2, r3
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	1c9a      	adds	r2, r3, #2
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28
 800606c:	e026      	b.n	80060bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d007      	beq.n	8006092 <UART_Receive_IT+0x74>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <UART_Receive_IT+0x82>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e008      	b.n	80060b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4619      	mov	r1, r3
 80060ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d15a      	bne.n	8006186 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0220 	bic.w	r2, r2, #32
 80060de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	2b01      	cmp	r3, #1
 800610e:	d135      	bne.n	800617c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	613b      	str	r3, [r7, #16]
   return(result);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f023 0310 	bic.w	r3, r3, #16
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	330c      	adds	r3, #12
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	623a      	str	r2, [r7, #32]
 8006138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	69f9      	ldr	r1, [r7, #28]
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	61bb      	str	r3, [r7, #24]
   return(result);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e5      	bne.n	8006116 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b10      	cmp	r3, #16
 8006156:	d10a      	bne.n	800616e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fe67 	bl	8005e48 <HAL_UARTEx_RxEventCallback>
 800617a:	e002      	b.n	8006182 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fe4f 	bl	8005e20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e002      	b.n	800618c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e000      	b.n	800618c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800618a:	2302      	movs	r3, #2
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	3730      	adds	r7, #48	; 0x30
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006198:	b0c0      	sub	sp, #256	; 0x100
 800619a:	af00      	add	r7, sp, #0
 800619c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	68d9      	ldr	r1, [r3, #12]
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	ea40 0301 	orr.w	r3, r0, r1
 80061bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061ec:	f021 010c 	bic.w	r1, r1, #12
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061fa:	430b      	orrs	r3, r1
 80061fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	6999      	ldr	r1, [r3, #24]
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	ea40 0301 	orr.w	r3, r0, r1
 800621a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b8f      	ldr	r3, [pc, #572]	; (8006460 <UART_SetConfig+0x2cc>)
 8006224:	429a      	cmp	r2, r3
 8006226:	d005      	beq.n	8006234 <UART_SetConfig+0xa0>
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b8d      	ldr	r3, [pc, #564]	; (8006464 <UART_SetConfig+0x2d0>)
 8006230:	429a      	cmp	r2, r3
 8006232:	d104      	bne.n	800623e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006234:	f7fe f970 	bl	8004518 <HAL_RCC_GetPCLK2Freq>
 8006238:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800623c:	e003      	b.n	8006246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800623e:	f7fe f957 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8006242:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006250:	f040 810c 	bne.w	800646c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006258:	2200      	movs	r2, #0
 800625a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800625e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006266:	4622      	mov	r2, r4
 8006268:	462b      	mov	r3, r5
 800626a:	1891      	adds	r1, r2, r2
 800626c:	65b9      	str	r1, [r7, #88]	; 0x58
 800626e:	415b      	adcs	r3, r3
 8006270:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006276:	4621      	mov	r1, r4
 8006278:	eb12 0801 	adds.w	r8, r2, r1
 800627c:	4629      	mov	r1, r5
 800627e:	eb43 0901 	adc.w	r9, r3, r1
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800628e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006296:	4690      	mov	r8, r2
 8006298:	4699      	mov	r9, r3
 800629a:	4623      	mov	r3, r4
 800629c:	eb18 0303 	adds.w	r3, r8, r3
 80062a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062a4:	462b      	mov	r3, r5
 80062a6:	eb49 0303 	adc.w	r3, r9, r3
 80062aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062c2:	460b      	mov	r3, r1
 80062c4:	18db      	adds	r3, r3, r3
 80062c6:	653b      	str	r3, [r7, #80]	; 0x50
 80062c8:	4613      	mov	r3, r2
 80062ca:	eb42 0303 	adc.w	r3, r2, r3
 80062ce:	657b      	str	r3, [r7, #84]	; 0x54
 80062d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062d8:	f7fa fae8 	bl	80008ac <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4b61      	ldr	r3, [pc, #388]	; (8006468 <UART_SetConfig+0x2d4>)
 80062e2:	fba3 2302 	umull	r2, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	011c      	lsls	r4, r3, #4
 80062ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	1891      	adds	r1, r2, r2
 8006302:	64b9      	str	r1, [r7, #72]	; 0x48
 8006304:	415b      	adcs	r3, r3
 8006306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800630c:	4641      	mov	r1, r8
 800630e:	eb12 0a01 	adds.w	sl, r2, r1
 8006312:	4649      	mov	r1, r9
 8006314:	eb43 0b01 	adc.w	fp, r3, r1
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800632c:	4692      	mov	sl, r2
 800632e:	469b      	mov	fp, r3
 8006330:	4643      	mov	r3, r8
 8006332:	eb1a 0303 	adds.w	r3, sl, r3
 8006336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800633a:	464b      	mov	r3, r9
 800633c:	eb4b 0303 	adc.w	r3, fp, r3
 8006340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006350:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006358:	460b      	mov	r3, r1
 800635a:	18db      	adds	r3, r3, r3
 800635c:	643b      	str	r3, [r7, #64]	; 0x40
 800635e:	4613      	mov	r3, r2
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	647b      	str	r3, [r7, #68]	; 0x44
 8006366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800636a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800636e:	f7fa fa9d 	bl	80008ac <__aeabi_uldivmod>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4611      	mov	r1, r2
 8006378:	4b3b      	ldr	r3, [pc, #236]	; (8006468 <UART_SetConfig+0x2d4>)
 800637a:	fba3 2301 	umull	r2, r3, r3, r1
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	2264      	movs	r2, #100	; 0x64
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	1acb      	subs	r3, r1, r3
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800638e:	4b36      	ldr	r3, [pc, #216]	; (8006468 <UART_SetConfig+0x2d4>)
 8006390:	fba3 2302 	umull	r2, r3, r3, r2
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800639c:	441c      	add	r4, r3
 800639e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	1891      	adds	r1, r2, r2
 80063b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80063b8:	415b      	adcs	r3, r3
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063c0:	4641      	mov	r1, r8
 80063c2:	1851      	adds	r1, r2, r1
 80063c4:	6339      	str	r1, [r7, #48]	; 0x30
 80063c6:	4649      	mov	r1, r9
 80063c8:	414b      	adcs	r3, r1
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063d8:	4659      	mov	r1, fp
 80063da:	00cb      	lsls	r3, r1, #3
 80063dc:	4651      	mov	r1, sl
 80063de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e2:	4651      	mov	r1, sl
 80063e4:	00ca      	lsls	r2, r1, #3
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	4642      	mov	r2, r8
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063f4:	464b      	mov	r3, r9
 80063f6:	460a      	mov	r2, r1
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800640c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006414:	460b      	mov	r3, r1
 8006416:	18db      	adds	r3, r3, r3
 8006418:	62bb      	str	r3, [r7, #40]	; 0x28
 800641a:	4613      	mov	r3, r2
 800641c:	eb42 0303 	adc.w	r3, r2, r3
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800642a:	f7fa fa3f 	bl	80008ac <__aeabi_uldivmod>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <UART_SetConfig+0x2d4>)
 8006434:	fba3 1302 	umull	r1, r3, r3, r2
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	2164      	movs	r1, #100	; 0x64
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	3332      	adds	r3, #50	; 0x32
 8006446:	4a08      	ldr	r2, [pc, #32]	; (8006468 <UART_SetConfig+0x2d4>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	f003 0207 	and.w	r2, r3, #7
 8006452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4422      	add	r2, r4
 800645a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800645c:	e105      	b.n	800666a <UART_SetConfig+0x4d6>
 800645e:	bf00      	nop
 8006460:	40011000 	.word	0x40011000
 8006464:	40011400 	.word	0x40011400
 8006468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800646c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006470:	2200      	movs	r2, #0
 8006472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006476:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800647a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800647e:	4642      	mov	r2, r8
 8006480:	464b      	mov	r3, r9
 8006482:	1891      	adds	r1, r2, r2
 8006484:	6239      	str	r1, [r7, #32]
 8006486:	415b      	adcs	r3, r3
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
 800648a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800648e:	4641      	mov	r1, r8
 8006490:	1854      	adds	r4, r2, r1
 8006492:	4649      	mov	r1, r9
 8006494:	eb43 0501 	adc.w	r5, r3, r1
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	00eb      	lsls	r3, r5, #3
 80064a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064a6:	00e2      	lsls	r2, r4, #3
 80064a8:	4614      	mov	r4, r2
 80064aa:	461d      	mov	r5, r3
 80064ac:	4643      	mov	r3, r8
 80064ae:	18e3      	adds	r3, r4, r3
 80064b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064b4:	464b      	mov	r3, r9
 80064b6:	eb45 0303 	adc.w	r3, r5, r3
 80064ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064da:	4629      	mov	r1, r5
 80064dc:	008b      	lsls	r3, r1, #2
 80064de:	4621      	mov	r1, r4
 80064e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e4:	4621      	mov	r1, r4
 80064e6:	008a      	lsls	r2, r1, #2
 80064e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064ec:	f7fa f9de 	bl	80008ac <__aeabi_uldivmod>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4b60      	ldr	r3, [pc, #384]	; (8006678 <UART_SetConfig+0x4e4>)
 80064f6:	fba3 2302 	umull	r2, r3, r3, r2
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	011c      	lsls	r4, r3, #4
 80064fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006502:	2200      	movs	r2, #0
 8006504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006508:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800650c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006510:	4642      	mov	r2, r8
 8006512:	464b      	mov	r3, r9
 8006514:	1891      	adds	r1, r2, r2
 8006516:	61b9      	str	r1, [r7, #24]
 8006518:	415b      	adcs	r3, r3
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006520:	4641      	mov	r1, r8
 8006522:	1851      	adds	r1, r2, r1
 8006524:	6139      	str	r1, [r7, #16]
 8006526:	4649      	mov	r1, r9
 8006528:	414b      	adcs	r3, r1
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006538:	4659      	mov	r1, fp
 800653a:	00cb      	lsls	r3, r1, #3
 800653c:	4651      	mov	r1, sl
 800653e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006542:	4651      	mov	r1, sl
 8006544:	00ca      	lsls	r2, r1, #3
 8006546:	4610      	mov	r0, r2
 8006548:	4619      	mov	r1, r3
 800654a:	4603      	mov	r3, r0
 800654c:	4642      	mov	r2, r8
 800654e:	189b      	adds	r3, r3, r2
 8006550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006554:	464b      	mov	r3, r9
 8006556:	460a      	mov	r2, r1
 8006558:	eb42 0303 	adc.w	r3, r2, r3
 800655c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	67bb      	str	r3, [r7, #120]	; 0x78
 800656a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006578:	4649      	mov	r1, r9
 800657a:	008b      	lsls	r3, r1, #2
 800657c:	4641      	mov	r1, r8
 800657e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006582:	4641      	mov	r1, r8
 8006584:	008a      	lsls	r2, r1, #2
 8006586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800658a:	f7fa f98f 	bl	80008ac <__aeabi_uldivmod>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4b39      	ldr	r3, [pc, #228]	; (8006678 <UART_SetConfig+0x4e4>)
 8006594:	fba3 1302 	umull	r1, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	2164      	movs	r1, #100	; 0x64
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	3332      	adds	r3, #50	; 0x32
 80065a6:	4a34      	ldr	r2, [pc, #208]	; (8006678 <UART_SetConfig+0x4e4>)
 80065a8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065b2:	441c      	add	r4, r3
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	673b      	str	r3, [r7, #112]	; 0x70
 80065bc:	677a      	str	r2, [r7, #116]	; 0x74
 80065be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065c2:	4642      	mov	r2, r8
 80065c4:	464b      	mov	r3, r9
 80065c6:	1891      	adds	r1, r2, r2
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	415b      	adcs	r3, r3
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065d2:	4641      	mov	r1, r8
 80065d4:	1851      	adds	r1, r2, r1
 80065d6:	6039      	str	r1, [r7, #0]
 80065d8:	4649      	mov	r1, r9
 80065da:	414b      	adcs	r3, r1
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065ea:	4659      	mov	r1, fp
 80065ec:	00cb      	lsls	r3, r1, #3
 80065ee:	4651      	mov	r1, sl
 80065f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065f4:	4651      	mov	r1, sl
 80065f6:	00ca      	lsls	r2, r1, #3
 80065f8:	4610      	mov	r0, r2
 80065fa:	4619      	mov	r1, r3
 80065fc:	4603      	mov	r3, r0
 80065fe:	4642      	mov	r2, r8
 8006600:	189b      	adds	r3, r3, r2
 8006602:	66bb      	str	r3, [r7, #104]	; 0x68
 8006604:	464b      	mov	r3, r9
 8006606:	460a      	mov	r2, r1
 8006608:	eb42 0303 	adc.w	r3, r2, r3
 800660c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	663b      	str	r3, [r7, #96]	; 0x60
 8006618:	667a      	str	r2, [r7, #100]	; 0x64
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006626:	4649      	mov	r1, r9
 8006628:	008b      	lsls	r3, r1, #2
 800662a:	4641      	mov	r1, r8
 800662c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006630:	4641      	mov	r1, r8
 8006632:	008a      	lsls	r2, r1, #2
 8006634:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006638:	f7fa f938 	bl	80008ac <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <UART_SetConfig+0x4e4>)
 8006642:	fba3 1302 	umull	r1, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	2164      	movs	r1, #100	; 0x64
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	3332      	adds	r3, #50	; 0x32
 8006654:	4a08      	ldr	r2, [pc, #32]	; (8006678 <UART_SetConfig+0x4e4>)
 8006656:	fba2 2303 	umull	r2, r3, r2, r3
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	f003 020f 	and.w	r2, r3, #15
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4422      	add	r2, r4
 8006668:	609a      	str	r2, [r3, #8]
}
 800666a:	bf00      	nop
 800666c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006670:	46bd      	mov	sp, r7
 8006672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006676:	bf00      	nop
 8006678:	51eb851f 	.word	0x51eb851f

0800667c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800667c:	b084      	sub	sp, #16
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	f107 001c 	add.w	r0, r7, #28
 800668a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006692:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006694:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006696:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800669a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800669e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80066a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80066a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80066b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	b004      	add	sp, #16
 80066d0:	4770      	bx	lr

080066d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2203      	movs	r2, #3
 800671a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0303 	and.w	r3, r3, #3
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006764:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800676a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006770:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006780:	f023 030f 	bic.w	r3, r3, #15
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	b2db      	uxtb	r3, r3
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3314      	adds	r3, #20
 80067c2:	461a      	mov	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
}  
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006800:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006806:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800680c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006824:	2300      	movs	r3, #0

}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b088      	sub	sp, #32
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006840:	2310      	movs	r3, #16
 8006842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006844:	2340      	movs	r3, #64	; 0x40
 8006846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800684c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff74 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800685e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006862:	2110      	movs	r1, #16
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa19 	bl	8006c9c <SDMMC_GetCmdResp1>
 800686a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800686c:	69fb      	ldr	r3, [r7, #28]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b088      	sub	sp, #32
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006884:	2311      	movs	r3, #17
 8006886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006888:	2340      	movs	r3, #64	; 0x40
 800688a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006894:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006896:	f107 0308 	add.w	r3, r7, #8
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ff52 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80068a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a6:	2111      	movs	r1, #17
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f9f7 	bl	8006c9c <SDMMC_GetCmdResp1>
 80068ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068b0:	69fb      	ldr	r3, [r7, #28]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b088      	sub	sp, #32
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80068c8:	2312      	movs	r3, #18
 80068ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068cc:	2340      	movs	r3, #64	; 0x40
 80068ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff30 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80068e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ea:	2112      	movs	r1, #18
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f9d5 	bl	8006c9c <SDMMC_GetCmdResp1>
 80068f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068f4:	69fb      	ldr	r3, [r7, #28]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3720      	adds	r7, #32
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b088      	sub	sp, #32
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800690c:	2318      	movs	r3, #24
 800690e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006910:	2340      	movs	r3, #64	; 0x40
 8006912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800691c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800691e:	f107 0308 	add.w	r3, r7, #8
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff0e 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800692a:	f241 3288 	movw	r2, #5000	; 0x1388
 800692e:	2118      	movs	r1, #24
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f9b3 	bl	8006c9c <SDMMC_GetCmdResp1>
 8006936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006938:	69fb      	ldr	r3, [r7, #28]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b088      	sub	sp, #32
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006950:	2319      	movs	r3, #25
 8006952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006954:	2340      	movs	r3, #64	; 0x40
 8006956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800695c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff feec 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800696e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006972:	2119      	movs	r1, #25
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f991 	bl	8006c9c <SDMMC_GetCmdResp1>
 800697a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800697c:	69fb      	ldr	r3, [r7, #28]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006994:	230c      	movs	r3, #12
 8006996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a6:	f107 0308 	add.w	r3, r7, #8
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff feca 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80069b2:	4a05      	ldr	r2, [pc, #20]	; (80069c8 <SDMMC_CmdStopTransfer+0x40>)
 80069b4:	210c      	movs	r1, #12
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f970 	bl	8006c9c <SDMMC_GetCmdResp1>
 80069bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069be:	69fb      	ldr	r3, [r7, #28]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	05f5e100 	.word	0x05f5e100

080069cc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	; 0x28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80069dc:	2307      	movs	r3, #7
 80069de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069ee:	f107 0310 	add.w	r3, r7, #16
 80069f2:	4619      	mov	r1, r3
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff fea6 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80069fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fe:	2107      	movs	r1, #7
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f94b 	bl	8006c9c <SDMMC_GetCmdResp1>
 8006a06:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3728      	adds	r7, #40	; 0x28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b088      	sub	sp, #32
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a30:	f107 0308 	add.w	r3, r7, #8
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff fe85 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb65 	bl	800710c <SDMMC_GetCmdError>
 8006a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a44:	69fb      	ldr	r3, [r7, #28]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3720      	adds	r7, #32
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b088      	sub	sp, #32
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006a56:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a60:	2340      	movs	r3, #64	; 0x40
 8006a62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a6e:	f107 0308 	add.w	r3, r7, #8
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fe66 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 faf8 	bl	8007070 <SDMMC_GetCmdResp7>
 8006a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a82:	69fb      	ldr	r3, [r7, #28]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006a9a:	2337      	movs	r3, #55	; 0x37
 8006a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a9e:	2340      	movs	r3, #64	; 0x40
 8006aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aac:	f107 0308 	add.w	r3, r7, #8
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff fe47 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006abc:	2137      	movs	r1, #55	; 0x37
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8ec 	bl	8006c9c <SDMMC_GetCmdResp1>
 8006ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006ae6:	2329      	movs	r3, #41	; 0x29
 8006ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006aea:	2340      	movs	r3, #64	; 0x40
 8006aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006af8:	f107 0308 	add.w	r3, r7, #8
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fe21 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9ff 	bl	8006f08 <SDMMC_GetCmdResp3>
 8006b0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3720      	adds	r7, #32
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b088      	sub	sp, #32
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006b24:	2306      	movs	r3, #6
 8006b26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b36:	f107 0308 	add.w	r3, r7, #8
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff fe02 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b46:	2106      	movs	r1, #6
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f8a7 	bl	8006c9c <SDMMC_GetCmdResp1>
 8006b4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b50:	69fb      	ldr	r3, [r7, #28]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3720      	adds	r7, #32
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b088      	sub	sp, #32
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006b66:	2333      	movs	r3, #51	; 0x33
 8006b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b78:	f107 0308 	add.w	r3, r7, #8
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fde1 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b88:	2133      	movs	r1, #51	; 0x33
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f886 	bl	8006c9c <SDMMC_GetCmdResp1>
 8006b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b92:	69fb      	ldr	r3, [r7, #28]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006bac:	23c0      	movs	r3, #192	; 0xc0
 8006bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bba:	f107 0308 	add.w	r3, r7, #8
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fdc0 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f956 	bl	8006e78 <SDMMC_GetCmdResp2>
 8006bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bce:	69fb      	ldr	r3, [r7, #28]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006be6:	2309      	movs	r3, #9
 8006be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006bea:	23c0      	movs	r3, #192	; 0xc0
 8006bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fda1 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f937 	bl	8006e78 <SDMMC_GetCmdResp2>
 8006c0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3720      	adds	r7, #32
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b088      	sub	sp, #32
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006c24:	2303      	movs	r3, #3
 8006c26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c36:	f107 0308 	add.w	r3, r7, #8
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fd82 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	2103      	movs	r1, #3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f99c 	bl	8006f84 <SDMMC_GetCmdResp6>
 8006c4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006c66:	230d      	movs	r3, #13
 8006c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c78:	f107 0308 	add.w	r3, r7, #8
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff fd61 	bl	8006746 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c88:	210d      	movs	r1, #13
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f806 	bl	8006c9c <SDMMC_GetCmdResp1>
 8006c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c92:	69fb      	ldr	r3, [r7, #28]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006caa:	4b70      	ldr	r3, [pc, #448]	; (8006e6c <SDMMC_GetCmdResp1+0x1d0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a70      	ldr	r2, [pc, #448]	; (8006e70 <SDMMC_GetCmdResp1+0x1d4>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	0a5a      	lsrs	r2, r3, #9
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	fb02 f303 	mul.w	r3, r2, r3
 8006cbc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	1e5a      	subs	r2, r3, #1
 8006cc2:	61fa      	str	r2, [r7, #28]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ccc:	e0c9      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ef      	beq.n	8006cbe <SDMMC_GetCmdResp1+0x22>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1ea      	bne.n	8006cbe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	e0b1      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0a6      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	22c5      	movs	r2, #197	; 0xc5
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff fd3d 	bl	800679a <SDIO_GetCommandResponse>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d001      	beq.n	8006d2e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e099      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006d2e:	2100      	movs	r1, #0
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fd3f 	bl	80067b4 <SDIO_GetResponse>
 8006d36:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4b4e      	ldr	r3, [pc, #312]	; (8006e74 <SDMMC_GetCmdResp1+0x1d8>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	e08d      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da02      	bge.n	8006d52 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d50:	e087      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	e080      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006d6a:	2380      	movs	r3, #128	; 0x80
 8006d6c:	e079      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d7c:	e071      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d8c:	e069      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d9c:	e061      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006dac:	e059      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dbc:	e051      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dcc:	e049      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006dd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ddc:	e041      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dec:	e039      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dfc:	e031      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e0c:	e029      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e1c:	e021      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e2c:	e019      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e3c:	e011      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006e48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e4c:	e009      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006e58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e5c:	e001      	b.n	8006e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000000 	.word	0x20000000
 8006e70:	10624dd3 	.word	0x10624dd3
 8006e74:	fdffe008 	.word	0xfdffe008

08006e78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e80:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <SDMMC_GetCmdResp2+0x88>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1f      	ldr	r2, [pc, #124]	; (8006f04 <SDMMC_GetCmdResp2+0x8c>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	0a5b      	lsrs	r3, r3, #9
 8006e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	60fa      	str	r2, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ea4:	e026      	b.n	8006ef4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0ef      	beq.n	8006e96 <SDMMC_GetCmdResp2+0x1e>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1ea      	bne.n	8006e96 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	e00e      	b.n	8006ef4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e003      	b.n	8006ef4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	22c5      	movs	r2, #197	; 0xc5
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	20000000 	.word	0x20000000
 8006f04:	10624dd3 	.word	0x10624dd3

08006f08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <SDMMC_GetCmdResp3+0x74>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1a      	ldr	r2, [pc, #104]	; (8006f80 <SDMMC_GetCmdResp3+0x78>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	0a5b      	lsrs	r3, r3, #9
 8006f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1e5a      	subs	r2, r3, #1
 8006f2a:	60fa      	str	r2, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f34:	e01b      	b.n	8006f6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0ef      	beq.n	8006f26 <SDMMC_GetCmdResp3+0x1e>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1ea      	bne.n	8006f26 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f62:	2304      	movs	r3, #4
 8006f64:	e003      	b.n	8006f6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	22c5      	movs	r2, #197	; 0xc5
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	20000000 	.word	0x20000000
 8006f80:	10624dd3 	.word	0x10624dd3

08006f84 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f92:	4b35      	ldr	r3, [pc, #212]	; (8007068 <SDMMC_GetCmdResp6+0xe4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a35      	ldr	r2, [pc, #212]	; (800706c <SDMMC_GetCmdResp6+0xe8>)
 8006f98:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9c:	0a5b      	lsrs	r3, r3, #9
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	1e5a      	subs	r2, r3, #1
 8006fac:	61fa      	str	r2, [r7, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb6:	e052      	b.n	800705e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0ef      	beq.n	8006fa8 <SDMMC_GetCmdResp6+0x24>
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1ea      	bne.n	8006fa8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d004      	beq.n	8006fe8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	e03a      	b.n	800705e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e02f      	b.n	800705e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff fbcb 	bl	800679a <SDIO_GetCommandResponse>
 8007004:	4603      	mov	r3, r0
 8007006:	461a      	mov	r2, r3
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	4293      	cmp	r3, r2
 800700c:	d001      	beq.n	8007012 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800700e:	2301      	movs	r3, #1
 8007010:	e025      	b.n	800705e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	22c5      	movs	r2, #197	; 0xc5
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007018:	2100      	movs	r1, #0
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fbca 	bl	80067b4 <SDIO_GetResponse>
 8007020:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007036:	2300      	movs	r3, #0
 8007038:	e011      	b.n	800705e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007048:	e009      	b.n	800705e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007058:	e001      	b.n	800705e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800705a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000000 	.word	0x20000000
 800706c:	10624dd3 	.word	0x10624dd3

08007070 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007078:	4b22      	ldr	r3, [pc, #136]	; (8007104 <SDMMC_GetCmdResp7+0x94>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a22      	ldr	r2, [pc, #136]	; (8007108 <SDMMC_GetCmdResp7+0x98>)
 800707e:	fba2 2303 	umull	r2, r3, r2, r3
 8007082:	0a5b      	lsrs	r3, r3, #9
 8007084:	f241 3288 	movw	r2, #5000	; 0x1388
 8007088:	fb02 f303 	mul.w	r3, r2, r3
 800708c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1e5a      	subs	r2, r3, #1
 8007092:	60fa      	str	r2, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800709c:	e02c      	b.n	80070f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0ef      	beq.n	800708e <SDMMC_GetCmdResp7+0x1e>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1ea      	bne.n	800708e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2204      	movs	r2, #4
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070ca:	2304      	movs	r3, #4
 80070cc:	e014      	b.n	80070f8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e009      	b.n	80070f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2240      	movs	r2, #64	; 0x40
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80070f6:	2300      	movs	r3, #0
  
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000000 	.word	0x20000000
 8007108:	10624dd3 	.word	0x10624dd3

0800710c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007114:	4b11      	ldr	r3, [pc, #68]	; (800715c <SDMMC_GetCmdError+0x50>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a11      	ldr	r2, [pc, #68]	; (8007160 <SDMMC_GetCmdError+0x54>)
 800711a:	fba2 2303 	umull	r2, r3, r2, r3
 800711e:	0a5b      	lsrs	r3, r3, #9
 8007120:	f241 3288 	movw	r2, #5000	; 0x1388
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1e5a      	subs	r2, r3, #1
 800712e:	60fa      	str	r2, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007134:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007138:	e009      	b.n	800714e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f1      	beq.n	800712a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	22c5      	movs	r2, #197	; 0xc5
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20000000 	.word	0x20000000
 8007160:	10624dd3 	.word	0x10624dd3

08007164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007164:	b084      	sub	sp, #16
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	f107 001c 	add.w	r0, r7, #28
 8007172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	2b01      	cmp	r3, #1
 800717a:	d122      	bne.n	80071c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d105      	bne.n	80071b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fdc0 	bl	8007d3c <USB_CoreReset>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]
 80071c0:	e01a      	b.n	80071f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fdb4 	bl	8007d3c <USB_CoreReset>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
 80071ea:	e005      	b.n	80071f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d10b      	bne.n	8007216 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f043 0206 	orr.w	r2, r3, #6
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f043 0220 	orr.w	r2, r3, #32
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007222:	b004      	add	sp, #16
 8007224:	4770      	bx	lr
	...

08007228 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d165      	bne.n	8007308 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4a41      	ldr	r2, [pc, #260]	; (8007344 <USB_SetTurnaroundTime+0x11c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d906      	bls.n	8007252 <USB_SetTurnaroundTime+0x2a>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4a40      	ldr	r2, [pc, #256]	; (8007348 <USB_SetTurnaroundTime+0x120>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d202      	bcs.n	8007252 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800724c:	230f      	movs	r3, #15
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	e062      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4a3c      	ldr	r2, [pc, #240]	; (8007348 <USB_SetTurnaroundTime+0x120>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d306      	bcc.n	8007268 <USB_SetTurnaroundTime+0x40>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4a3b      	ldr	r2, [pc, #236]	; (800734c <USB_SetTurnaroundTime+0x124>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d202      	bcs.n	8007268 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007262:	230e      	movs	r3, #14
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e057      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a38      	ldr	r2, [pc, #224]	; (800734c <USB_SetTurnaroundTime+0x124>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d306      	bcc.n	800727e <USB_SetTurnaroundTime+0x56>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4a37      	ldr	r2, [pc, #220]	; (8007350 <USB_SetTurnaroundTime+0x128>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d202      	bcs.n	800727e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007278:	230d      	movs	r3, #13
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e04c      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4a33      	ldr	r2, [pc, #204]	; (8007350 <USB_SetTurnaroundTime+0x128>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d306      	bcc.n	8007294 <USB_SetTurnaroundTime+0x6c>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4a32      	ldr	r2, [pc, #200]	; (8007354 <USB_SetTurnaroundTime+0x12c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d802      	bhi.n	8007294 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800728e:	230c      	movs	r3, #12
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	e041      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4a2f      	ldr	r2, [pc, #188]	; (8007354 <USB_SetTurnaroundTime+0x12c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d906      	bls.n	80072aa <USB_SetTurnaroundTime+0x82>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4a2e      	ldr	r2, [pc, #184]	; (8007358 <USB_SetTurnaroundTime+0x130>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d802      	bhi.n	80072aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80072a4:	230b      	movs	r3, #11
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e036      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4a2a      	ldr	r2, [pc, #168]	; (8007358 <USB_SetTurnaroundTime+0x130>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d906      	bls.n	80072c0 <USB_SetTurnaroundTime+0x98>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4a29      	ldr	r2, [pc, #164]	; (800735c <USB_SetTurnaroundTime+0x134>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d802      	bhi.n	80072c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80072ba:	230a      	movs	r3, #10
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	e02b      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4a26      	ldr	r2, [pc, #152]	; (800735c <USB_SetTurnaroundTime+0x134>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d906      	bls.n	80072d6 <USB_SetTurnaroundTime+0xae>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4a25      	ldr	r2, [pc, #148]	; (8007360 <USB_SetTurnaroundTime+0x138>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d202      	bcs.n	80072d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072d0:	2309      	movs	r3, #9
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e020      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4a21      	ldr	r2, [pc, #132]	; (8007360 <USB_SetTurnaroundTime+0x138>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d306      	bcc.n	80072ec <USB_SetTurnaroundTime+0xc4>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	4a20      	ldr	r2, [pc, #128]	; (8007364 <USB_SetTurnaroundTime+0x13c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d802      	bhi.n	80072ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80072e6:	2308      	movs	r3, #8
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e015      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4a1d      	ldr	r2, [pc, #116]	; (8007364 <USB_SetTurnaroundTime+0x13c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d906      	bls.n	8007302 <USB_SetTurnaroundTime+0xda>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	4a1c      	ldr	r2, [pc, #112]	; (8007368 <USB_SetTurnaroundTime+0x140>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d202      	bcs.n	8007302 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80072fc:	2307      	movs	r3, #7
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	e00a      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007302:	2306      	movs	r3, #6
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	e007      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d102      	bne.n	8007314 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800730e:	2309      	movs	r3, #9
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	e001      	b.n	8007318 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007314:	2309      	movs	r3, #9
 8007316:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	029b      	lsls	r3, r3, #10
 800732c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007330:	431a      	orrs	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	00d8acbf 	.word	0x00d8acbf
 8007348:	00e4e1c0 	.word	0x00e4e1c0
 800734c:	00f42400 	.word	0x00f42400
 8007350:	01067380 	.word	0x01067380
 8007354:	011a499f 	.word	0x011a499f
 8007358:	01312cff 	.word	0x01312cff
 800735c:	014ca43f 	.word	0x014ca43f
 8007360:	016e3600 	.word	0x016e3600
 8007364:	01a6ab1f 	.word	0x01a6ab1f
 8007368:	01e84800 	.word	0x01e84800

0800736c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f023 0201 	bic.w	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d115      	bne.n	80073dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073bc:	2001      	movs	r0, #1
 80073be:	f7fb f865 	bl	800248c <HAL_Delay>
      ms++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fc27 	bl	8007c1c <USB_GetMode>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d01e      	beq.n	8007412 <USB_SetCurrentMode+0x84>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b31      	cmp	r3, #49	; 0x31
 80073d8:	d9f0      	bls.n	80073bc <USB_SetCurrentMode+0x2e>
 80073da:	e01a      	b.n	8007412 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d115      	bne.n	800740e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073ee:	2001      	movs	r0, #1
 80073f0:	f7fb f84c 	bl	800248c <HAL_Delay>
      ms++;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fc0e 	bl	8007c1c <USB_GetMode>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <USB_SetCurrentMode+0x84>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b31      	cmp	r3, #49	; 0x31
 800740a:	d9f0      	bls.n	80073ee <USB_SetCurrentMode+0x60>
 800740c:	e001      	b.n	8007412 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e005      	b.n	800741e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b32      	cmp	r3, #50	; 0x32
 8007416:	d101      	bne.n	800741c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e000      	b.n	800741e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007428:	b084      	sub	sp, #16
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e009      	b.n	800745c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3340      	adds	r3, #64	; 0x40
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	2200      	movs	r2, #0
 8007454:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	3301      	adds	r3, #1
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b0e      	cmp	r3, #14
 8007460:	d9f2      	bls.n	8007448 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11c      	bne.n	80074a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007476:	f043 0302 	orr.w	r3, r3, #2
 800747a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	639a      	str	r2, [r3, #56]	; 0x38
 80074a0:	e00b      	b.n	80074ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074c0:	461a      	mov	r2, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074cc:	4619      	mov	r1, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d4:	461a      	mov	r2, r3
 80074d6:	680b      	ldr	r3, [r1, #0]
 80074d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d10c      	bne.n	80074fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074e6:	2100      	movs	r1, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f965 	bl	80077b8 <USB_SetDevSpeed>
 80074ee:	e008      	b.n	8007502 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074f0:	2101      	movs	r1, #1
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f960 	bl	80077b8 <USB_SetDevSpeed>
 80074f8:	e003      	b.n	8007502 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074fa:	2103      	movs	r1, #3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f95b 	bl	80077b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007502:	2110      	movs	r1, #16
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8f3 	bl	80076f0 <USB_FlushTxFifo>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f91f 	bl	8007758 <USB_FlushRxFifo>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	461a      	mov	r2, r3
 800752c:	2300      	movs	r3, #0
 800752e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	461a      	mov	r2, r3
 8007538:	2300      	movs	r3, #0
 800753a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	461a      	mov	r2, r3
 8007544:	2300      	movs	r3, #0
 8007546:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007548:	2300      	movs	r3, #0
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	e043      	b.n	80075d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007564:	d118      	bne.n	8007598 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	461a      	mov	r2, r3
 800757a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	e013      	b.n	80075aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758e:	461a      	mov	r2, r3
 8007590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	e008      	b.n	80075aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a4:	461a      	mov	r2, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b6:	461a      	mov	r2, r3
 80075b8:	2300      	movs	r3, #0
 80075ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	461a      	mov	r2, r3
 80075ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	3301      	adds	r3, #1
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d3b7      	bcc.n	800754e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	e043      	b.n	800766c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075fa:	d118      	bne.n	800762e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	461a      	mov	r2, r3
 8007610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	e013      	b.n	8007640 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007624:	461a      	mov	r2, r3
 8007626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	e008      	b.n	8007640 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	461a      	mov	r2, r3
 800763c:	2300      	movs	r3, #0
 800763e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	461a      	mov	r2, r3
 800764e:	2300      	movs	r3, #0
 8007650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	461a      	mov	r2, r3
 8007660:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3301      	adds	r3, #1
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	429a      	cmp	r2, r3
 8007672:	d3b7      	bcc.n	80075e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007686:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007694:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	2b00      	cmp	r3, #0
 800769a:	d105      	bne.n	80076a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f043 0210 	orr.w	r2, r3, #16
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699a      	ldr	r2, [r3, #24]
 80076ac:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <USB_DevInit+0x2c4>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f043 0208 	orr.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d107      	bne.n	80076dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076d4:	f043 0304 	orr.w	r3, r3, #4
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e8:	b004      	add	sp, #16
 80076ea:	4770      	bx	lr
 80076ec:	803c3800 	.word	0x803c3800

080076f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a13      	ldr	r2, [pc, #76]	; (8007754 <USB_FlushTxFifo+0x64>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d901      	bls.n	8007710 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e01b      	b.n	8007748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	daf2      	bge.n	80076fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	019b      	lsls	r3, r3, #6
 8007720:	f043 0220 	orr.w	r2, r3, #32
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3301      	adds	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4a08      	ldr	r2, [pc, #32]	; (8007754 <USB_FlushTxFifo+0x64>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d901      	bls.n	800773a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e006      	b.n	8007748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b20      	cmp	r3, #32
 8007744:	d0f0      	beq.n	8007728 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	00030d40 	.word	0x00030d40

08007758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4a11      	ldr	r2, [pc, #68]	; (80077b4 <USB_FlushRxFifo+0x5c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d901      	bls.n	8007776 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e018      	b.n	80077a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	daf2      	bge.n	8007764 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2210      	movs	r2, #16
 8007786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <USB_FlushRxFifo+0x5c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d901      	bls.n	800779a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e006      	b.n	80077a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d0f0      	beq.n	8007788 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	00030d40 	.word	0x00030d40

080077b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077d8:	4313      	orrs	r3, r2
 80077da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b087      	sub	sp, #28
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0306 	and.w	r3, r3, #6
 8007802:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800780a:	2300      	movs	r3, #0
 800780c:	75fb      	strb	r3, [r7, #23]
 800780e:	e00a      	b.n	8007826 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d002      	beq.n	800781c <USB_GetDevSpeed+0x32>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b06      	cmp	r3, #6
 800781a:	d102      	bne.n	8007822 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800781c:	2302      	movs	r3, #2
 800781e:	75fb      	strb	r3, [r7, #23]
 8007820:	e001      	b.n	8007826 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007822:	230f      	movs	r3, #15
 8007824:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
}
 8007828:	4618      	mov	r0, r3
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d14a      	bne.n	80078e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786a:	f040 8086 	bne.w	800797a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007890:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f242 7210 	movw	r2, #10000	; 0x2710
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d902      	bls.n	80078cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
          break;
 80078ca:	e056      	b.n	800797a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078e4:	d0e7      	beq.n	80078b6 <USB_EPStopXfer+0x82>
 80078e6:	e048      	b.n	800797a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007900:	d13b      	bne.n	800797a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007920:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007924:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	7812      	ldrb	r2, [r2, #0]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	440a      	add	r2, r1
 8007940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007948:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f242 7210 	movw	r2, #10000	; 0x2710
 8007956:	4293      	cmp	r3, r2
 8007958:	d902      	bls.n	8007960 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
          break;
 800795e:	e00c      	b.n	800797a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007978:	d0e7      	beq.n	800794a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4611      	mov	r1, r2
 8007994:	461a      	mov	r2, r3
 8007996:	460b      	mov	r3, r1
 8007998:	71fb      	strb	r3, [r7, #7]
 800799a:	4613      	mov	r3, r2
 800799c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d123      	bne.n	80079f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079ae:	88bb      	ldrh	r3, [r7, #4]
 80079b0:	3303      	adds	r3, #3
 80079b2:	089b      	lsrs	r3, r3, #2
 80079b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	e018      	b.n	80079ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	031a      	lsls	r2, r3, #12
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c8:	461a      	mov	r2, r3
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	3301      	adds	r3, #1
 80079d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	3301      	adds	r3, #1
 80079da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	3301      	adds	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	3301      	adds	r3, #1
 80079e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	3301      	adds	r3, #1
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3e2      	bcc.n	80079bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3724      	adds	r7, #36	; 0x24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b08b      	sub	sp, #44	; 0x2c
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	089b      	lsrs	r3, r3, #2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	f003 0303 	and.w	r3, r3, #3
 8007a28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	e014      	b.n	8007a5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	3301      	adds	r3, #1
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	3301      	adds	r3, #1
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	3301      	adds	r3, #1
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	3301      	adds	r3, #1
 8007a58:	623b      	str	r3, [r7, #32]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d3e6      	bcc.n	8007a30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a62:	8bfb      	ldrh	r3, [r7, #30]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01e      	beq.n	8007aa6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a72:	461a      	mov	r2, r3
 8007a74:	f107 0310 	add.w	r3, r7, #16
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	701a      	strb	r2, [r3, #0]
      i++;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	3301      	adds	r3, #1
 8007a92:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	3301      	adds	r3, #1
 8007a98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a9a:	8bfb      	ldrh	r3, [r7, #30]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007aa0:	8bfb      	ldrh	r3, [r7, #30]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1ea      	bne.n	8007a7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	372c      	adds	r7, #44	; 0x2c
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ace:	f023 0303 	bic.w	r3, r3, #3
 8007ad2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae2:	f043 0302 	orr.w	r3, r3, #2
 8007ae6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	0c1b      	lsrs	r3, r3, #16
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4013      	ands	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	b29b      	uxth	r3, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf0:	01db      	lsls	r3, r3, #7
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f003 0301 	and.w	r3, r3, #1
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c56:	f023 0307 	bic.w	r3, r3, #7
 8007c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	333c      	adds	r3, #60	; 0x3c
 8007c96:	3304      	adds	r3, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4a26      	ldr	r2, [pc, #152]	; (8007d38 <USB_EP0_OutStart+0xb8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d90a      	bls.n	8007cba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb4:	d101      	bne.n	8007cba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e037      	b.n	8007d2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce8:	f043 0318 	orr.w	r3, r3, #24
 8007cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cfc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10f      	bne.n	8007d28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0e:	461a      	mov	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	4f54300a 	.word	0x4f54300a

08007d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <USB_CoreReset+0x64>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d901      	bls.n	8007d5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e01b      	b.n	8007d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	daf2      	bge.n	8007d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f043 0201 	orr.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3301      	adds	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <USB_CoreReset+0x64>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d901      	bls.n	8007d84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e006      	b.n	8007d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d0f0      	beq.n	8007d72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	00030d40 	.word	0x00030d40

08007da4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007da8:	4904      	ldr	r1, [pc, #16]	; (8007dbc <MX_FATFS_Init+0x18>)
 8007daa:	4805      	ldr	r0, [pc, #20]	; (8007dc0 <MX_FATFS_Init+0x1c>)
 8007dac:	f003 f9cc 	bl	800b148 <FATFS_LinkDriver>
 8007db0:	4603      	mov	r3, r0
 8007db2:	461a      	mov	r2, r3
 8007db4:	4b03      	ldr	r3, [pc, #12]	; (8007dc4 <MX_FATFS_Init+0x20>)
 8007db6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007db8:	bf00      	nop
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20002884 	.word	0x20002884
 8007dc0:	0800bf6c 	.word	0x0800bf6c
 8007dc4:	20002880 	.word	0x20002880

08007dc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007dcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007de2:	f000 f879 	bl	8007ed8 <BSP_SD_IsDetected>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d001      	beq.n	8007df0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e012      	b.n	8007e16 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007df0:	480b      	ldr	r0, [pc, #44]	; (8007e20 <BSP_SD_Init+0x48>)
 8007df2:	f7fc fba5 	bl	8004540 <HAL_SD_Init>
 8007df6:	4603      	mov	r3, r0
 8007df8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d109      	bne.n	8007e14 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e04:	4806      	ldr	r0, [pc, #24]	; (8007e20 <BSP_SD_Init+0x48>)
 8007e06:	f7fd f97f 	bl	8005108 <HAL_SD_ConfigWideBusOperation>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007e14:	79fb      	ldrb	r3, [r7, #7]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	2000225c 	.word	0x2000225c

08007e24 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af02      	add	r7, sp, #8
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	4806      	ldr	r0, [pc, #24]	; (8007e5c <BSP_SD_ReadBlocks+0x38>)
 8007e42:	f7fc fc2d 	bl	80046a0 <HAL_SD_ReadBlocks>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	2000225c 	.word	0x2000225c

08007e60 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	4806      	ldr	r0, [pc, #24]	; (8007e98 <BSP_SD_WriteBlocks+0x38>)
 8007e7e:	f7fc fded 	bl	8004a5c <HAL_SD_WriteBlocks>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	2000225c 	.word	0x2000225c

08007e9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007ea0:	4805      	ldr	r0, [pc, #20]	; (8007eb8 <BSP_SD_GetCardState+0x1c>)
 8007ea2:	f7fd f9cb 	bl	800523c <HAL_SD_GetCardState>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	bf14      	ite	ne
 8007eac:	2301      	movne	r3, #1
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	2000225c 	.word	0x2000225c

08007ebc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	4803      	ldr	r0, [pc, #12]	; (8007ed4 <BSP_SD_GetCardInfo+0x18>)
 8007ec8:	f7fd f8f2 	bl	80050b0 <HAL_SD_GetCardInfo>
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	2000225c 	.word	0x2000225c

08007ed8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	b2db      	uxtb	r3, r3
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007efe:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <SD_CheckStatus+0x38>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007f04:	f7ff ffca 	bl	8007e9c <BSP_SD_GetCardState>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <SD_CheckStatus+0x38>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <SD_CheckStatus+0x38>)
 8007f1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007f1e:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <SD_CheckStatus+0x38>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000009 	.word	0x20000009

08007f30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <SD_initialize+0x38>)
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007f40:	f7ff ff4a 	bl	8007dd8 <BSP_SD_Init>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d107      	bne.n	8007f5a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff ffd1 	bl	8007ef4 <SD_CheckStatus>
 8007f52:	4603      	mov	r3, r0
 8007f54:	461a      	mov	r2, r3
 8007f56:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <SD_initialize+0x38>)
 8007f58:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007f5a:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <SD_initialize+0x38>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b2db      	uxtb	r3, r3
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20000009 	.word	0x20000009

08007f6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff ffbb 	bl	8007ef4 <SD_CheckStatus>
 8007f7e:	4603      	mov	r3, r0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	68b8      	ldr	r0, [r7, #8]
 8007fa6:	f7ff ff3d 	bl	8007e24 <BSP_SD_ReadBlocks>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007fb0:	bf00      	nop
 8007fb2:	f7ff ff73 	bl	8007e9c <BSP_SD_GetCardState>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1fa      	bne.n	8007fb2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b086      	sub	sp, #24
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	68b8      	ldr	r0, [r7, #8]
 8007fe8:	f7ff ff3a 	bl	8007e60 <BSP_SD_WriteBlocks>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d107      	bne.n	8008002 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007ff2:	bf00      	nop
 8007ff4:	f7ff ff52 	bl	8007e9c <BSP_SD_GetCardState>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1fa      	bne.n	8007ff4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08c      	sub	sp, #48	; 0x30
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	603a      	str	r2, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
 8008018:	460b      	mov	r3, r1
 800801a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008022:	4b25      	ldr	r3, [pc, #148]	; (80080b8 <SD_ioctl+0xac>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <SD_ioctl+0x28>
 8008030:	2303      	movs	r3, #3
 8008032:	e03c      	b.n	80080ae <SD_ioctl+0xa2>

  switch (cmd)
 8008034:	79bb      	ldrb	r3, [r7, #6]
 8008036:	2b03      	cmp	r3, #3
 8008038:	d834      	bhi.n	80080a4 <SD_ioctl+0x98>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <SD_ioctl+0x34>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008051 	.word	0x08008051
 8008044:	08008059 	.word	0x08008059
 8008048:	08008071 	.word	0x08008071
 800804c:	0800808b 	.word	0x0800808b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008056:	e028      	b.n	80080aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008058:	f107 030c 	add.w	r3, r7, #12
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff ff2d 	bl	8007ebc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800806e:	e01c      	b.n	80080aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008070:	f107 030c 	add.w	r3, r7, #12
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff ff21 	bl	8007ebc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	b29a      	uxth	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008088:	e00f      	b.n	80080aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800808a:	f107 030c 	add.w	r3, r7, #12
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff ff14 	bl	8007ebc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	0a5a      	lsrs	r2, r3, #9
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080a2:	e002      	b.n	80080aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80080a4:	2304      	movs	r3, #4
 80080a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80080aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3730      	adds	r7, #48	; 0x30
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000009 	.word	0x20000009

080080bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	4a08      	ldr	r2, [pc, #32]	; (80080ec <disk_status+0x30>)
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	79fa      	ldrb	r2, [r7, #7]
 80080d4:	4905      	ldr	r1, [pc, #20]	; (80080ec <disk_status+0x30>)
 80080d6:	440a      	add	r2, r1
 80080d8:	7a12      	ldrb	r2, [r2, #8]
 80080da:	4610      	mov	r0, r2
 80080dc:	4798      	blx	r3
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	200028b0 	.word	0x200028b0

080080f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	4a0d      	ldr	r2, [pc, #52]	; (8008138 <disk_initialize+0x48>)
 8008102:	5cd3      	ldrb	r3, [r2, r3]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d111      	bne.n	800812c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	4a0b      	ldr	r2, [pc, #44]	; (8008138 <disk_initialize+0x48>)
 800810c:	2101      	movs	r1, #1
 800810e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	4a09      	ldr	r2, [pc, #36]	; (8008138 <disk_initialize+0x48>)
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	4906      	ldr	r1, [pc, #24]	; (8008138 <disk_initialize+0x48>)
 8008120:	440a      	add	r2, r1
 8008122:	7a12      	ldrb	r2, [r2, #8]
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200028b0 	.word	0x200028b0

0800813c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4a0a      	ldr	r2, [pc, #40]	; (8008178 <disk_read+0x3c>)
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	689c      	ldr	r4, [r3, #8]
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4a07      	ldr	r2, [pc, #28]	; (8008178 <disk_read+0x3c>)
 800815c:	4413      	add	r3, r2
 800815e:	7a18      	ldrb	r0, [r3, #8]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	47a0      	blx	r4
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]
  return res;
 800816c:	7dfb      	ldrb	r3, [r7, #23]
}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	bd90      	pop	{r4, r7, pc}
 8008176:	bf00      	nop
 8008178:	200028b0 	.word	0x200028b0

0800817c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800817c:	b590      	push	{r4, r7, lr}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
 8008186:	603b      	str	r3, [r7, #0]
 8008188:	4603      	mov	r3, r0
 800818a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	4a0a      	ldr	r2, [pc, #40]	; (80081b8 <disk_write+0x3c>)
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	68dc      	ldr	r4, [r3, #12]
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	4a07      	ldr	r2, [pc, #28]	; (80081b8 <disk_write+0x3c>)
 800819c:	4413      	add	r3, r2
 800819e:	7a18      	ldrb	r0, [r3, #8]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	47a0      	blx	r4
 80081a8:	4603      	mov	r3, r0
 80081aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd90      	pop	{r4, r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200028b0 	.word	0x200028b0

080081bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	603a      	str	r2, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
 80081c8:	460b      	mov	r3, r1
 80081ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <disk_ioctl+0x38>)
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	79fa      	ldrb	r2, [r7, #7]
 80081da:	4906      	ldr	r1, [pc, #24]	; (80081f4 <disk_ioctl+0x38>)
 80081dc:	440a      	add	r2, r1
 80081de:	7a10      	ldrb	r0, [r2, #8]
 80081e0:	79b9      	ldrb	r1, [r7, #6]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	4798      	blx	r3
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200028b0 	.word	0x200028b0

080081f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3301      	adds	r3, #1
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008208:	89fb      	ldrh	r3, [r7, #14]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	b21a      	sxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b21b      	sxth	r3, r3
 8008214:	4313      	orrs	r3, r2
 8008216:	b21b      	sxth	r3, r3
 8008218:	81fb      	strh	r3, [r7, #14]
	return rv;
 800821a:	89fb      	ldrh	r3, [r7, #14]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3303      	adds	r3, #3
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	3202      	adds	r2, #2
 8008240:	7812      	ldrb	r2, [r2, #0]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	3201      	adds	r2, #1
 800824e:	7812      	ldrb	r2, [r2, #0]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	7812      	ldrb	r2, [r2, #0]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	887a      	ldrh	r2, [r7, #2]
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	887b      	ldrh	r3, [r7, #2]
 8008288:	0a1b      	lsrs	r3, r3, #8
 800828a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	887a      	ldrh	r2, [r7, #2]
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	701a      	strb	r2, [r3, #0]
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	0a1b      	lsrs	r3, r3, #8
 80082be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	607a      	str	r2, [r7, #4]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	0a1b      	lsrs	r3, r3, #8
 80082d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	0a1b      	lsrs	r3, r3, #8
 80082e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	b2d2      	uxtb	r2, r2
 80082ee:	701a      	strb	r2, [r3, #0]
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	1c53      	adds	r3, r2, #1
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	1c59      	adds	r1, r3, #1
 8008320:	6179      	str	r1, [r7, #20]
 8008322:	7812      	ldrb	r2, [r2, #0]
 8008324:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3b01      	subs	r3, #1
 800832a:	607b      	str	r3, [r7, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f1      	bne.n	8008316 <mem_cpy+0x1a>
	}
}
 8008332:	bf00      	nop
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800833e:	b480      	push	{r7}
 8008340:	b087      	sub	sp, #28
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	617a      	str	r2, [r7, #20]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3b01      	subs	r3, #1
 800835e:	607b      	str	r3, [r7, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f3      	bne.n	800834e <mem_set+0x10>
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008374:	b480      	push	{r7}
 8008376:	b089      	sub	sp, #36	; 0x24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	61fa      	str	r2, [r7, #28]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	61ba      	str	r2, [r7, #24]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	1acb      	subs	r3, r1, r3
 80083a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	607b      	str	r3, [r7, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <mem_cmp+0x40>
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0eb      	beq.n	800838c <mem_cmp+0x18>

	return r;
 80083b4:	697b      	ldr	r3, [r7, #20]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3724      	adds	r7, #36	; 0x24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80083cc:	e002      	b.n	80083d4 <chk_chr+0x12>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3301      	adds	r3, #1
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <chk_chr+0x26>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d1f2      	bne.n	80083ce <chk_chr+0xc>
	return *str;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781b      	ldrb	r3, [r3, #0]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	e029      	b.n	8008460 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800840c:	4a27      	ldr	r2, [pc, #156]	; (80084ac <chk_lock+0xb4>)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	4413      	add	r3, r2
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01d      	beq.n	8008456 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800841a:	4a24      	ldr	r2, [pc, #144]	; (80084ac <chk_lock+0xb4>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	4413      	add	r3, r2
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d116      	bne.n	800845a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800842c:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <chk_lock+0xb4>)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	4413      	add	r3, r2
 8008434:	3304      	adds	r3, #4
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800843c:	429a      	cmp	r2, r3
 800843e:	d10c      	bne.n	800845a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008440:	4a1a      	ldr	r2, [pc, #104]	; (80084ac <chk_lock+0xb4>)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	4413      	add	r3, r2
 8008448:	3308      	adds	r3, #8
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008450:	429a      	cmp	r2, r3
 8008452:	d102      	bne.n	800845a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008454:	e007      	b.n	8008466 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008456:	2301      	movs	r3, #1
 8008458:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d9d2      	bls.n	800840c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d109      	bne.n	8008480 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <chk_lock+0x80>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d101      	bne.n	800847c <chk_lock+0x84>
 8008478:	2300      	movs	r3, #0
 800847a:	e010      	b.n	800849e <chk_lock+0xa6>
 800847c:	2312      	movs	r3, #18
 800847e:	e00e      	b.n	800849e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d108      	bne.n	8008498 <chk_lock+0xa0>
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <chk_lock+0xb4>)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	4413      	add	r3, r2
 800848e:	330c      	adds	r3, #12
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008496:	d101      	bne.n	800849c <chk_lock+0xa4>
 8008498:	2310      	movs	r3, #16
 800849a:	e000      	b.n	800849e <chk_lock+0xa6>
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20002890 	.word	0x20002890

080084b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	e002      	b.n	80084c2 <enq_lock+0x12>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3301      	adds	r3, #1
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d806      	bhi.n	80084d6 <enq_lock+0x26>
 80084c8:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <enq_lock+0x40>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	4413      	add	r3, r2
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1f2      	bne.n	80084bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	bf14      	ite	ne
 80084dc:	2301      	movne	r3, #1
 80084de:	2300      	moveq	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	20002890 	.word	0x20002890

080084f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	e01f      	b.n	8008544 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008504:	4a41      	ldr	r2, [pc, #260]	; (800860c <inc_lock+0x118>)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	011b      	lsls	r3, r3, #4
 800850a:	4413      	add	r3, r2
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d113      	bne.n	800853e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008516:	4a3d      	ldr	r2, [pc, #244]	; (800860c <inc_lock+0x118>)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	4413      	add	r3, r2
 800851e:	3304      	adds	r3, #4
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008526:	429a      	cmp	r2, r3
 8008528:	d109      	bne.n	800853e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800852a:	4a38      	ldr	r2, [pc, #224]	; (800860c <inc_lock+0x118>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	4413      	add	r3, r2
 8008532:	3308      	adds	r3, #8
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800853a:	429a      	cmp	r2, r3
 800853c:	d006      	beq.n	800854c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3301      	adds	r3, #1
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d9dc      	bls.n	8008504 <inc_lock+0x10>
 800854a:	e000      	b.n	800854e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800854c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d132      	bne.n	80085ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	e002      	b.n	8008560 <inc_lock+0x6c>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d806      	bhi.n	8008574 <inc_lock+0x80>
 8008566:	4a29      	ldr	r2, [pc, #164]	; (800860c <inc_lock+0x118>)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	4413      	add	r3, r2
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f2      	bne.n	800855a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d101      	bne.n	800857e <inc_lock+0x8a>
 800857a:	2300      	movs	r3, #0
 800857c:	e040      	b.n	8008600 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4922      	ldr	r1, [pc, #136]	; (800860c <inc_lock+0x118>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	440b      	add	r3, r1
 800858a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	491e      	ldr	r1, [pc, #120]	; (800860c <inc_lock+0x118>)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	440b      	add	r3, r1
 8008598:	3304      	adds	r3, #4
 800859a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	695a      	ldr	r2, [r3, #20]
 80085a0:	491a      	ldr	r1, [pc, #104]	; (800860c <inc_lock+0x118>)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	440b      	add	r3, r1
 80085a8:	3308      	adds	r3, #8
 80085aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80085ac:	4a17      	ldr	r2, [pc, #92]	; (800860c <inc_lock+0x118>)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	4413      	add	r3, r2
 80085b4:	330c      	adds	r3, #12
 80085b6:	2200      	movs	r2, #0
 80085b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <inc_lock+0xe0>
 80085c0:	4a12      	ldr	r2, [pc, #72]	; (800860c <inc_lock+0x118>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	4413      	add	r3, r2
 80085c8:	330c      	adds	r3, #12
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <inc_lock+0xe0>
 80085d0:	2300      	movs	r3, #0
 80085d2:	e015      	b.n	8008600 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d108      	bne.n	80085ec <inc_lock+0xf8>
 80085da:	4a0c      	ldr	r2, [pc, #48]	; (800860c <inc_lock+0x118>)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	4413      	add	r3, r2
 80085e2:	330c      	adds	r3, #12
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	3301      	adds	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	e001      	b.n	80085f0 <inc_lock+0xfc>
 80085ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085f0:	4906      	ldr	r1, [pc, #24]	; (800860c <inc_lock+0x118>)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	440b      	add	r3, r1
 80085f8:	330c      	adds	r3, #12
 80085fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	20002890 	.word	0x20002890

08008610 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3b01      	subs	r3, #1
 800861c:	607b      	str	r3, [r7, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d825      	bhi.n	8008670 <dec_lock+0x60>
		n = Files[i].ctr;
 8008624:	4a17      	ldr	r2, [pc, #92]	; (8008684 <dec_lock+0x74>)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	4413      	add	r3, r2
 800862c:	330c      	adds	r3, #12
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008632:	89fb      	ldrh	r3, [r7, #14]
 8008634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008638:	d101      	bne.n	800863e <dec_lock+0x2e>
 800863a:	2300      	movs	r3, #0
 800863c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800863e:	89fb      	ldrh	r3, [r7, #14]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <dec_lock+0x3a>
 8008644:	89fb      	ldrh	r3, [r7, #14]
 8008646:	3b01      	subs	r3, #1
 8008648:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800864a:	4a0e      	ldr	r2, [pc, #56]	; (8008684 <dec_lock+0x74>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	4413      	add	r3, r2
 8008652:	330c      	adds	r3, #12
 8008654:	89fa      	ldrh	r2, [r7, #14]
 8008656:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008658:	89fb      	ldrh	r3, [r7, #14]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d105      	bne.n	800866a <dec_lock+0x5a>
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <dec_lock+0x74>)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	4413      	add	r3, r2
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	737b      	strb	r3, [r7, #13]
 800866e:	e001      	b.n	8008674 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008670:	2302      	movs	r3, #2
 8008672:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008674:	7b7b      	ldrb	r3, [r7, #13]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20002890 	.word	0x20002890

08008688 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e010      	b.n	80086b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008696:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <clear_lock+0x44>)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	4413      	add	r3, r2
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d105      	bne.n	80086b2 <clear_lock+0x2a>
 80086a6:	4a09      	ldr	r2, [pc, #36]	; (80086cc <clear_lock+0x44>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	4413      	add	r3, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d9eb      	bls.n	8008696 <clear_lock+0xe>
	}
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20002890 	.word	0x20002890

080086d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	78db      	ldrb	r3, [r3, #3]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d034      	beq.n	800874e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7858      	ldrb	r0, [r3, #1]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80086f4:	2301      	movs	r3, #1
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	f7ff fd40 	bl	800817c <disk_write>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]
 8008706:	e022      	b.n	800874e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	1ad2      	subs	r2, r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	429a      	cmp	r2, r3
 800871c:	d217      	bcs.n	800874e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	e010      	b.n	8008748 <sync_window+0x78>
					wsect += fs->fsize;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	4413      	add	r3, r2
 800872e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	7858      	ldrb	r0, [r3, #1]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800873a:	2301      	movs	r3, #1
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	f7ff fd1d 	bl	800817c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	3b01      	subs	r3, #1
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d8eb      	bhi.n	8008726 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d01b      	beq.n	80087a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff ffad 	bl	80086d0 <sync_window>
 8008776:	4603      	mov	r3, r0
 8008778:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d113      	bne.n	80087a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7858      	ldrb	r0, [r3, #1]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800878a:	2301      	movs	r3, #1
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	f7ff fcd5 	bl	800813c <disk_read>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d004      	beq.n	80087a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008798:	f04f 33ff 	mov.w	r3, #4294967295
 800879c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800879e:	2301      	movs	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff ff87 	bl	80086d0 <sync_window>
 80087c2:	4603      	mov	r3, r0
 80087c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d159      	bne.n	8008880 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d149      	bne.n	8008868 <sync_fs+0xb4>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	791b      	ldrb	r3, [r3, #4]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d145      	bne.n	8008868 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	899b      	ldrh	r3, [r3, #12]
 80087e6:	461a      	mov	r2, r3
 80087e8:	2100      	movs	r1, #0
 80087ea:	f7ff fda8 	bl	800833e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3334      	adds	r3, #52	; 0x34
 80087f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fd37 	bl	800826e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3334      	adds	r3, #52	; 0x34
 8008804:	4921      	ldr	r1, [pc, #132]	; (800888c <sync_fs+0xd8>)
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fd4c 	bl	80082a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3334      	adds	r3, #52	; 0x34
 8008810:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008814:	491e      	ldr	r1, [pc, #120]	; (8008890 <sync_fs+0xdc>)
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fd44 	bl	80082a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3334      	adds	r3, #52	; 0x34
 8008820:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7ff fd3a 	bl	80082a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3334      	adds	r3, #52	; 0x34
 8008834:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f7ff fd30 	bl	80082a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7858      	ldrb	r0, [r3, #1]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800885c:	2301      	movs	r3, #1
 800885e:	f7ff fc8d 	bl	800817c <disk_write>
			fs->fsi_flag = 0;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	2200      	movs	r2, #0
 800886e:	2100      	movs	r1, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fca3 	bl	80081bc <disk_ioctl>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <sync_fs+0xcc>
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	41615252 	.word	0x41615252
 8008890:	61417272 	.word	0x61417272

08008894 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	3b02      	subs	r3, #2
 80088a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	3b02      	subs	r3, #2
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d301      	bcc.n	80088b4 <clust2sect+0x20>
 80088b0:	2300      	movs	r3, #0
 80088b2:	e008      	b.n	80088c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	895b      	ldrh	r3, [r3, #10]
 80088b8:	461a      	mov	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	fb03 f202 	mul.w	r2, r3, r2
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	4413      	add	r3, r2
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b086      	sub	sp, #24
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d904      	bls.n	80088f2 <get_fat+0x20>
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d302      	bcc.n	80088f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80088f2:	2301      	movs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	e0bb      	b.n	8008a70 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80088f8:	f04f 33ff 	mov.w	r3, #4294967295
 80088fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b03      	cmp	r3, #3
 8008904:	f000 8083 	beq.w	8008a0e <get_fat+0x13c>
 8008908:	2b03      	cmp	r3, #3
 800890a:	f300 80a7 	bgt.w	8008a5c <get_fat+0x18a>
 800890e:	2b01      	cmp	r3, #1
 8008910:	d002      	beq.n	8008918 <get_fat+0x46>
 8008912:	2b02      	cmp	r3, #2
 8008914:	d056      	beq.n	80089c4 <get_fat+0xf2>
 8008916:	e0a1      	b.n	8008a5c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	899b      	ldrh	r3, [r3, #12]
 800892e:	4619      	mov	r1, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	fbb3 f3f1 	udiv	r3, r3, r1
 8008936:	4413      	add	r3, r2
 8008938:	4619      	mov	r1, r3
 800893a:	6938      	ldr	r0, [r7, #16]
 800893c:	f7ff ff0c 	bl	8008758 <move_window>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 808d 	bne.w	8008a62 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	60fa      	str	r2, [r7, #12]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	8992      	ldrh	r2, [r2, #12]
 8008952:	fbb3 f1f2 	udiv	r1, r3, r2
 8008956:	fb01 f202 	mul.w	r2, r1, r2
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4413      	add	r3, r2
 8008960:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008964:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	899b      	ldrh	r3, [r3, #12]
 800896e:	4619      	mov	r1, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	fbb3 f3f1 	udiv	r3, r3, r1
 8008976:	4413      	add	r3, r2
 8008978:	4619      	mov	r1, r3
 800897a:	6938      	ldr	r0, [r7, #16]
 800897c:	f7ff feec 	bl	8008758 <move_window>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d16f      	bne.n	8008a66 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	899b      	ldrh	r3, [r3, #12]
 800898a:	461a      	mov	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008992:	fb01 f202 	mul.w	r2, r1, r2
 8008996:	1a9b      	subs	r3, r3, r2
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	461a      	mov	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <get_fat+0xe8>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	091b      	lsrs	r3, r3, #4
 80089b8:	e002      	b.n	80089c0 <get_fat+0xee>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089c0:	617b      	str	r3, [r7, #20]
			break;
 80089c2:	e055      	b.n	8008a70 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	899b      	ldrh	r3, [r3, #12]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	4619      	mov	r1, r3
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80089d8:	4413      	add	r3, r2
 80089da:	4619      	mov	r1, r3
 80089dc:	6938      	ldr	r0, [r7, #16]
 80089de:	f7ff febb 	bl	8008758 <move_window>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d140      	bne.n	8008a6a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	8992      	ldrh	r2, [r2, #12]
 80089f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80089fa:	fb00 f202 	mul.w	r2, r0, r2
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	440b      	add	r3, r1
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fbf8 	bl	80081f8 <ld_word>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	617b      	str	r3, [r7, #20]
			break;
 8008a0c:	e030      	b.n	8008a70 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	899b      	ldrh	r3, [r3, #12]
 8008a16:	089b      	lsrs	r3, r3, #2
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a22:	4413      	add	r3, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	6938      	ldr	r0, [r7, #16]
 8008a28:	f7ff fe96 	bl	8008758 <move_window>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d11d      	bne.n	8008a6e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	8992      	ldrh	r2, [r2, #12]
 8008a40:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a44:	fb00 f202 	mul.w	r2, r0, r2
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fbeb 	bl	8008228 <ld_dword>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a58:	617b      	str	r3, [r7, #20]
			break;
 8008a5a:	e009      	b.n	8008a70 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e006      	b.n	8008a70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a62:	bf00      	nop
 8008a64:	e004      	b.n	8008a70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a66:	bf00      	nop
 8008a68:	e002      	b.n	8008a70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a6a:	bf00      	nop
 8008a6c:	e000      	b.n	8008a70 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a6e:	bf00      	nop
		}
	}

	return val;
 8008a70:	697b      	ldr	r3, [r7, #20]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008a7a:	b590      	push	{r4, r7, lr}
 8008a7c:	b089      	sub	sp, #36	; 0x24
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a86:	2302      	movs	r3, #2
 8008a88:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	f240 8102 	bls.w	8008c96 <put_fat+0x21c>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	f080 80fc 	bcs.w	8008c96 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	f000 80b6 	beq.w	8008c14 <put_fat+0x19a>
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	f300 80fd 	bgt.w	8008ca8 <put_fat+0x22e>
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d003      	beq.n	8008aba <put_fat+0x40>
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	f000 8083 	beq.w	8008bbe <put_fat+0x144>
 8008ab8:	e0f6      	b.n	8008ca8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	085b      	lsrs	r3, r3, #1
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	899b      	ldrh	r3, [r3, #12]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ad8:	4413      	add	r3, r2
 8008ada:	4619      	mov	r1, r3
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7ff fe3b 	bl	8008758 <move_window>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ae6:	7ffb      	ldrb	r3, [r7, #31]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 80d6 	bne.w	8008c9a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	61ba      	str	r2, [r7, #24]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	8992      	ldrh	r2, [r2, #12]
 8008afe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b02:	fb00 f202 	mul.w	r2, r0, r2
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	440b      	add	r3, r1
 8008b0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00d      	beq.n	8008b32 <put_fat+0xb8>
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	b25b      	sxtb	r3, r3
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	b25a      	sxtb	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	e001      	b.n	8008b36 <put_fat+0xbc>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	899b      	ldrh	r3, [r3, #12]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b50:	4413      	add	r3, r2
 8008b52:	4619      	mov	r1, r3
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f7ff fdff 	bl	8008758 <move_window>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b5e:	7ffb      	ldrb	r3, [r7, #31]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f040 809c 	bne.w	8008c9e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	899b      	ldrh	r3, [r3, #12]
 8008b70:	461a      	mov	r2, r3
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b78:	fb00 f202 	mul.w	r2, r0, r2
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	440b      	add	r3, r1
 8008b80:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <put_fat+0x11a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	091b      	lsrs	r3, r3, #4
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	e00e      	b.n	8008bb2 <put_fat+0x138>
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b25b      	sxtb	r3, r3
 8008b9a:	f023 030f 	bic.w	r3, r3, #15
 8008b9e:	b25a      	sxtb	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	0a1b      	lsrs	r3, r3, #8
 8008ba4:	b25b      	sxtb	r3, r3
 8008ba6:	f003 030f 	and.w	r3, r3, #15
 8008baa:	b25b      	sxtb	r3, r3
 8008bac:	4313      	orrs	r3, r2
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	70da      	strb	r2, [r3, #3]
			break;
 8008bbc:	e074      	b.n	8008ca8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	899b      	ldrh	r3, [r3, #12]
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bd2:	4413      	add	r3, r2
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fdbe 	bl	8008758 <move_window>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008be0:	7ffb      	ldrb	r3, [r7, #31]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d15d      	bne.n	8008ca2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	8992      	ldrh	r2, [r2, #12]
 8008bf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bf8:	fb00 f202 	mul.w	r2, r0, r2
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	440b      	add	r3, r1
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	b292      	uxth	r2, r2
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff fb31 	bl	800826e <st_word>
			fs->wflag = 1;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	70da      	strb	r2, [r3, #3]
			break;
 8008c12:	e049      	b.n	8008ca8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	899b      	ldrh	r3, [r3, #12]
 8008c1c:	089b      	lsrs	r3, r3, #2
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	4619      	mov	r1, r3
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c28:	4413      	add	r3, r2
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f7ff fd93 	bl	8008758 <move_window>
 8008c32:	4603      	mov	r3, r0
 8008c34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c36:	7ffb      	ldrb	r3, [r7, #31]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d134      	bne.n	8008ca6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	8992      	ldrh	r2, [r2, #12]
 8008c50:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c54:	fb00 f202 	mul.w	r2, r0, r2
 8008c58:	1a9b      	subs	r3, r3, r2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff fae3 	bl	8008228 <ld_dword>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c68:	4323      	orrs	r3, r4
 8008c6a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	8992      	ldrh	r2, [r2, #12]
 8008c7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c7e:	fb00 f202 	mul.w	r2, r0, r2
 8008c82:	1a9b      	subs	r3, r3, r2
 8008c84:	440b      	add	r3, r1
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fb0b 	bl	80082a4 <st_dword>
			fs->wflag = 1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	70da      	strb	r2, [r3, #3]
			break;
 8008c94:	e008      	b.n	8008ca8 <put_fat+0x22e>
		}
	}
 8008c96:	bf00      	nop
 8008c98:	e006      	b.n	8008ca8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c9a:	bf00      	nop
 8008c9c:	e004      	b.n	8008ca8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c9e:	bf00      	nop
 8008ca0:	e002      	b.n	8008ca8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ca2:	bf00      	nop
 8008ca4:	e000      	b.n	8008ca8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ca6:	bf00      	nop
	return res;
 8008ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3724      	adds	r7, #36	; 0x24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd90      	pop	{r4, r7, pc}

08008cb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b088      	sub	sp, #32
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d904      	bls.n	8008cd8 <remove_chain+0x26>
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d301      	bcc.n	8008cdc <remove_chain+0x2a>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e04b      	b.n	8008d74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00c      	beq.n	8008cfc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	69b8      	ldr	r0, [r7, #24]
 8008cea:	f7ff fec6 	bl	8008a7a <put_fat>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008cf2:	7ffb      	ldrb	r3, [r7, #31]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <remove_chain+0x4a>
 8008cf8:	7ffb      	ldrb	r3, [r7, #31]
 8008cfa:	e03b      	b.n	8008d74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f7ff fde7 	bl	80088d2 <get_fat>
 8008d04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d031      	beq.n	8008d70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <remove_chain+0x64>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e02e      	b.n	8008d74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d101      	bne.n	8008d22 <remove_chain+0x70>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e028      	b.n	8008d74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008d22:	2200      	movs	r2, #0
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	69b8      	ldr	r0, [r7, #24]
 8008d28:	f7ff fea7 	bl	8008a7a <put_fat>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008d30:	7ffb      	ldrb	r3, [r7, #31]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <remove_chain+0x88>
 8008d36:	7ffb      	ldrb	r3, [r7, #31]
 8008d38:	e01c      	b.n	8008d74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	695a      	ldr	r2, [r3, #20]
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	3b02      	subs	r3, #2
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d20b      	bcs.n	8008d60 <remove_chain+0xae>
			fs->free_clst++;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	791b      	ldrb	r3, [r3, #4]
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d3c6      	bcc.n	8008cfc <remove_chain+0x4a>
 8008d6e:	e000      	b.n	8008d72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008d70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10d      	bne.n	8008dae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <create_chain+0x2c>
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d31b      	bcc.n	8008de0 <create_chain+0x64>
 8008da8:	2301      	movs	r3, #1
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	e018      	b.n	8008de0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff fd8e 	bl	80088d2 <get_fat>
 8008db6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d801      	bhi.n	8008dc2 <create_chain+0x46>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e070      	b.n	8008ea4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc8:	d101      	bne.n	8008dce <create_chain+0x52>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	e06a      	b.n	8008ea4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d201      	bcs.n	8008ddc <create_chain+0x60>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	e063      	b.n	8008ea4 <create_chain+0x128>
		scl = clst;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	3301      	adds	r3, #1
 8008de8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d307      	bcc.n	8008e04 <create_chain+0x88>
				ncl = 2;
 8008df4:	2302      	movs	r3, #2
 8008df6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008df8:	69fa      	ldr	r2, [r7, #28]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d901      	bls.n	8008e04 <create_chain+0x88>
 8008e00:	2300      	movs	r3, #0
 8008e02:	e04f      	b.n	8008ea4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008e04:	69f9      	ldr	r1, [r7, #28]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fd63 	bl	80088d2 <get_fat>
 8008e0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00e      	beq.n	8008e32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d003      	beq.n	8008e22 <create_chain+0xa6>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e20:	d101      	bne.n	8008e26 <create_chain+0xaa>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	e03e      	b.n	8008ea4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d1da      	bne.n	8008de4 <create_chain+0x68>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e038      	b.n	8008ea4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008e32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008e34:	f04f 32ff 	mov.w	r2, #4294967295
 8008e38:	69f9      	ldr	r1, [r7, #28]
 8008e3a:	6938      	ldr	r0, [r7, #16]
 8008e3c:	f7ff fe1d 	bl	8008a7a <put_fat>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d109      	bne.n	8008e5e <create_chain+0xe2>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d006      	beq.n	8008e5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6938      	ldr	r0, [r7, #16]
 8008e56:	f7ff fe10 	bl	8008a7a <put_fat>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d116      	bne.n	8008e92 <create_chain+0x116>
		fs->last_clst = ncl;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	69fa      	ldr	r2, [r7, #28]
 8008e68:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	695a      	ldr	r2, [r3, #20]
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	3b02      	subs	r3, #2
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d804      	bhi.n	8008e82 <create_chain+0x106>
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	1e5a      	subs	r2, r3, #1
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	791b      	ldrb	r3, [r3, #4]
 8008e86:	f043 0301 	orr.w	r3, r3, #1
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	711a      	strb	r2, [r3, #4]
 8008e90:	e007      	b.n	8008ea2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d102      	bne.n	8008e9e <create_chain+0x122>
 8008e98:	f04f 33ff 	mov.w	r3, #4294967295
 8008e9c:	e000      	b.n	8008ea0 <create_chain+0x124>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ea2:	69fb      	ldr	r3, [r7, #28]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	899b      	ldrh	r3, [r3, #12]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	8952      	ldrh	r2, [r2, #10]
 8008ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1d1a      	adds	r2, r3, #4
 8008ede:	613a      	str	r2, [r7, #16]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <clmt_clust+0x42>
 8008eea:	2300      	movs	r3, #0
 8008eec:	e010      	b.n	8008f10 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d307      	bcc.n	8008f06 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	617b      	str	r3, [r7, #20]
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	3304      	adds	r3, #4
 8008f02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f04:	e7e9      	b.n	8008eda <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008f06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	4413      	add	r3, r2
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	371c      	adds	r7, #28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f32:	d204      	bcs.n	8008f3e <dir_sdi+0x22>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	f003 031f 	and.w	r3, r3, #31
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e071      	b.n	8009026 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d106      	bne.n	8008f62 <dir_sdi+0x46>
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d902      	bls.n	8008f62 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10c      	bne.n	8008f82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	8912      	ldrh	r2, [r2, #8]
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d301      	bcc.n	8008f78 <dir_sdi+0x5c>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e056      	b.n	8009026 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	61da      	str	r2, [r3, #28]
 8008f80:	e02d      	b.n	8008fde <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	895b      	ldrh	r3, [r3, #10]
 8008f86:	461a      	mov	r2, r3
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	899b      	ldrh	r3, [r3, #12]
 8008f8c:	fb02 f303 	mul.w	r3, r2, r3
 8008f90:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f92:	e019      	b.n	8008fc8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6979      	ldr	r1, [r7, #20]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff fc9a 	bl	80088d2 <get_fat>
 8008f9e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa6:	d101      	bne.n	8008fac <dir_sdi+0x90>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e03c      	b.n	8009026 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d904      	bls.n	8008fbc <dir_sdi+0xa0>
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d301      	bcc.n	8008fc0 <dir_sdi+0xa4>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e032      	b.n	8009026 <dir_sdi+0x10a>
			ofs -= csz;
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d2e1      	bcs.n	8008f94 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008fd0:	6979      	ldr	r1, [r7, #20]
 8008fd2:	6938      	ldr	r0, [r7, #16]
 8008fd4:	f7ff fc5e 	bl	8008894 <clust2sect>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <dir_sdi+0xd4>
 8008fec:	2302      	movs	r3, #2
 8008fee:	e01a      	b.n	8009026 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	899b      	ldrh	r3, [r3, #12]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8009000:	441a      	add	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	899b      	ldrh	r3, [r3, #12]
 8009010:	461a      	mov	r2, r3
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	fbb3 f0f2 	udiv	r0, r3, r2
 8009018:	fb00 f202 	mul.w	r2, r0, r2
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	18ca      	adds	r2, r1, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b086      	sub	sp, #24
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	3320      	adds	r3, #32
 8009044:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <dir_next+0x28>
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009054:	d301      	bcc.n	800905a <dir_next+0x2c>
 8009056:	2304      	movs	r3, #4
 8009058:	e0bb      	b.n	80091d2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	899b      	ldrh	r3, [r3, #12]
 800905e:	461a      	mov	r2, r3
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	fbb3 f1f2 	udiv	r1, r3, r2
 8009066:	fb01 f202 	mul.w	r2, r1, r2
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	f040 809d 	bne.w	80091ac <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10b      	bne.n	800909c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	095b      	lsrs	r3, r3, #5
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	8912      	ldrh	r2, [r2, #8]
 800908c:	4293      	cmp	r3, r2
 800908e:	f0c0 808d 	bcc.w	80091ac <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	61da      	str	r2, [r3, #28]
 8009098:	2304      	movs	r3, #4
 800909a:	e09a      	b.n	80091d2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	899b      	ldrh	r3, [r3, #12]
 80090a0:	461a      	mov	r2, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	8952      	ldrh	r2, [r2, #10]
 80090ac:	3a01      	subs	r2, #1
 80090ae:	4013      	ands	r3, r2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d17b      	bne.n	80091ac <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f7ff fc08 	bl	80088d2 <get_fat>
 80090c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d801      	bhi.n	80090ce <dir_next+0xa0>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e081      	b.n	80091d2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d4:	d101      	bne.n	80090da <dir_next+0xac>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e07b      	b.n	80091d2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d359      	bcc.n	8009198 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	61da      	str	r2, [r3, #28]
 80090f0:	2304      	movs	r3, #4
 80090f2:	e06e      	b.n	80091d2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	4619      	mov	r1, r3
 80090fc:	4610      	mov	r0, r2
 80090fe:	f7ff fe3d 	bl	8008d7c <create_chain>
 8009102:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <dir_next+0xe0>
 800910a:	2307      	movs	r3, #7
 800910c:	e061      	b.n	80091d2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <dir_next+0xea>
 8009114:	2302      	movs	r3, #2
 8009116:	e05c      	b.n	80091d2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d101      	bne.n	8009124 <dir_next+0xf6>
 8009120:	2301      	movs	r3, #1
 8009122:	e056      	b.n	80091d2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7ff fad3 	bl	80086d0 <sync_window>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <dir_next+0x106>
 8009130:	2301      	movs	r3, #1
 8009132:	e04e      	b.n	80091d2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	461a      	mov	r2, r3
 8009140:	2100      	movs	r1, #0
 8009142:	f7ff f8fc 	bl	800833e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009146:	2300      	movs	r3, #0
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	6979      	ldr	r1, [r7, #20]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff fba1 	bl	8008894 <clust2sect>
 8009152:	4602      	mov	r2, r0
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	631a      	str	r2, [r3, #48]	; 0x30
 8009158:	e012      	b.n	8009180 <dir_next+0x152>
						fs->wflag = 1;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f7ff fab5 	bl	80086d0 <sync_window>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <dir_next+0x142>
 800916c:	2301      	movs	r3, #1
 800916e:	e030      	b.n	80091d2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	3301      	adds	r3, #1
 8009174:	613b      	str	r3, [r7, #16]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	631a      	str	r2, [r3, #48]	; 0x30
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	895b      	ldrh	r3, [r3, #10]
 8009184:	461a      	mov	r2, r3
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	4293      	cmp	r3, r2
 800918a:	d3e6      	bcc.n	800915a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800919e:	6979      	ldr	r1, [r7, #20]
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fb77 	bl	8008894 <clust2sect>
 80091a6:	4602      	mov	r2, r0
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	899b      	ldrh	r3, [r3, #12]
 80091bc:	461a      	mov	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80091c4:	fb00 f202 	mul.w	r2, r0, r2
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	18ca      	adds	r2, r1, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b086      	sub	sp, #24
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80091ea:	2100      	movs	r1, #0
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff fe95 	bl	8008f1c <dir_sdi>
 80091f2:	4603      	mov	r3, r0
 80091f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d12b      	bne.n	8009254 <dir_alloc+0x7a>
		n = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	4619      	mov	r1, r3
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff faa6 	bl	8008758 <move_window>
 800920c:	4603      	mov	r3, r0
 800920e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d11d      	bne.n	8009252 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2be5      	cmp	r3, #229	; 0xe5
 800921e:	d004      	beq.n	800922a <dir_alloc+0x50>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d107      	bne.n	800923a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	3301      	adds	r3, #1
 800922e:	613b      	str	r3, [r7, #16]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d102      	bne.n	800923e <dir_alloc+0x64>
 8009238:	e00c      	b.n	8009254 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800923a:	2300      	movs	r3, #0
 800923c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800923e:	2101      	movs	r1, #1
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff fef4 	bl	800902e <dir_next>
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0d7      	beq.n	8009200 <dir_alloc+0x26>
 8009250:	e000      	b.n	8009254 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009252:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	2b04      	cmp	r3, #4
 8009258:	d101      	bne.n	800925e <dir_alloc+0x84>
 800925a:	2307      	movs	r3, #7
 800925c:	75fb      	strb	r3, [r7, #23]
	return res;
 800925e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	331a      	adds	r3, #26
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe ffbe 	bl	80081f8 <ld_word>
 800927c:	4603      	mov	r3, r0
 800927e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b03      	cmp	r3, #3
 8009286:	d109      	bne.n	800929c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	3314      	adds	r3, #20
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe ffb3 	bl	80081f8 <ld_word>
 8009292:	4603      	mov	r3, r0
 8009294:	041b      	lsls	r3, r3, #16
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800929c:	68fb      	ldr	r3, [r7, #12]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	331a      	adds	r3, #26
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	b292      	uxth	r2, r2
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe ffd6 	bl	800826e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d109      	bne.n	80092de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f103 0214 	add.w	r2, r3, #20
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	0c1b      	lsrs	r3, r3, #16
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	4619      	mov	r1, r3
 80092d8:	4610      	mov	r0, r2
 80092da:	f7fe ffc8 	bl	800826e <st_word>
	}
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b086      	sub	sp, #24
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80092f0:	2304      	movs	r3, #4
 80092f2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80092fa:	e03c      	b.n	8009376 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	4619      	mov	r1, r3
 8009302:	6938      	ldr	r0, [r7, #16]
 8009304:	f7ff fa28 	bl	8008758 <move_window>
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d136      	bne.n	8009380 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009320:	2304      	movs	r3, #4
 8009322:	75fb      	strb	r3, [r7, #23]
 8009324:	e031      	b.n	800938a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	330b      	adds	r3, #11
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009332:	73bb      	strb	r3, [r7, #14]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	7bba      	ldrb	r2, [r7, #14]
 8009338:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	2be5      	cmp	r3, #229	; 0xe5
 800933e:	d011      	beq.n	8009364 <dir_read+0x7e>
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	2b2e      	cmp	r3, #46	; 0x2e
 8009344:	d00e      	beq.n	8009364 <dir_read+0x7e>
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b0f      	cmp	r3, #15
 800934a:	d00b      	beq.n	8009364 <dir_read+0x7e>
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	f023 0320 	bic.w	r3, r3, #32
 8009352:	2b08      	cmp	r3, #8
 8009354:	bf0c      	ite	eq
 8009356:	2301      	moveq	r3, #1
 8009358:	2300      	movne	r3, #0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	461a      	mov	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	4293      	cmp	r3, r2
 8009362:	d00f      	beq.n	8009384 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fe61 	bl	800902e <dir_next>
 800936c:	4603      	mov	r3, r0
 800936e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d108      	bne.n	8009388 <dir_read+0xa2>
	while (dp->sect) {
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1be      	bne.n	80092fc <dir_read+0x16>
 800937e:	e004      	b.n	800938a <dir_read+0xa4>
		if (res != FR_OK) break;
 8009380:	bf00      	nop
 8009382:	e002      	b.n	800938a <dir_read+0xa4>
				break;
 8009384:	bf00      	nop
 8009386:	e000      	b.n	800938a <dir_read+0xa4>
		if (res != FR_OK) break;
 8009388:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <dir_read+0xb0>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	61da      	str	r2, [r3, #28]
	return res;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80093ae:	2100      	movs	r1, #0
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff fdb3 	bl	8008f1c <dir_sdi>
 80093b6:	4603      	mov	r3, r0
 80093b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <dir_find+0x24>
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	e03e      	b.n	8009442 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	4619      	mov	r1, r3
 80093ca:	6938      	ldr	r0, [r7, #16]
 80093cc:	f7ff f9c4 	bl	8008758 <move_window>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d12f      	bne.n	800943a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <dir_find+0x4e>
 80093e8:	2304      	movs	r3, #4
 80093ea:	75fb      	strb	r3, [r7, #23]
 80093ec:	e028      	b.n	8009440 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	330b      	adds	r3, #11
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	330b      	adds	r3, #11
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 0308 	and.w	r3, r3, #8
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <dir_find+0x86>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a18      	ldr	r0, [r3, #32]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3324      	adds	r3, #36	; 0x24
 8009418:	220b      	movs	r2, #11
 800941a:	4619      	mov	r1, r3
 800941c:	f7fe ffaa 	bl	8008374 <mem_cmp>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00b      	beq.n	800943e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009426:	2100      	movs	r1, #0
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff fe00 	bl	800902e <dir_next>
 800942e:	4603      	mov	r3, r0
 8009430:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0c5      	beq.n	80093c4 <dir_find+0x24>
 8009438:	e002      	b.n	8009440 <dir_find+0xa0>
		if (res != FR_OK) break;
 800943a:	bf00      	nop
 800943c:	e000      	b.n	8009440 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800943e:	bf00      	nop

	return res;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009458:	2101      	movs	r1, #1
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff febd 	bl	80091da <dir_alloc>
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d11c      	bne.n	80094a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	4619      	mov	r1, r3
 8009470:	68b8      	ldr	r0, [r7, #8]
 8009472:	f7ff f971 	bl	8008758 <move_window>
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d111      	bne.n	80094a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	2220      	movs	r2, #32
 8009486:	2100      	movs	r1, #0
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe ff58 	bl	800833e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a18      	ldr	r0, [r3, #32]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3324      	adds	r3, #36	; 0x24
 8009496:	220b      	movs	r2, #11
 8009498:	4619      	mov	r1, r3
 800949a:	f7fe ff2f 	bl	80082fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2201      	movs	r2, #1
 80094a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	4619      	mov	r1, r3
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff f948 	bl	8008758 <move_window>
 80094c8:	4603      	mov	r3, r0
 80094ca:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80094cc:	7afb      	ldrb	r3, [r7, #11]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	22e5      	movs	r2, #229	; 0xe5
 80094d8:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80094e0:	7afb      	ldrb	r3, [r7, #11]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b086      	sub	sp, #24
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2200      	movs	r2, #0
 80094f8:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d04e      	beq.n	80095a0 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	613b      	str	r3, [r7, #16]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800950a:	e021      	b.n	8009550 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1a      	ldr	r2, [r3, #32]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	1c59      	adds	r1, r3, #1
 8009514:	6179      	str	r1, [r7, #20]
 8009516:	4413      	add	r3, r2
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b20      	cmp	r3, #32
 8009520:	d100      	bne.n	8009524 <get_fileinfo+0x3a>
 8009522:	e015      	b.n	8009550 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b05      	cmp	r3, #5
 8009528:	d101      	bne.n	800952e <get_fileinfo+0x44>
 800952a:	23e5      	movs	r3, #229	; 0xe5
 800952c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b09      	cmp	r3, #9
 8009532:	d106      	bne.n	8009542 <get_fileinfo+0x58>
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	613a      	str	r2, [r7, #16]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4413      	add	r3, r2
 800953e:	222e      	movs	r2, #46	; 0x2e
 8009540:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	613a      	str	r2, [r7, #16]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	4413      	add	r3, r2
 800954c:	7bfa      	ldrb	r2, [r7, #15]
 800954e:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b0a      	cmp	r3, #10
 8009554:	d9da      	bls.n	800950c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4413      	add	r3, r2
 800955c:	3309      	adds	r3, #9
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	7ada      	ldrb	r2, [r3, #11]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	331c      	adds	r3, #28
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fe58 	bl	8008228 <ld_dword>
 8009578:	4602      	mov	r2, r0
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	3316      	adds	r3, #22
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe fe4f 	bl	8008228 <ld_dword>
 800958a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	b29a      	uxth	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	80da      	strh	r2, [r3, #6]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	0c1b      	lsrs	r3, r3, #16
 8009598:	b29a      	uxth	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	809a      	strh	r2, [r3, #4]
 800959e:	e000      	b.n	80095a2 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80095a0:	bf00      	nop
}
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b088      	sub	sp, #32
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3324      	adds	r3, #36	; 0x24
 80095bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80095be:	220b      	movs	r2, #11
 80095c0:	2120      	movs	r1, #32
 80095c2:	68b8      	ldr	r0, [r7, #8]
 80095c4:	f7fe febb 	bl	800833e <mem_set>
	si = i = 0; ni = 8;
 80095c8:	2300      	movs	r3, #0
 80095ca:	613b      	str	r3, [r7, #16]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	61fb      	str	r3, [r7, #28]
 80095d0:	2308      	movs	r3, #8
 80095d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	61fa      	str	r2, [r7, #28]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	4413      	add	r3, r2
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80095e2:	7efb      	ldrb	r3, [r7, #27]
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d94e      	bls.n	8009686 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80095e8:	7efb      	ldrb	r3, [r7, #27]
 80095ea:	2b2f      	cmp	r3, #47	; 0x2f
 80095ec:	d006      	beq.n	80095fc <create_name+0x54>
 80095ee:	7efb      	ldrb	r3, [r7, #27]
 80095f0:	2b5c      	cmp	r3, #92	; 0x5c
 80095f2:	d110      	bne.n	8009616 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80095f4:	e002      	b.n	80095fc <create_name+0x54>
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	3301      	adds	r3, #1
 80095fa:	61fb      	str	r3, [r7, #28]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	4413      	add	r3, r2
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b2f      	cmp	r3, #47	; 0x2f
 8009606:	d0f6      	beq.n	80095f6 <create_name+0x4e>
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	4413      	add	r3, r2
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2b5c      	cmp	r3, #92	; 0x5c
 8009612:	d0f0      	beq.n	80095f6 <create_name+0x4e>
			break;
 8009614:	e038      	b.n	8009688 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009616:	7efb      	ldrb	r3, [r7, #27]
 8009618:	2b2e      	cmp	r3, #46	; 0x2e
 800961a:	d003      	beq.n	8009624 <create_name+0x7c>
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	429a      	cmp	r2, r3
 8009622:	d30c      	bcc.n	800963e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2b0b      	cmp	r3, #11
 8009628:	d002      	beq.n	8009630 <create_name+0x88>
 800962a:	7efb      	ldrb	r3, [r7, #27]
 800962c:	2b2e      	cmp	r3, #46	; 0x2e
 800962e:	d001      	beq.n	8009634 <create_name+0x8c>
 8009630:	2306      	movs	r3, #6
 8009632:	e044      	b.n	80096be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009634:	2308      	movs	r3, #8
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	230b      	movs	r3, #11
 800963a:	617b      	str	r3, [r7, #20]
			continue;
 800963c:	e022      	b.n	8009684 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800963e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009642:	2b00      	cmp	r3, #0
 8009644:	da04      	bge.n	8009650 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009646:	7efb      	ldrb	r3, [r7, #27]
 8009648:	3b80      	subs	r3, #128	; 0x80
 800964a:	4a1f      	ldr	r2, [pc, #124]	; (80096c8 <create_name+0x120>)
 800964c:	5cd3      	ldrb	r3, [r2, r3]
 800964e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009650:	7efb      	ldrb	r3, [r7, #27]
 8009652:	4619      	mov	r1, r3
 8009654:	481d      	ldr	r0, [pc, #116]	; (80096cc <create_name+0x124>)
 8009656:	f7fe feb4 	bl	80083c2 <chk_chr>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <create_name+0xbc>
 8009660:	2306      	movs	r3, #6
 8009662:	e02c      	b.n	80096be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009664:	7efb      	ldrb	r3, [r7, #27]
 8009666:	2b60      	cmp	r3, #96	; 0x60
 8009668:	d905      	bls.n	8009676 <create_name+0xce>
 800966a:	7efb      	ldrb	r3, [r7, #27]
 800966c:	2b7a      	cmp	r3, #122	; 0x7a
 800966e:	d802      	bhi.n	8009676 <create_name+0xce>
 8009670:	7efb      	ldrb	r3, [r7, #27]
 8009672:	3b20      	subs	r3, #32
 8009674:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	613a      	str	r2, [r7, #16]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	4413      	add	r3, r2
 8009680:	7efa      	ldrb	r2, [r7, #27]
 8009682:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009684:	e7a6      	b.n	80095d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009686:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	441a      	add	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <create_name+0xf4>
 8009698:	2306      	movs	r3, #6
 800969a:	e010      	b.n	80096be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2be5      	cmp	r3, #229	; 0xe5
 80096a2:	d102      	bne.n	80096aa <create_name+0x102>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2205      	movs	r2, #5
 80096a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80096aa:	7efb      	ldrb	r3, [r7, #27]
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d801      	bhi.n	80096b4 <create_name+0x10c>
 80096b0:	2204      	movs	r2, #4
 80096b2:	e000      	b.n	80096b6 <create_name+0x10e>
 80096b4:	2200      	movs	r2, #0
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	330b      	adds	r3, #11
 80096ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80096bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3720      	adds	r7, #32
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	0800bf80 	.word	0x0800bf80
 80096cc:	0800bf10 	.word	0x0800bf10

080096d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80096e4:	e002      	b.n	80096ec <follow_path+0x1c>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b2f      	cmp	r3, #47	; 0x2f
 80096f2:	d0f8      	beq.n	80096e6 <follow_path+0x16>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b5c      	cmp	r3, #92	; 0x5c
 80096fa:	d0f4      	beq.n	80096e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2200      	movs	r2, #0
 8009700:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	2b1f      	cmp	r3, #31
 8009708:	d80a      	bhi.n	8009720 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2280      	movs	r2, #128	; 0x80
 800970e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009712:	2100      	movs	r1, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff fc01 	bl	8008f1c <dir_sdi>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]
 800971e:	e048      	b.n	80097b2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009720:	463b      	mov	r3, r7
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff ff3f 	bl	80095a8 <create_name>
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d139      	bne.n	80097a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff fe33 	bl	80093a0 <dir_find>
 800973a:	4603      	mov	r3, r0
 800973c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009744:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	2b04      	cmp	r3, #4
 8009750:	d12c      	bne.n	80097ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	f003 0304 	and.w	r3, r3, #4
 8009758:	2b00      	cmp	r3, #0
 800975a:	d127      	bne.n	80097ac <follow_path+0xdc>
 800975c:	2305      	movs	r3, #5
 800975e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009760:	e024      	b.n	80097ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009762:	7afb      	ldrb	r3, [r7, #11]
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d121      	bne.n	80097b0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	799b      	ldrb	r3, [r3, #6]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009778:	2305      	movs	r3, #5
 800977a:	75fb      	strb	r3, [r7, #23]
 800977c:	e019      	b.n	80097b2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	8992      	ldrh	r2, [r2, #12]
 800978c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009790:	fb00 f202 	mul.w	r2, r0, r2
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	440b      	add	r3, r1
 8009798:	4619      	mov	r1, r3
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff fd64 	bl	8009268 <ld_clust>
 80097a0:	4602      	mov	r2, r0
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097a6:	e7bb      	b.n	8009720 <follow_path+0x50>
			if (res != FR_OK) break;
 80097a8:	bf00      	nop
 80097aa:	e002      	b.n	80097b2 <follow_path+0xe2>
				break;
 80097ac:	bf00      	nop
 80097ae:	e000      	b.n	80097b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80097b0:	bf00      	nop
			}
		}
	}

	return res;
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295
 80097c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d031      	beq.n	8009836 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e002      	b.n	80097e0 <get_ldnumber+0x24>
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	3301      	adds	r3, #1
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d903      	bls.n	80097f0 <get_ldnumber+0x34>
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b3a      	cmp	r3, #58	; 0x3a
 80097ee:	d1f4      	bne.n	80097da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b3a      	cmp	r3, #58	; 0x3a
 80097f6:	d11c      	bne.n	8009832 <get_ldnumber+0x76>
			tp = *path;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	60fa      	str	r2, [r7, #12]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	3b30      	subs	r3, #48	; 0x30
 8009808:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b09      	cmp	r3, #9
 800980e:	d80e      	bhi.n	800982e <get_ldnumber+0x72>
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	429a      	cmp	r2, r3
 8009816:	d10a      	bne.n	800982e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d107      	bne.n	800982e <get_ldnumber+0x72>
					vol = (int)i;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	3301      	adds	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	e002      	b.n	8009838 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009832:	2300      	movs	r3, #0
 8009834:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009836:	693b      	ldr	r3, [r7, #16]
}
 8009838:	4618      	mov	r0, r3
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	70da      	strb	r2, [r3, #3]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f04f 32ff 	mov.w	r2, #4294967295
 800985a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fe ff7a 	bl	8008758 <move_window>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <check_fs+0x2a>
 800986a:	2304      	movs	r3, #4
 800986c:	e038      	b.n	80098e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3334      	adds	r3, #52	; 0x34
 8009872:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fcbe 	bl	80081f8 <ld_word>
 800987c:	4603      	mov	r3, r0
 800987e:	461a      	mov	r2, r3
 8009880:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009884:	429a      	cmp	r2, r3
 8009886:	d001      	beq.n	800988c <check_fs+0x48>
 8009888:	2303      	movs	r3, #3
 800988a:	e029      	b.n	80098e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009892:	2be9      	cmp	r3, #233	; 0xe9
 8009894:	d009      	beq.n	80098aa <check_fs+0x66>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800989c:	2beb      	cmp	r3, #235	; 0xeb
 800989e:	d11e      	bne.n	80098de <check_fs+0x9a>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80098a6:	2b90      	cmp	r3, #144	; 0x90
 80098a8:	d119      	bne.n	80098de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	3334      	adds	r3, #52	; 0x34
 80098ae:	3336      	adds	r3, #54	; 0x36
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fcb9 	bl	8008228 <ld_dword>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80098bc:	4a0a      	ldr	r2, [pc, #40]	; (80098e8 <check_fs+0xa4>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d101      	bne.n	80098c6 <check_fs+0x82>
 80098c2:	2300      	movs	r3, #0
 80098c4:	e00c      	b.n	80098e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3334      	adds	r3, #52	; 0x34
 80098ca:	3352      	adds	r3, #82	; 0x52
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fcab 	bl	8008228 <ld_dword>
 80098d2:	4603      	mov	r3, r0
 80098d4:	4a05      	ldr	r2, [pc, #20]	; (80098ec <check_fs+0xa8>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d101      	bne.n	80098de <check_fs+0x9a>
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80098de:	2302      	movs	r3, #2
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	00544146 	.word	0x00544146
 80098ec:	33544146 	.word	0x33544146

080098f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b096      	sub	sp, #88	; 0x58
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff ff59 	bl	80097bc <get_ldnumber>
 800990a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800990c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990e:	2b00      	cmp	r3, #0
 8009910:	da01      	bge.n	8009916 <find_volume+0x26>
 8009912:	230b      	movs	r3, #11
 8009914:	e262      	b.n	8009ddc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009916:	4a9f      	ldr	r2, [pc, #636]	; (8009b94 <find_volume+0x2a4>)
 8009918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800991e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <find_volume+0x3a>
 8009926:	230c      	movs	r3, #12
 8009928:	e258      	b.n	8009ddc <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800992e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	f023 0301 	bic.w	r3, r3, #1
 8009936:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01a      	beq.n	8009976 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fbb9 	bl	80080bc <disk_status>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10c      	bne.n	8009976 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d007      	beq.n	8009972 <find_volume+0x82>
 8009962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009966:	f003 0304 	and.w	r3, r3, #4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800996e:	230a      	movs	r3, #10
 8009970:	e234      	b.n	8009ddc <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8009972:	2300      	movs	r3, #0
 8009974:	e232      	b.n	8009ddc <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800997c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997e:	b2da      	uxtb	r2, r3
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe fbb1 	bl	80080f0 <disk_initialize>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80099a0:	2303      	movs	r3, #3
 80099a2:	e21b      	b.n	8009ddc <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d007      	beq.n	80099ba <find_volume+0xca>
 80099aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80099b6:	230a      	movs	r3, #10
 80099b8:	e210      	b.n	8009ddc <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	7858      	ldrb	r0, [r3, #1]
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	330c      	adds	r3, #12
 80099c2:	461a      	mov	r2, r3
 80099c4:	2102      	movs	r1, #2
 80099c6:	f7fe fbf9 	bl	80081bc <disk_ioctl>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <find_volume+0xe4>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e203      	b.n	8009ddc <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80099d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d6:	899b      	ldrh	r3, [r3, #12]
 80099d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099dc:	d80d      	bhi.n	80099fa <find_volume+0x10a>
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	899b      	ldrh	r3, [r3, #12]
 80099e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099e6:	d308      	bcc.n	80099fa <find_volume+0x10a>
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	899b      	ldrh	r3, [r3, #12]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	899b      	ldrh	r3, [r3, #12]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	4013      	ands	r3, r2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <find_volume+0x10e>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e1ee      	b.n	8009ddc <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009a02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a06:	f7ff ff1d 	bl	8009844 <check_fs>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d149      	bne.n	8009aac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a18:	2300      	movs	r3, #0
 8009a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a1c:	e01e      	b.n	8009a5c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a26:	011b      	lsls	r3, r3, #4
 8009a28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009a2c:	4413      	add	r3, r2
 8009a2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	3304      	adds	r3, #4
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d006      	beq.n	8009a48 <find_volume+0x158>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fbf2 	bl	8008228 <ld_dword>
 8009a44:	4602      	mov	r2, r0
 8009a46:	e000      	b.n	8009a4a <find_volume+0x15a>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	3358      	adds	r3, #88	; 0x58
 8009a50:	443b      	add	r3, r7
 8009a52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a58:	3301      	adds	r3, #1
 8009a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d9dd      	bls.n	8009a1e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009a62:	2300      	movs	r3, #0
 8009a64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <find_volume+0x182>
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	3358      	adds	r3, #88	; 0x58
 8009a78:	443b      	add	r3, r7
 8009a7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009a7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d005      	beq.n	8009a92 <find_volume+0x1a2>
 8009a86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a8a:	f7ff fedb 	bl	8009844 <check_fs>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	e000      	b.n	8009a94 <find_volume+0x1a4>
 8009a92:	2303      	movs	r3, #3
 8009a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d905      	bls.n	8009aac <find_volume+0x1bc>
 8009aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d9e2      	bls.n	8009a72 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d101      	bne.n	8009ab8 <find_volume+0x1c8>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e191      	b.n	8009ddc <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d901      	bls.n	8009ac4 <find_volume+0x1d4>
 8009ac0:	230d      	movs	r3, #13
 8009ac2:	e18b      	b.n	8009ddc <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac6:	3334      	adds	r3, #52	; 0x34
 8009ac8:	330b      	adds	r3, #11
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fb94 	bl	80081f8 <ld_word>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad6:	899b      	ldrh	r3, [r3, #12]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d001      	beq.n	8009ae0 <find_volume+0x1f0>
 8009adc:	230d      	movs	r3, #13
 8009ade:	e17d      	b.n	8009ddc <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	3334      	adds	r3, #52	; 0x34
 8009ae4:	3316      	adds	r3, #22
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fb86 	bl	80081f8 <ld_word>
 8009aec:	4603      	mov	r3, r0
 8009aee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d106      	bne.n	8009b04 <find_volume+0x214>
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	3334      	adds	r3, #52	; 0x34
 8009afa:	3324      	adds	r3, #36	; 0x24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fb93 	bl	8008228 <ld_dword>
 8009b02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b08:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	789b      	ldrb	r3, [r3, #2]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d005      	beq.n	8009b28 <find_volume+0x238>
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1e:	789b      	ldrb	r3, [r3, #2]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d001      	beq.n	8009b28 <find_volume+0x238>
 8009b24:	230d      	movs	r3, #13
 8009b26:	e159      	b.n	8009ddc <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	789b      	ldrb	r3, [r3, #2]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	895b      	ldrh	r3, [r3, #10]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d008      	beq.n	8009b5c <find_volume+0x26c>
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	895b      	ldrh	r3, [r3, #10]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	895b      	ldrh	r3, [r3, #10]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	4013      	ands	r3, r2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <find_volume+0x270>
 8009b5c:	230d      	movs	r3, #13
 8009b5e:	e13d      	b.n	8009ddc <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	3334      	adds	r3, #52	; 0x34
 8009b64:	3311      	adds	r3, #17
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fb46 	bl	80081f8 <ld_word>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	891b      	ldrh	r3, [r3, #8]
 8009b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b7a:	8992      	ldrh	r2, [r2, #12]
 8009b7c:	0952      	lsrs	r2, r2, #5
 8009b7e:	b292      	uxth	r2, r2
 8009b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b84:	fb01 f202 	mul.w	r2, r1, r2
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <find_volume+0x2a8>
 8009b90:	230d      	movs	r3, #13
 8009b92:	e123      	b.n	8009ddc <find_volume+0x4ec>
 8009b94:	20002888 	.word	0x20002888

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9a:	3334      	adds	r3, #52	; 0x34
 8009b9c:	3313      	adds	r3, #19
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fb2a 	bl	80081f8 <ld_word>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <find_volume+0x2cc>
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	3334      	adds	r3, #52	; 0x34
 8009bb2:	3320      	adds	r3, #32
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fe fb37 	bl	8008228 <ld_dword>
 8009bba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	3334      	adds	r3, #52	; 0x34
 8009bc0:	330e      	adds	r3, #14
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe fb18 	bl	80081f8 <ld_word>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009bcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <find_volume+0x2e6>
 8009bd2:	230d      	movs	r3, #13
 8009bd4:	e102      	b.n	8009ddc <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009bd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bda:	4413      	add	r3, r2
 8009bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bde:	8911      	ldrh	r1, [r2, #8]
 8009be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009be2:	8992      	ldrh	r2, [r2, #12]
 8009be4:	0952      	lsrs	r2, r2, #5
 8009be6:	b292      	uxth	r2, r2
 8009be8:	fbb1 f2f2 	udiv	r2, r1, r2
 8009bec:	b292      	uxth	r2, r2
 8009bee:	4413      	add	r3, r2
 8009bf0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d201      	bcs.n	8009bfe <find_volume+0x30e>
 8009bfa:	230d      	movs	r3, #13
 8009bfc:	e0ee      	b.n	8009ddc <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c06:	8952      	ldrh	r2, [r2, #10]
 8009c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <find_volume+0x328>
 8009c14:	230d      	movs	r3, #13
 8009c16:	e0e1      	b.n	8009ddc <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d802      	bhi.n	8009c2e <find_volume+0x33e>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d802      	bhi.n	8009c3e <find_volume+0x34e>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	1c9a      	adds	r2, r3, #2
 8009c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c44:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c4a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009c4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c50:	441a      	add	r2, r3
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009c56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	441a      	add	r2, r3
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d11e      	bne.n	8009ca6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6a:	3334      	adds	r3, #52	; 0x34
 8009c6c:	332a      	adds	r3, #42	; 0x2a
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fac2 	bl	80081f8 <ld_word>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <find_volume+0x38e>
 8009c7a:	230d      	movs	r3, #13
 8009c7c:	e0ae      	b.n	8009ddc <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	891b      	ldrh	r3, [r3, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <find_volume+0x39a>
 8009c86:	230d      	movs	r3, #13
 8009c88:	e0a8      	b.n	8009ddc <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	3334      	adds	r3, #52	; 0x34
 8009c8e:	332c      	adds	r3, #44	; 0x2c
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fac9 	bl	8008228 <ld_dword>
 8009c96:	4602      	mov	r2, r0
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ca4:	e01f      	b.n	8009ce6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca8:	891b      	ldrh	r3, [r3, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <find_volume+0x3c2>
 8009cae:	230d      	movs	r3, #13
 8009cb0:	e094      	b.n	8009ddc <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cb8:	441a      	add	r2, r3
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d103      	bne.n	8009cce <find_volume+0x3de>
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	e00a      	b.n	8009ce4 <find_volume+0x3f4>
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	699a      	ldr	r2, [r3, #24]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	085a      	lsrs	r2, r3, #1
 8009cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009ce4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	69da      	ldr	r2, [r3, #28]
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	899b      	ldrh	r3, [r3, #12]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf2:	440b      	add	r3, r1
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cf8:	8989      	ldrh	r1, [r1, #12]
 8009cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d201      	bcs.n	8009d06 <find_volume+0x416>
 8009d02:	230d      	movs	r3, #13
 8009d04:	e06a      	b.n	8009ddc <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d08:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0c:	615a      	str	r2, [r3, #20]
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d10:	695a      	ldr	r2, [r3, #20]
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	2280      	movs	r2, #128	; 0x80
 8009d1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009d1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d149      	bne.n	8009db8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	3334      	adds	r3, #52	; 0x34
 8009d28:	3330      	adds	r3, #48	; 0x30
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fa64 	bl	80081f8 <ld_word>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d140      	bne.n	8009db8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d38:	3301      	adds	r3, #1
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d3e:	f7fe fd0b 	bl	8008758 <move_window>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d137      	bne.n	8009db8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	3334      	adds	r3, #52	; 0x34
 8009d52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fa4e 	bl	80081f8 <ld_word>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d127      	bne.n	8009db8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6a:	3334      	adds	r3, #52	; 0x34
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fa5b 	bl	8008228 <ld_dword>
 8009d72:	4603      	mov	r3, r0
 8009d74:	4a1b      	ldr	r2, [pc, #108]	; (8009de4 <find_volume+0x4f4>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d11e      	bne.n	8009db8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7c:	3334      	adds	r3, #52	; 0x34
 8009d7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fa50 	bl	8008228 <ld_dword>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4a17      	ldr	r2, [pc, #92]	; (8009de8 <find_volume+0x4f8>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d113      	bne.n	8009db8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d92:	3334      	adds	r3, #52	; 0x34
 8009d94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fa45 	bl	8008228 <ld_dword>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	3334      	adds	r3, #52	; 0x34
 8009da8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe fa3b 	bl	8008228 <ld_dword>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009dbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <find_volume+0x4fc>)
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	4b08      	ldr	r3, [pc, #32]	; (8009dec <find_volume+0x4fc>)
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	4b07      	ldr	r3, [pc, #28]	; (8009dec <find_volume+0x4fc>)
 8009dce:	881a      	ldrh	r2, [r3, #0]
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dd6:	f7fe fc57 	bl	8008688 <clear_lock>
#endif
	return FR_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3758      	adds	r7, #88	; 0x58
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	41615252 	.word	0x41615252
 8009de8:	61417272 	.word	0x61417272
 8009dec:	2000288c 	.word	0x2000288c

08009df0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009dfa:	2309      	movs	r3, #9
 8009dfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01c      	beq.n	8009e3e <validate+0x4e>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d018      	beq.n	8009e3e <validate+0x4e>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d013      	beq.n	8009e3e <validate+0x4e>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	889a      	ldrh	r2, [r3, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d10c      	bne.n	8009e3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe f946 	bl	80080bc <disk_status>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <validate+0x4e>
			res = FR_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d102      	bne.n	8009e4a <validate+0x5a>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	e000      	b.n	8009e4c <validate+0x5c>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	6013      	str	r3, [r2, #0]
	return res;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	4613      	mov	r3, r2
 8009e68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009e6e:	f107 0310 	add.w	r3, r7, #16
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff fca2 	bl	80097bc <get_ldnumber>
 8009e78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	da01      	bge.n	8009e84 <f_mount+0x28>
 8009e80:	230b      	movs	r3, #11
 8009e82:	e02b      	b.n	8009edc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009e84:	4a17      	ldr	r2, [pc, #92]	; (8009ee4 <f_mount+0x88>)
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009e94:	69b8      	ldr	r0, [r7, #24]
 8009e96:	f7fe fbf7 	bl	8008688 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	490d      	ldr	r1, [pc, #52]	; (8009ee4 <f_mount+0x88>)
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <f_mount+0x66>
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d001      	beq.n	8009ec6 <f_mount+0x6a>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e00a      	b.n	8009edc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ec6:	f107 010c 	add.w	r1, r7, #12
 8009eca:	f107 0308 	add.w	r3, r7, #8
 8009ece:	2200      	movs	r2, #0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff fd0d 	bl	80098f0 <find_volume>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3720      	adds	r7, #32
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20002888 	.word	0x20002888

08009ee8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b098      	sub	sp, #96	; 0x60
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <f_open+0x18>
 8009efc:	2309      	movs	r3, #9
 8009efe:	e1bb      	b.n	800a278 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009f08:	79fa      	ldrb	r2, [r7, #7]
 8009f0a:	f107 0110 	add.w	r1, r7, #16
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fcec 	bl	80098f0 <find_volume>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f040 819f 	bne.w	800a266 <f_open+0x37e>
		dj.obj.fs = fs;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	f107 0314 	add.w	r3, r7, #20
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff fbcb 	bl	80096d0 <follow_path>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11a      	bne.n	8009f7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009f48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	da03      	bge.n	8009f5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009f52:	2306      	movs	r3, #6
 8009f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f58:	e011      	b.n	8009f7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f5a:	79fb      	ldrb	r3, [r7, #7]
 8009f5c:	f023 0301 	bic.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bf14      	ite	ne
 8009f64:	2301      	movne	r3, #1
 8009f66:	2300      	moveq	r3, #0
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fa40 	bl	80083f8 <chk_lock>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	f003 031c 	and.w	r3, r3, #28
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d07f      	beq.n	800a088 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d017      	beq.n	8009fc0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009f90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f94:	2b04      	cmp	r3, #4
 8009f96:	d10e      	bne.n	8009fb6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009f98:	f7fe fa8a 	bl	80084b0 <enq_lock>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <f_open+0xc8>
 8009fa2:	f107 0314 	add.w	r3, r7, #20
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff fa4f 	bl	800944a <dir_register>
 8009fac:	4603      	mov	r3, r0
 8009fae:	e000      	b.n	8009fb2 <f_open+0xca>
 8009fb0:	2312      	movs	r3, #18
 8009fb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	f043 0308 	orr.w	r3, r3, #8
 8009fbc:	71fb      	strb	r3, [r7, #7]
 8009fbe:	e010      	b.n	8009fe2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009fc0:	7ebb      	ldrb	r3, [r7, #26]
 8009fc2:	f003 0311 	and.w	r3, r3, #17
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <f_open+0xea>
					res = FR_DENIED;
 8009fca:	2307      	movs	r3, #7
 8009fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009fd0:	e007      	b.n	8009fe2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <f_open+0xfa>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d168      	bne.n	800a0bc <f_open+0x1d4>
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d063      	beq.n	800a0bc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009ff4:	f7fd fee8 	bl	8007dc8 <get_fattime>
 8009ff8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffc:	330e      	adds	r3, #14
 8009ffe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe f94f 	bl	80082a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	3316      	adds	r3, #22
 800a00a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe f949 	bl	80082a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a014:	330b      	adds	r3, #11
 800a016:	2220      	movs	r2, #32
 800a018:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a01e:	4611      	mov	r1, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff f921 	bl	8009268 <ld_clust>
 800a026:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a02c:	2200      	movs	r2, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff f939 	bl	80092a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	331c      	adds	r3, #28
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe f932 	bl	80082a4 <st_dword>
					fs->wflag = 1;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2201      	movs	r2, #1
 800a044:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d037      	beq.n	800a0bc <f_open+0x1d4>
						dw = fs->winsect;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a050:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a052:	f107 0314 	add.w	r3, r7, #20
 800a056:	2200      	movs	r2, #0
 800a058:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe fe29 	bl	8008cb2 <remove_chain>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d126      	bne.n	800a0bc <f_open+0x1d4>
							res = move_window(fs, dw);
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fb70 	bl	8008758 <move_window>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a082:	3a01      	subs	r2, #1
 800a084:	611a      	str	r2, [r3, #16]
 800a086:	e019      	b.n	800a0bc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d115      	bne.n	800a0bc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a090:	7ebb      	ldrb	r3, [r7, #26]
 800a092:	f003 0310 	and.w	r3, r3, #16
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a09a:	2304      	movs	r3, #4
 800a09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a0a0:	e00c      	b.n	800a0bc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	f003 0302 	and.w	r3, r3, #2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d007      	beq.n	800a0bc <f_open+0x1d4>
 800a0ac:	7ebb      	ldrb	r3, [r7, #26]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <f_open+0x1d4>
						res = FR_DENIED;
 800a0b6:	2307      	movs	r3, #7
 800a0b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d128      	bne.n	800a116 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	f003 0308 	and.w	r3, r3, #8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a0de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bf14      	ite	ne
 800a0ee:	2301      	movne	r3, #1
 800a0f0:	2300      	moveq	r3, #0
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f107 0314 	add.w	r3, r7, #20
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe f9f9 	bl	80084f4 <inc_lock>
 800a102:	4602      	mov	r2, r0
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <f_open+0x22e>
 800a110:	2302      	movs	r3, #2
 800a112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f040 80a3 	bne.w	800a266 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff f89e 	bl	8009268 <ld_clust>
 800a12c:	4602      	mov	r2, r0
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a134:	331c      	adds	r3, #28
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe f876 	bl	8008228 <ld_dword>
 800a13c:	4602      	mov	r2, r0
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	88da      	ldrh	r2, [r3, #6]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	79fa      	ldrb	r2, [r7, #7]
 800a15a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3330      	adds	r3, #48	; 0x30
 800a172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a176:	2100      	movs	r1, #0
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe f8e0 	bl	800833e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	f003 0320 	and.w	r3, r3, #32
 800a184:	2b00      	cmp	r3, #0
 800a186:	d06e      	beq.n	800a266 <f_open+0x37e>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d06a      	beq.n	800a266 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	895b      	ldrh	r3, [r3, #10]
 800a19c:	461a      	mov	r2, r3
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	899b      	ldrh	r3, [r3, #12]
 800a1a2:	fb02 f303 	mul.w	r3, r2, r3
 800a1a6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	657b      	str	r3, [r7, #84]	; 0x54
 800a1b4:	e016      	b.n	800a1e4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fb89 	bl	80088d2 <get_fat>
 800a1c0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a1c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d802      	bhi.n	800a1ce <f_open+0x2e6>
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a1ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d4:	d102      	bne.n	800a1dc <f_open+0x2f4>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	657b      	str	r3, [r7, #84]	; 0x54
 800a1e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d103      	bne.n	800a1f4 <f_open+0x30c>
 800a1ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d8e0      	bhi.n	800a1b6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d131      	bne.n	800a266 <f_open+0x37e>
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	899b      	ldrh	r3, [r3, #12]
 800a206:	461a      	mov	r2, r3
 800a208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a20a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a20e:	fb01 f202 	mul.w	r2, r1, r2
 800a212:	1a9b      	subs	r3, r3, r2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d026      	beq.n	800a266 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe fb39 	bl	8008894 <clust2sect>
 800a222:	6478      	str	r0, [r7, #68]	; 0x44
 800a224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a226:	2b00      	cmp	r3, #0
 800a228:	d103      	bne.n	800a232 <f_open+0x34a>
						res = FR_INT_ERR;
 800a22a:	2302      	movs	r3, #2
 800a22c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a230:	e019      	b.n	800a266 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	899b      	ldrh	r3, [r3, #12]
 800a236:	461a      	mov	r2, r3
 800a238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a23e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	7858      	ldrb	r0, [r3, #1]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6a1a      	ldr	r2, [r3, #32]
 800a254:	2301      	movs	r3, #1
 800a256:	f7fd ff71 	bl	800813c <disk_read>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <f_open+0x37e>
 800a260:	2301      	movs	r3, #1
 800a262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <f_open+0x38c>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3760      	adds	r7, #96	; 0x60
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08e      	sub	sp, #56	; 0x38
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2200      	movs	r2, #0
 800a296:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f107 0214 	add.w	r2, r7, #20
 800a29e:	4611      	mov	r1, r2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff fda5 	bl	8009df0 <validate>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a2ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d107      	bne.n	800a2c4 <f_read+0x44>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	7d5b      	ldrb	r3, [r3, #21]
 800a2b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <f_read+0x4a>
 800a2c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2c8:	e135      	b.n	800a536 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	7d1b      	ldrb	r3, [r3, #20]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <f_read+0x5a>
 800a2d6:	2307      	movs	r3, #7
 800a2d8:	e12d      	b.n	800a536 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	f240 811e 	bls.w	800a52c <f_read+0x2ac>
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a2f4:	e11a      	b.n	800a52c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	8992      	ldrh	r2, [r2, #12]
 800a2fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800a302:	fb01 f202 	mul.w	r2, r1, r2
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f040 80d5 	bne.w	800a4b8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	8992      	ldrh	r2, [r2, #12]
 800a316:	fbb3 f3f2 	udiv	r3, r3, r2
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	8952      	ldrh	r2, [r2, #10]
 800a31e:	3a01      	subs	r2, #1
 800a320:	4013      	ands	r3, r2
 800a322:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d12f      	bne.n	800a38a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	633b      	str	r3, [r7, #48]	; 0x30
 800a338:	e013      	b.n	800a362 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	4619      	mov	r1, r3
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fe fdaf 	bl	8008eac <clmt_clust>
 800a34e:	6338      	str	r0, [r7, #48]	; 0x30
 800a350:	e007      	b.n	800a362 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe fab9 	bl	80088d2 <get_fat>
 800a360:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	2b01      	cmp	r3, #1
 800a366:	d804      	bhi.n	800a372 <f_read+0xf2>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2202      	movs	r2, #2
 800a36c:	755a      	strb	r2, [r3, #21]
 800a36e:	2302      	movs	r3, #2
 800a370:	e0e1      	b.n	800a536 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d104      	bne.n	800a384 <f_read+0x104>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2201      	movs	r2, #1
 800a37e:	755a      	strb	r2, [r3, #21]
 800a380:	2301      	movs	r3, #1
 800a382:	e0d8      	b.n	800a536 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a388:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f7fe fa7e 	bl	8008894 <clust2sect>
 800a398:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d104      	bne.n	800a3aa <f_read+0x12a>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	755a      	strb	r2, [r3, #21]
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e0c5      	b.n	800a536 <f_read+0x2b6>
			sect += csect;
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	899b      	ldrh	r3, [r3, #12]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d041      	beq.n	800a44a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ca:	4413      	add	r3, r2
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	8952      	ldrh	r2, [r2, #10]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d905      	bls.n	800a3e0 <f_read+0x160>
					cc = fs->csize - csect;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	895b      	ldrh	r3, [r3, #10]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	7858      	ldrb	r0, [r3, #1]
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ea:	f7fd fea7 	bl	800813c <disk_read>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d004      	beq.n	800a3fe <f_read+0x17e>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	755a      	strb	r2, [r3, #21]
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e09b      	b.n	800a536 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	7d1b      	ldrb	r3, [r3, #20]
 800a402:	b25b      	sxtb	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	da18      	bge.n	800a43a <f_read+0x1ba>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a1a      	ldr	r2, [r3, #32]
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a412:	429a      	cmp	r2, r3
 800a414:	d911      	bls.n	800a43a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a1a      	ldr	r2, [r3, #32]
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	8992      	ldrh	r2, [r2, #12]
 800a422:	fb02 f303 	mul.w	r3, r2, r3
 800a426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a428:	18d0      	adds	r0, r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	899b      	ldrh	r3, [r3, #12]
 800a434:	461a      	mov	r2, r3
 800a436:	f7fd ff61 	bl	80082fc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	899b      	ldrh	r3, [r3, #12]
 800a43e:	461a      	mov	r2, r3
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	fb02 f303 	mul.w	r3, r2, r3
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a448:	e05c      	b.n	800a504 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	429a      	cmp	r2, r3
 800a452:	d02e      	beq.n	800a4b2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	b25b      	sxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	da18      	bge.n	800a490 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	7858      	ldrb	r0, [r3, #1]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1a      	ldr	r2, [r3, #32]
 800a46c:	2301      	movs	r3, #1
 800a46e:	f7fd fe85 	bl	800817c <disk_write>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <f_read+0x202>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2201      	movs	r2, #1
 800a47c:	755a      	strb	r2, [r3, #21]
 800a47e:	2301      	movs	r3, #1
 800a480:	e059      	b.n	800a536 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	7d1b      	ldrb	r3, [r3, #20]
 800a486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	7858      	ldrb	r0, [r3, #1]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a49a:	2301      	movs	r3, #1
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	f7fd fe4d 	bl	800813c <disk_read>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d004      	beq.n	800a4b2 <f_read+0x232>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	755a      	strb	r2, [r3, #21]
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e041      	b.n	800a536 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	899b      	ldrh	r3, [r3, #12]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	8992      	ldrh	r2, [r2, #12]
 800a4c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4ca:	fb01 f202 	mul.w	r2, r1, r2
 800a4ce:	1a9b      	subs	r3, r3, r2
 800a4d0:	1ac3      	subs	r3, r0, r3
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a4d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d901      	bls.n	800a4e0 <f_read+0x260>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	8992      	ldrh	r2, [r2, #12]
 800a4ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4f2:	fb00 f202 	mul.w	r2, r0, r2
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	440b      	add	r3, r1
 800a4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a500:	f7fd fefc 	bl	80082fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	4413      	add	r3, r2
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	699a      	ldr	r2, [r3, #24]
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a512:	441a      	add	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	619a      	str	r2, [r3, #24]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	441a      	add	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f47f aee1 	bne.w	800a2f6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3738      	adds	r7, #56	; 0x38
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b08c      	sub	sp, #48	; 0x30
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	607a      	str	r2, [r7, #4]
 800a54a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f107 0210 	add.w	r2, r7, #16
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff fc46 	bl	8009df0 <validate>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a56a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d107      	bne.n	800a582 <f_write+0x44>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	7d5b      	ldrb	r3, [r3, #21]
 800a576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a57a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <f_write+0x4a>
 800a582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a586:	e16a      	b.n	800a85e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	7d1b      	ldrb	r3, [r3, #20]
 800a58c:	f003 0302 	and.w	r3, r3, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <f_write+0x5a>
 800a594:	2307      	movs	r3, #7
 800a596:	e162      	b.n	800a85e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699a      	ldr	r2, [r3, #24]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	441a      	add	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	f080 814c 	bcs.w	800a842 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	43db      	mvns	r3, r3
 800a5b0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a5b2:	e146      	b.n	800a842 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	8992      	ldrh	r2, [r2, #12]
 800a5bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5c0:	fb01 f202 	mul.w	r2, r1, r2
 800a5c4:	1a9b      	subs	r3, r3, r2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 80f1 	bne.w	800a7ae <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	8992      	ldrh	r2, [r2, #12]
 800a5d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	8952      	ldrh	r2, [r2, #10]
 800a5dc:	3a01      	subs	r2, #1
 800a5de:	4013      	ands	r3, r2
 800a5e0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d143      	bne.n	800a670 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10c      	bne.n	800a60a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d11a      	bne.n	800a632 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2100      	movs	r1, #0
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe fbbb 	bl	8008d7c <create_chain>
 800a606:	62b8      	str	r0, [r7, #40]	; 0x28
 800a608:	e013      	b.n	800a632 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d007      	beq.n	800a622 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	4619      	mov	r1, r3
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7fe fc47 	bl	8008eac <clmt_clust>
 800a61e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a620:	e007      	b.n	800a632 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f7fe fba6 	bl	8008d7c <create_chain>
 800a630:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8109 	beq.w	800a84c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d104      	bne.n	800a64a <f_write+0x10c>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2202      	movs	r2, #2
 800a644:	755a      	strb	r2, [r3, #21]
 800a646:	2302      	movs	r3, #2
 800a648:	e109      	b.n	800a85e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d104      	bne.n	800a65c <f_write+0x11e>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	755a      	strb	r2, [r3, #21]
 800a658:	2301      	movs	r3, #1
 800a65a:	e100      	b.n	800a85e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a660:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d102      	bne.n	800a670 <f_write+0x132>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a66e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	7d1b      	ldrb	r3, [r3, #20]
 800a674:	b25b      	sxtb	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	da18      	bge.n	800a6ac <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	7858      	ldrb	r0, [r3, #1]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a1a      	ldr	r2, [r3, #32]
 800a688:	2301      	movs	r3, #1
 800a68a:	f7fd fd77 	bl	800817c <disk_write>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d004      	beq.n	800a69e <f_write+0x160>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2201      	movs	r2, #1
 800a698:	755a      	strb	r2, [r3, #21]
 800a69a:	2301      	movs	r3, #1
 800a69c:	e0df      	b.n	800a85e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	7d1b      	ldrb	r3, [r3, #20]
 800a6a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f7fe f8ed 	bl	8008894 <clust2sect>
 800a6ba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d104      	bne.n	800a6cc <f_write+0x18e>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	755a      	strb	r2, [r3, #21]
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	e0c8      	b.n	800a85e <f_write+0x320>
			sect += csect;
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	899b      	ldrh	r3, [r3, #12]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6e0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d043      	beq.n	800a770 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	8952      	ldrh	r2, [r2, #10]
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d905      	bls.n	800a702 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	895b      	ldrh	r3, [r3, #10]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	7858      	ldrb	r0, [r3, #1]
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	69f9      	ldr	r1, [r7, #28]
 800a70c:	f7fd fd36 	bl	800817c <disk_write>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d004      	beq.n	800a720 <f_write+0x1e2>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2201      	movs	r2, #1
 800a71a:	755a      	strb	r2, [r3, #21]
 800a71c:	2301      	movs	r3, #1
 800a71e:	e09e      	b.n	800a85e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a1a      	ldr	r2, [r3, #32]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	6a3a      	ldr	r2, [r7, #32]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d918      	bls.n	800a760 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6a1a      	ldr	r2, [r3, #32]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	8992      	ldrh	r2, [r2, #12]
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	69fa      	ldr	r2, [r7, #28]
 800a746:	18d1      	adds	r1, r2, r3
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	899b      	ldrh	r3, [r3, #12]
 800a74c:	461a      	mov	r2, r3
 800a74e:	f7fd fdd5 	bl	80082fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	7d1b      	ldrb	r3, [r3, #20]
 800a756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	899b      	ldrh	r3, [r3, #12]
 800a764:	461a      	mov	r2, r3
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	fb02 f303 	mul.w	r3, r2, r3
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a76e:	e04b      	b.n	800a808 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	429a      	cmp	r2, r3
 800a778:	d016      	beq.n	800a7a8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a782:	429a      	cmp	r2, r3
 800a784:	d210      	bcs.n	800a7a8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	7858      	ldrb	r0, [r3, #1]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a790:	2301      	movs	r3, #1
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	f7fd fcd2 	bl	800813c <disk_read>
 800a798:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d004      	beq.n	800a7a8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	755a      	strb	r2, [r3, #21]
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e05a      	b.n	800a85e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	899b      	ldrh	r3, [r3, #12]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	8992      	ldrh	r2, [r2, #12]
 800a7bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7c0:	fb01 f202 	mul.w	r2, r1, r2
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	1ac3      	subs	r3, r0, r3
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a7ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d901      	bls.n	800a7d6 <f_write+0x298>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	8992      	ldrh	r2, [r2, #12]
 800a7e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7e8:	fb00 f202 	mul.w	r2, r0, r2
 800a7ec:	1a9b      	subs	r3, r3, r2
 800a7ee:	440b      	add	r3, r1
 800a7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f2:	69f9      	ldr	r1, [r7, #28]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fd fd81 	bl	80082fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	7d1b      	ldrb	r3, [r3, #20]
 800a7fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a802:	b2da      	uxtb	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	4413      	add	r3, r2
 800a80e:	61fb      	str	r3, [r7, #28]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	699a      	ldr	r2, [r3, #24]
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	441a      	add	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	619a      	str	r2, [r3, #24]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	429a      	cmp	r2, r3
 800a826:	bf38      	it	cc
 800a828:	461a      	movcc	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	60da      	str	r2, [r3, #12]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	441a      	add	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f47f aeb5 	bne.w	800a5b4 <f_write+0x76>
 800a84a:	e000      	b.n	800a84e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a84c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	7d1b      	ldrb	r3, [r3, #20]
 800a852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a856:	b2da      	uxtb	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3730      	adds	r7, #48	; 0x30
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b086      	sub	sp, #24
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f107 0208 	add.w	r2, r7, #8
 800a874:	4611      	mov	r1, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff faba 	bl	8009df0 <validate>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d168      	bne.n	800a958 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7d1b      	ldrb	r3, [r3, #20]
 800a88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d062      	beq.n	800a958 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	7d1b      	ldrb	r3, [r3, #20]
 800a896:	b25b      	sxtb	r3, r3
 800a898:	2b00      	cmp	r3, #0
 800a89a:	da15      	bge.n	800a8c8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	7858      	ldrb	r0, [r3, #1]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1a      	ldr	r2, [r3, #32]
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	f7fd fc66 	bl	800817c <disk_write>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <f_sync+0x54>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e04f      	b.n	800a95a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	7d1b      	ldrb	r3, [r3, #20]
 800a8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a8c8:	f7fd fa7e 	bl	8007dc8 <get_fattime>
 800a8cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	f7fd ff3e 	bl	8008758 <move_window>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d138      	bne.n	800a958 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	330b      	adds	r3, #11
 800a8f0:	781a      	ldrb	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	330b      	adds	r3, #11
 800a8f6:	f042 0220 	orr.w	r2, r2, #32
 800a8fa:	b2d2      	uxtb	r2, r2
 800a8fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	461a      	mov	r2, r3
 800a908:	68f9      	ldr	r1, [r7, #12]
 800a90a:	f7fe fccc 	bl	80092a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f103 021c 	add.w	r2, r3, #28
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f7fd fcc2 	bl	80082a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3316      	adds	r3, #22
 800a924:	6939      	ldr	r1, [r7, #16]
 800a926:	4618      	mov	r0, r3
 800a928:	f7fd fcbc 	bl	80082a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3312      	adds	r3, #18
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f7fd fc9b 	bl	800826e <st_word>
					fs->wflag = 1;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2201      	movs	r2, #1
 800a93c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	4618      	mov	r0, r3
 800a942:	f7fd ff37 	bl	80087b4 <sync_fs>
 800a946:	4603      	mov	r3, r0
 800a948:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7d1b      	ldrb	r3, [r3, #20]
 800a94e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a952:	b2da      	uxtb	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a958:	7dfb      	ldrb	r3, [r7, #23]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff ff7b 	bl	800a866 <f_sync>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d118      	bne.n	800a9ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f107 0208 	add.w	r2, r7, #8
 800a980:	4611      	mov	r1, r2
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff fa34 	bl	8009df0 <validate>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10c      	bne.n	800a9ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	4618      	mov	r0, r3
 800a998:	f7fd fe3a 	bl	8008610 <dec_lock>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d102      	bne.n	800a9ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b086      	sub	sp, #24
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <f_opendir+0x14>
 800a9c6:	2309      	movs	r3, #9
 800a9c8:	e064      	b.n	800aa94 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a9ce:	f107 010c 	add.w	r1, r7, #12
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe ff8a 	bl	80098f0 <find_volume>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d14f      	bne.n	800aa86 <f_opendir+0xd0>
		obj->fs = fs;
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7fe fe6d 	bl	80096d0 <follow_path>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d13d      	bne.n	800aa7c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa06:	b25b      	sxtb	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	db12      	blt.n	800aa32 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	799b      	ldrb	r3, [r3, #6]
 800aa10:	f003 0310 	and.w	r3, r3, #16
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00a      	beq.n	800aa2e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4610      	mov	r0, r2
 800aa22:	f7fe fc21 	bl	8009268 <ld_clust>
 800aa26:	4602      	mov	r2, r0
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	609a      	str	r2, [r3, #8]
 800aa2c:	e001      	b.n	800aa32 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800aa2e:	2305      	movs	r3, #5
 800aa30:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d121      	bne.n	800aa7c <f_opendir+0xc6>
				obj->id = fs->id;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	88da      	ldrh	r2, [r3, #6]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800aa40:	2100      	movs	r1, #0
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7fe fa6a 	bl	8008f1c <dir_sdi>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d114      	bne.n	800aa7c <f_opendir+0xc6>
					if (obj->sclust) {
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00d      	beq.n	800aa76 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7fd fd49 	bl	80084f4 <inc_lock>
 800aa62:	4602      	mov	r2, r0
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <f_opendir+0xc6>
 800aa70:	2312      	movs	r3, #18
 800aa72:	75fb      	strb	r3, [r7, #23]
 800aa74:	e002      	b.n	800aa7c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d101      	bne.n	800aa86 <f_opendir+0xd0>
 800aa82:	2305      	movs	r3, #5
 800aa84:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <f_opendir+0xdc>
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f107 0208 	add.w	r2, r7, #8
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7ff f99f 	bl	8009df0 <validate>
 800aab2:	4603      	mov	r3, r0
 800aab4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d110      	bne.n	800aade <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fd fda1 	bl	8008610 <dec_lock>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800aade:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f107 0208 	add.w	r2, r7, #8
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff f978 	bl	8009df0 <validate>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d126      	bne.n	800ab58 <f_readdir+0x70>
		if (!fno) {
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ab10:	2100      	movs	r1, #0
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7fe fa02 	bl	8008f1c <dir_sdi>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]
 800ab1c:	e01c      	b.n	800ab58 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ab1e:	2100      	movs	r1, #0
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7fe fbe0 	bl	80092e6 <dir_read>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d101      	bne.n	800ab34 <f_readdir+0x4c>
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10e      	bne.n	800ab58 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7fe fcd4 	bl	80094ea <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ab42:	2100      	movs	r1, #0
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7fe fa72 	bl	800902e <dir_next>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	d101      	bne.n	800ab58 <f_readdir+0x70>
 800ab54:	2300      	movs	r3, #0
 800ab56:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b090      	sub	sp, #64	; 0x40
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ab6c:	f107 010c 	add.w	r1, r7, #12
 800ab70:	1d3b      	adds	r3, r7, #4
 800ab72:	2200      	movs	r2, #0
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe febb 	bl	80098f0 <find_volume>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800ab80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d11f      	bne.n	800abc8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	f107 030c 	add.w	r3, r7, #12
 800ab8e:	4611      	mov	r1, r2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe fd9d 	bl	80096d0 <follow_path>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ab9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d111      	bne.n	800abc8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800aba4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aba8:	b25b      	sxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	da03      	bge.n	800abb6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800abae:	2306      	movs	r3, #6
 800abb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800abb4:	e008      	b.n	800abc8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d005      	beq.n	800abc8 <f_stat+0x66>
 800abbc:	f107 030c 	add.w	r3, r7, #12
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fc91 	bl	80094ea <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800abc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3740      	adds	r7, #64	; 0x40
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b092      	sub	sp, #72	; 0x48
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800abe0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800abe4:	f107 030c 	add.w	r3, r7, #12
 800abe8:	2200      	movs	r2, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fe80 	bl	80098f0 <find_volume>
 800abf0:	4603      	mov	r3, r0
 800abf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800abf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f040 8099 	bne.w	800ad32 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ac00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	695a      	ldr	r2, [r3, #20]
 800ac0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	3b02      	subs	r3, #2
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d804      	bhi.n	800ac1e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	695a      	ldr	r2, [r3, #20]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	e089      	b.n	800ad32 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d128      	bne.n	800ac7c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ac32:	f107 0314 	add.w	r3, r7, #20
 800ac36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fd fe4a 	bl	80088d2 <get_fat>
 800ac3e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d103      	bne.n	800ac50 <f_getfree+0x7c>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac4e:	e063      	b.n	800ad18 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d103      	bne.n	800ac5e <f_getfree+0x8a>
 800ac56:	2302      	movs	r3, #2
 800ac58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac5c:	e05c      	b.n	800ad18 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d102      	bne.n	800ac6a <f_getfree+0x96>
 800ac64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac66:	3301      	adds	r3, #1
 800ac68:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d3db      	bcc.n	800ac32 <f_getfree+0x5e>
 800ac7a:	e04d      	b.n	800ad18 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d113      	bne.n	800acbe <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ac96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	1c5a      	adds	r2, r3, #1
 800ac9c:	63ba      	str	r2, [r7, #56]	; 0x38
 800ac9e:	4619      	mov	r1, r3
 800aca0:	f7fd fd5a 	bl	8008758 <move_window>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800acaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d131      	bne.n	800ad16 <f_getfree+0x142>
							p = fs->win;
 800acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb4:	3334      	adds	r3, #52	; 0x34
 800acb6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	899b      	ldrh	r3, [r3, #12]
 800acbc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d10f      	bne.n	800ace6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800acc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acc8:	f7fd fa96 	bl	80081f8 <ld_word>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d102      	bne.n	800acd8 <f_getfree+0x104>
 800acd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd4:	3301      	adds	r3, #1
 800acd6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acda:	3302      	adds	r3, #2
 800acdc:	633b      	str	r3, [r7, #48]	; 0x30
 800acde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace0:	3b02      	subs	r3, #2
 800ace2:	637b      	str	r3, [r7, #52]	; 0x34
 800ace4:	e010      	b.n	800ad08 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ace6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ace8:	f7fd fa9e 	bl	8008228 <ld_dword>
 800acec:	4603      	mov	r3, r0
 800acee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <f_getfree+0x128>
 800acf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acf8:	3301      	adds	r3, #1
 800acfa:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	3304      	adds	r3, #4
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad04:	3b04      	subs	r3, #4
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ad08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1bd      	bne.n	800ac90 <f_getfree+0xbc>
 800ad14:	e000      	b.n	800ad18 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ad16:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad1c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad22:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	791a      	ldrb	r2, [r3, #4]
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	f042 0201 	orr.w	r2, r2, #1
 800ad2e:	b2d2      	uxtb	r2, r2
 800ad30:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ad32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3748      	adds	r7, #72	; 0x48
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b09e      	sub	sp, #120	; 0x78
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ad4a:	f107 010c 	add.w	r1, r7, #12
 800ad4e:	1d3b      	adds	r3, r7, #4
 800ad50:	2202      	movs	r2, #2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe fdcc 	bl	80098f0 <find_volume>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800ad62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f040 808e 	bne.w	800ae88 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad72:	4611      	mov	r1, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe fcab 	bl	80096d0 <follow_path>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800ad80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d108      	bne.n	800ad9a <f_unlink+0x5c>
 800ad88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad8c:	2102      	movs	r1, #2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fd fb32 	bl	80083f8 <chk_lock>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ad9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d172      	bne.n	800ae88 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ada2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	da03      	bge.n	800adb4 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800adac:	2306      	movs	r3, #6
 800adae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800adb2:	e008      	b.n	800adc6 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800adb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800adc0:	2307      	movs	r3, #7
 800adc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800adc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d134      	bne.n	800ae38 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe fa47 	bl	8009268 <ld_clust>
 800adda:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800addc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d027      	beq.n	800ae38 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800adec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adee:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800adf0:	f107 0310 	add.w	r3, r7, #16
 800adf4:	2100      	movs	r1, #0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe f890 	bl	8008f1c <dir_sdi>
 800adfc:	4603      	mov	r3, r0
 800adfe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800ae02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d116      	bne.n	800ae38 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ae0a:	f107 0310 	add.w	r3, r7, #16
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fa68 	bl	80092e6 <dir_read>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ae1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d102      	bne.n	800ae2a <f_unlink+0xec>
 800ae24:	2307      	movs	r3, #7
 800ae26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ae2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d102      	bne.n	800ae38 <f_unlink+0xfa>
 800ae32:	2300      	movs	r3, #0
 800ae34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800ae38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d123      	bne.n	800ae88 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ae40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe fb32 	bl	80094ae <dir_remove>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ae50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10c      	bne.n	800ae72 <f_unlink+0x134>
 800ae58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ae5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ae62:	2200      	movs	r2, #0
 800ae64:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd ff23 	bl	8008cb2 <remove_chain>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ae72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <f_unlink+0x14a>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fd fc99 	bl	80087b4 <sync_fs>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ae88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3778      	adds	r7, #120	; 0x78
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b096      	sub	sp, #88	; 0x58
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ae9c:	f107 0108 	add.w	r1, r7, #8
 800aea0:	1d3b      	adds	r3, r7, #4
 800aea2:	2202      	movs	r2, #2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fe fd23 	bl	80098f0 <find_volume>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800aeb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 80f2 	bne.w	800b0a2 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	f107 030c 	add.w	r3, r7, #12
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fc02 	bl	80096d0 <follow_path>
 800aecc:	4603      	mov	r3, r0
 800aece:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800aed2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <f_mkdir+0x4c>
 800aeda:	2308      	movs	r3, #8
 800aedc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800aee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	f040 80dc 	bne.w	800b0a2 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800aeea:	f107 030c 	add.w	r3, r7, #12
 800aeee:	2100      	movs	r1, #0
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fd ff43 	bl	8008d7c <create_chain>
 800aef6:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	895b      	ldrh	r3, [r3, #10]
 800aefc:	461a      	mov	r2, r3
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	899b      	ldrh	r3, [r3, #12]
 800af02:	fb02 f303 	mul.w	r3, r2, r3
 800af06:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800af0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af10:	2b00      	cmp	r3, #0
 800af12:	d102      	bne.n	800af1a <f_mkdir+0x86>
 800af14:	2307      	movs	r3, #7
 800af16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800af1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d102      	bne.n	800af26 <f_mkdir+0x92>
 800af20:	2302      	movs	r3, #2
 800af22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800af26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2c:	d102      	bne.n	800af34 <f_mkdir+0xa0>
 800af2e:	2301      	movs	r3, #1
 800af30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800af34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <f_mkdir+0xb6>
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fd fbc6 	bl	80086d0 <sync_window>
 800af44:	4603      	mov	r3, r0
 800af46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800af4a:	f7fc ff3d 	bl	8007dc8 <get_fattime>
 800af4e:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800af50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af54:	2b00      	cmp	r3, #0
 800af56:	d16c      	bne.n	800b032 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fd fc99 	bl	8008894 <clust2sect>
 800af62:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	3334      	adds	r3, #52	; 0x34
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	899b      	ldrh	r3, [r3, #12]
 800af6e:	461a      	mov	r2, r3
 800af70:	2100      	movs	r1, #0
 800af72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af74:	f7fd f9e3 	bl	800833e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800af78:	220b      	movs	r2, #11
 800af7a:	2120      	movs	r1, #32
 800af7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af7e:	f7fd f9de 	bl	800833e <mem_set>
					dir[DIR_Name] = '.';
 800af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af84:	222e      	movs	r2, #46	; 0x2e
 800af86:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800af88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8a:	330b      	adds	r3, #11
 800af8c:	2210      	movs	r2, #16
 800af8e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800af90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af92:	3316      	adds	r3, #22
 800af94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af96:	4618      	mov	r0, r3
 800af98:	f7fd f984 	bl	80082a4 <st_dword>
					st_clust(fs, dir, dcl);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe f97f 	bl	80092a6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800afa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afaa:	3320      	adds	r3, #32
 800afac:	2220      	movs	r2, #32
 800afae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fd f9a3 	bl	80082fc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800afb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb8:	3321      	adds	r3, #33	; 0x21
 800afba:	222e      	movs	r2, #46	; 0x2e
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d106      	bne.n	800afd8 <f_mkdir+0x144>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d101      	bne.n	800afd8 <f_mkdir+0x144>
 800afd4:	2300      	movs	r3, #0
 800afd6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800afd8:	68b8      	ldr	r0, [r7, #8]
 800afda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afdc:	3320      	adds	r3, #32
 800afde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afe0:	4619      	mov	r1, r3
 800afe2:	f7fe f960 	bl	80092a6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	895b      	ldrh	r3, [r3, #10]
 800afea:	653b      	str	r3, [r7, #80]	; 0x50
 800afec:	e01c      	b.n	800b028 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800afee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2201      	movs	r2, #1
 800affc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	4618      	mov	r0, r3
 800b002:	f7fd fb65 	bl	80086d0 <sync_window>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b00c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10d      	bne.n	800b030 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	899b      	ldrh	r3, [r3, #12]
 800b018:	461a      	mov	r2, r3
 800b01a:	2100      	movs	r1, #0
 800b01c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b01e:	f7fd f98e 	bl	800833e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b024:	3b01      	subs	r3, #1
 800b026:	653b      	str	r3, [r7, #80]	; 0x50
 800b028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1df      	bne.n	800afee <f_mkdir+0x15a>
 800b02e:	e000      	b.n	800b032 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800b030:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b036:	2b00      	cmp	r3, #0
 800b038:	d107      	bne.n	800b04a <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b03a:	f107 030c 	add.w	r3, r7, #12
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fe fa03 	bl	800944a <dir_register>
 800b044:	4603      	mov	r3, r0
 800b046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b04a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d120      	bne.n	800b094 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b058:	3316      	adds	r3, #22
 800b05a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fd f921 	bl	80082a4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe f91c 	bl	80092a6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b070:	330b      	adds	r3, #11
 800b072:	2210      	movs	r2, #16
 800b074:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2201      	movs	r2, #1
 800b07a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b07c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10e      	bne.n	800b0a2 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4618      	mov	r0, r3
 800b088:	f7fd fb94 	bl	80087b4 <sync_fs>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b092:	e006      	b.n	800b0a2 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b094:	f107 030c 	add.w	r3, r7, #12
 800b098:	2200      	movs	r2, #0
 800b09a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fd fe08 	bl	8008cb2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b0a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3758      	adds	r7, #88	; 0x58
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b0c6:	4b1f      	ldr	r3, [pc, #124]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b0c8:	7a5b      	ldrb	r3, [r3, #9]
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d131      	bne.n	800b134 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0d0:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b0d2:	7a5b      	ldrb	r3, [r3, #9]
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4b1a      	ldr	r3, [pc, #104]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b0da:	2100      	movs	r1, #0
 800b0dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0de:	4b19      	ldr	r3, [pc, #100]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b0e0:	7a5b      	ldrb	r3, [r3, #9]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	4a17      	ldr	r2, [pc, #92]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0ee:	4b15      	ldr	r3, [pc, #84]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b0f0:	7a5b      	ldrb	r3, [r3, #9]
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4b13      	ldr	r3, [pc, #76]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b0f8:	4413      	add	r3, r2
 800b0fa:	79fa      	ldrb	r2, [r7, #7]
 800b0fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b0fe:	4b11      	ldr	r3, [pc, #68]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b100:	7a5b      	ldrb	r3, [r3, #9]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	1c5a      	adds	r2, r3, #1
 800b106:	b2d1      	uxtb	r1, r2
 800b108:	4a0e      	ldr	r2, [pc, #56]	; (800b144 <FATFS_LinkDriverEx+0x94>)
 800b10a:	7251      	strb	r1, [r2, #9]
 800b10c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b10e:	7dbb      	ldrb	r3, [r7, #22]
 800b110:	3330      	adds	r3, #48	; 0x30
 800b112:	b2da      	uxtb	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	3301      	adds	r3, #1
 800b11c:	223a      	movs	r2, #58	; 0x3a
 800b11e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	3302      	adds	r3, #2
 800b124:	222f      	movs	r2, #47	; 0x2f
 800b126:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3303      	adds	r3, #3
 800b12c:	2200      	movs	r2, #0
 800b12e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b130:	2300      	movs	r3, #0
 800b132:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b134:	7dfb      	ldrb	r3, [r7, #23]
}
 800b136:	4618      	mov	r0, r3
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	200028b0 	.word	0x200028b0

0800b148 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b152:	2200      	movs	r2, #0
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff ffaa 	bl	800b0b0 <FATFS_LinkDriverEx>
 800b15c:	4603      	mov	r3, r0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <__errno>:
 800b168:	4b01      	ldr	r3, [pc, #4]	; (800b170 <__errno+0x8>)
 800b16a:	6818      	ldr	r0, [r3, #0]
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	2000000c 	.word	0x2000000c

0800b174 <__libc_init_array>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	4d0d      	ldr	r5, [pc, #52]	; (800b1ac <__libc_init_array+0x38>)
 800b178:	4c0d      	ldr	r4, [pc, #52]	; (800b1b0 <__libc_init_array+0x3c>)
 800b17a:	1b64      	subs	r4, r4, r5
 800b17c:	10a4      	asrs	r4, r4, #2
 800b17e:	2600      	movs	r6, #0
 800b180:	42a6      	cmp	r6, r4
 800b182:	d109      	bne.n	800b198 <__libc_init_array+0x24>
 800b184:	4d0b      	ldr	r5, [pc, #44]	; (800b1b4 <__libc_init_array+0x40>)
 800b186:	4c0c      	ldr	r4, [pc, #48]	; (800b1b8 <__libc_init_array+0x44>)
 800b188:	f000 fca2 	bl	800bad0 <_init>
 800b18c:	1b64      	subs	r4, r4, r5
 800b18e:	10a4      	asrs	r4, r4, #2
 800b190:	2600      	movs	r6, #0
 800b192:	42a6      	cmp	r6, r4
 800b194:	d105      	bne.n	800b1a2 <__libc_init_array+0x2e>
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19c:	4798      	blx	r3
 800b19e:	3601      	adds	r6, #1
 800b1a0:	e7ee      	b.n	800b180 <__libc_init_array+0xc>
 800b1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a6:	4798      	blx	r3
 800b1a8:	3601      	adds	r6, #1
 800b1aa:	e7f2      	b.n	800b192 <__libc_init_array+0x1e>
 800b1ac:	0800c03c 	.word	0x0800c03c
 800b1b0:	0800c03c 	.word	0x0800c03c
 800b1b4:	0800c03c 	.word	0x0800c03c
 800b1b8:	0800c040 	.word	0x0800c040

0800b1bc <memset>:
 800b1bc:	4402      	add	r2, r0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d100      	bne.n	800b1c6 <memset+0xa>
 800b1c4:	4770      	bx	lr
 800b1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ca:	e7f9      	b.n	800b1c0 <memset+0x4>

0800b1cc <siprintf>:
 800b1cc:	b40e      	push	{r1, r2, r3}
 800b1ce:	b500      	push	{lr}
 800b1d0:	b09c      	sub	sp, #112	; 0x70
 800b1d2:	ab1d      	add	r3, sp, #116	; 0x74
 800b1d4:	9002      	str	r0, [sp, #8]
 800b1d6:	9006      	str	r0, [sp, #24]
 800b1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1dc:	4809      	ldr	r0, [pc, #36]	; (800b204 <siprintf+0x38>)
 800b1de:	9107      	str	r1, [sp, #28]
 800b1e0:	9104      	str	r1, [sp, #16]
 800b1e2:	4909      	ldr	r1, [pc, #36]	; (800b208 <siprintf+0x3c>)
 800b1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e8:	9105      	str	r1, [sp, #20]
 800b1ea:	6800      	ldr	r0, [r0, #0]
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	a902      	add	r1, sp, #8
 800b1f0:	f000 f87c 	bl	800b2ec <_svfiprintf_r>
 800b1f4:	9b02      	ldr	r3, [sp, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	b01c      	add	sp, #112	; 0x70
 800b1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b200:	b003      	add	sp, #12
 800b202:	4770      	bx	lr
 800b204:	2000000c 	.word	0x2000000c
 800b208:	ffff0208 	.word	0xffff0208

0800b20c <strncmp>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	b17a      	cbz	r2, 800b230 <strncmp+0x24>
 800b210:	4603      	mov	r3, r0
 800b212:	3901      	subs	r1, #1
 800b214:	1884      	adds	r4, r0, r2
 800b216:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b21a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b21e:	4290      	cmp	r0, r2
 800b220:	d101      	bne.n	800b226 <strncmp+0x1a>
 800b222:	42a3      	cmp	r3, r4
 800b224:	d101      	bne.n	800b22a <strncmp+0x1e>
 800b226:	1a80      	subs	r0, r0, r2
 800b228:	bd10      	pop	{r4, pc}
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d1f3      	bne.n	800b216 <strncmp+0xa>
 800b22e:	e7fa      	b.n	800b226 <strncmp+0x1a>
 800b230:	4610      	mov	r0, r2
 800b232:	e7f9      	b.n	800b228 <strncmp+0x1c>

0800b234 <__ssputs_r>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	688e      	ldr	r6, [r1, #8]
 800b23a:	429e      	cmp	r6, r3
 800b23c:	4682      	mov	sl, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	4690      	mov	r8, r2
 800b242:	461f      	mov	r7, r3
 800b244:	d838      	bhi.n	800b2b8 <__ssputs_r+0x84>
 800b246:	898a      	ldrh	r2, [r1, #12]
 800b248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b24c:	d032      	beq.n	800b2b4 <__ssputs_r+0x80>
 800b24e:	6825      	ldr	r5, [r4, #0]
 800b250:	6909      	ldr	r1, [r1, #16]
 800b252:	eba5 0901 	sub.w	r9, r5, r1
 800b256:	6965      	ldr	r5, [r4, #20]
 800b258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b25c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b260:	3301      	adds	r3, #1
 800b262:	444b      	add	r3, r9
 800b264:	106d      	asrs	r5, r5, #1
 800b266:	429d      	cmp	r5, r3
 800b268:	bf38      	it	cc
 800b26a:	461d      	movcc	r5, r3
 800b26c:	0553      	lsls	r3, r2, #21
 800b26e:	d531      	bpl.n	800b2d4 <__ssputs_r+0xa0>
 800b270:	4629      	mov	r1, r5
 800b272:	f000 fb63 	bl	800b93c <_malloc_r>
 800b276:	4606      	mov	r6, r0
 800b278:	b950      	cbnz	r0, 800b290 <__ssputs_r+0x5c>
 800b27a:	230c      	movs	r3, #12
 800b27c:	f8ca 3000 	str.w	r3, [sl]
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	f04f 30ff 	mov.w	r0, #4294967295
 800b28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b290:	6921      	ldr	r1, [r4, #16]
 800b292:	464a      	mov	r2, r9
 800b294:	f000 fabe 	bl	800b814 <memcpy>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	6126      	str	r6, [r4, #16]
 800b2a6:	6165      	str	r5, [r4, #20]
 800b2a8:	444e      	add	r6, r9
 800b2aa:	eba5 0509 	sub.w	r5, r5, r9
 800b2ae:	6026      	str	r6, [r4, #0]
 800b2b0:	60a5      	str	r5, [r4, #8]
 800b2b2:	463e      	mov	r6, r7
 800b2b4:	42be      	cmp	r6, r7
 800b2b6:	d900      	bls.n	800b2ba <__ssputs_r+0x86>
 800b2b8:	463e      	mov	r6, r7
 800b2ba:	6820      	ldr	r0, [r4, #0]
 800b2bc:	4632      	mov	r2, r6
 800b2be:	4641      	mov	r1, r8
 800b2c0:	f000 fab6 	bl	800b830 <memmove>
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	1b9b      	subs	r3, r3, r6
 800b2c8:	60a3      	str	r3, [r4, #8]
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	4433      	add	r3, r6
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e7db      	b.n	800b28c <__ssputs_r+0x58>
 800b2d4:	462a      	mov	r2, r5
 800b2d6:	f000 fba5 	bl	800ba24 <_realloc_r>
 800b2da:	4606      	mov	r6, r0
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d1e1      	bne.n	800b2a4 <__ssputs_r+0x70>
 800b2e0:	6921      	ldr	r1, [r4, #16]
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f000 fabe 	bl	800b864 <_free_r>
 800b2e8:	e7c7      	b.n	800b27a <__ssputs_r+0x46>
	...

0800b2ec <_svfiprintf_r>:
 800b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f0:	4698      	mov	r8, r3
 800b2f2:	898b      	ldrh	r3, [r1, #12]
 800b2f4:	061b      	lsls	r3, r3, #24
 800b2f6:	b09d      	sub	sp, #116	; 0x74
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	d50e      	bpl.n	800b31e <_svfiprintf_r+0x32>
 800b300:	690b      	ldr	r3, [r1, #16]
 800b302:	b963      	cbnz	r3, 800b31e <_svfiprintf_r+0x32>
 800b304:	2140      	movs	r1, #64	; 0x40
 800b306:	f000 fb19 	bl	800b93c <_malloc_r>
 800b30a:	6028      	str	r0, [r5, #0]
 800b30c:	6128      	str	r0, [r5, #16]
 800b30e:	b920      	cbnz	r0, 800b31a <_svfiprintf_r+0x2e>
 800b310:	230c      	movs	r3, #12
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	e0d1      	b.n	800b4be <_svfiprintf_r+0x1d2>
 800b31a:	2340      	movs	r3, #64	; 0x40
 800b31c:	616b      	str	r3, [r5, #20]
 800b31e:	2300      	movs	r3, #0
 800b320:	9309      	str	r3, [sp, #36]	; 0x24
 800b322:	2320      	movs	r3, #32
 800b324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b328:	f8cd 800c 	str.w	r8, [sp, #12]
 800b32c:	2330      	movs	r3, #48	; 0x30
 800b32e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b4d8 <_svfiprintf_r+0x1ec>
 800b332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b336:	f04f 0901 	mov.w	r9, #1
 800b33a:	4623      	mov	r3, r4
 800b33c:	469a      	mov	sl, r3
 800b33e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b342:	b10a      	cbz	r2, 800b348 <_svfiprintf_r+0x5c>
 800b344:	2a25      	cmp	r2, #37	; 0x25
 800b346:	d1f9      	bne.n	800b33c <_svfiprintf_r+0x50>
 800b348:	ebba 0b04 	subs.w	fp, sl, r4
 800b34c:	d00b      	beq.n	800b366 <_svfiprintf_r+0x7a>
 800b34e:	465b      	mov	r3, fp
 800b350:	4622      	mov	r2, r4
 800b352:	4629      	mov	r1, r5
 800b354:	4638      	mov	r0, r7
 800b356:	f7ff ff6d 	bl	800b234 <__ssputs_r>
 800b35a:	3001      	adds	r0, #1
 800b35c:	f000 80aa 	beq.w	800b4b4 <_svfiprintf_r+0x1c8>
 800b360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b362:	445a      	add	r2, fp
 800b364:	9209      	str	r2, [sp, #36]	; 0x24
 800b366:	f89a 3000 	ldrb.w	r3, [sl]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 80a2 	beq.w	800b4b4 <_svfiprintf_r+0x1c8>
 800b370:	2300      	movs	r3, #0
 800b372:	f04f 32ff 	mov.w	r2, #4294967295
 800b376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b37a:	f10a 0a01 	add.w	sl, sl, #1
 800b37e:	9304      	str	r3, [sp, #16]
 800b380:	9307      	str	r3, [sp, #28]
 800b382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b386:	931a      	str	r3, [sp, #104]	; 0x68
 800b388:	4654      	mov	r4, sl
 800b38a:	2205      	movs	r2, #5
 800b38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b390:	4851      	ldr	r0, [pc, #324]	; (800b4d8 <_svfiprintf_r+0x1ec>)
 800b392:	f7f4 ff35 	bl	8000200 <memchr>
 800b396:	9a04      	ldr	r2, [sp, #16]
 800b398:	b9d8      	cbnz	r0, 800b3d2 <_svfiprintf_r+0xe6>
 800b39a:	06d0      	lsls	r0, r2, #27
 800b39c:	bf44      	itt	mi
 800b39e:	2320      	movmi	r3, #32
 800b3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3a4:	0711      	lsls	r1, r2, #28
 800b3a6:	bf44      	itt	mi
 800b3a8:	232b      	movmi	r3, #43	; 0x2b
 800b3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b4:	d015      	beq.n	800b3e2 <_svfiprintf_r+0xf6>
 800b3b6:	9a07      	ldr	r2, [sp, #28]
 800b3b8:	4654      	mov	r4, sl
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f04f 0c0a 	mov.w	ip, #10
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c6:	3b30      	subs	r3, #48	; 0x30
 800b3c8:	2b09      	cmp	r3, #9
 800b3ca:	d94e      	bls.n	800b46a <_svfiprintf_r+0x17e>
 800b3cc:	b1b0      	cbz	r0, 800b3fc <_svfiprintf_r+0x110>
 800b3ce:	9207      	str	r2, [sp, #28]
 800b3d0:	e014      	b.n	800b3fc <_svfiprintf_r+0x110>
 800b3d2:	eba0 0308 	sub.w	r3, r0, r8
 800b3d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	46a2      	mov	sl, r4
 800b3e0:	e7d2      	b.n	800b388 <_svfiprintf_r+0x9c>
 800b3e2:	9b03      	ldr	r3, [sp, #12]
 800b3e4:	1d19      	adds	r1, r3, #4
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	9103      	str	r1, [sp, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	bfbb      	ittet	lt
 800b3ee:	425b      	neglt	r3, r3
 800b3f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f4:	9307      	strge	r3, [sp, #28]
 800b3f6:	9307      	strlt	r3, [sp, #28]
 800b3f8:	bfb8      	it	lt
 800b3fa:	9204      	strlt	r2, [sp, #16]
 800b3fc:	7823      	ldrb	r3, [r4, #0]
 800b3fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b400:	d10c      	bne.n	800b41c <_svfiprintf_r+0x130>
 800b402:	7863      	ldrb	r3, [r4, #1]
 800b404:	2b2a      	cmp	r3, #42	; 0x2a
 800b406:	d135      	bne.n	800b474 <_svfiprintf_r+0x188>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	1d1a      	adds	r2, r3, #4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	9203      	str	r2, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfb8      	it	lt
 800b414:	f04f 33ff 	movlt.w	r3, #4294967295
 800b418:	3402      	adds	r4, #2
 800b41a:	9305      	str	r3, [sp, #20]
 800b41c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4e8 <_svfiprintf_r+0x1fc>
 800b420:	7821      	ldrb	r1, [r4, #0]
 800b422:	2203      	movs	r2, #3
 800b424:	4650      	mov	r0, sl
 800b426:	f7f4 feeb 	bl	8000200 <memchr>
 800b42a:	b140      	cbz	r0, 800b43e <_svfiprintf_r+0x152>
 800b42c:	2340      	movs	r3, #64	; 0x40
 800b42e:	eba0 000a 	sub.w	r0, r0, sl
 800b432:	fa03 f000 	lsl.w	r0, r3, r0
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	4303      	orrs	r3, r0
 800b43a:	3401      	adds	r4, #1
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b442:	4826      	ldr	r0, [pc, #152]	; (800b4dc <_svfiprintf_r+0x1f0>)
 800b444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b448:	2206      	movs	r2, #6
 800b44a:	f7f4 fed9 	bl	8000200 <memchr>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d038      	beq.n	800b4c4 <_svfiprintf_r+0x1d8>
 800b452:	4b23      	ldr	r3, [pc, #140]	; (800b4e0 <_svfiprintf_r+0x1f4>)
 800b454:	bb1b      	cbnz	r3, 800b49e <_svfiprintf_r+0x1b2>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	3307      	adds	r3, #7
 800b45a:	f023 0307 	bic.w	r3, r3, #7
 800b45e:	3308      	adds	r3, #8
 800b460:	9303      	str	r3, [sp, #12]
 800b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b464:	4433      	add	r3, r6
 800b466:	9309      	str	r3, [sp, #36]	; 0x24
 800b468:	e767      	b.n	800b33a <_svfiprintf_r+0x4e>
 800b46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b46e:	460c      	mov	r4, r1
 800b470:	2001      	movs	r0, #1
 800b472:	e7a5      	b.n	800b3c0 <_svfiprintf_r+0xd4>
 800b474:	2300      	movs	r3, #0
 800b476:	3401      	adds	r4, #1
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	4619      	mov	r1, r3
 800b47c:	f04f 0c0a 	mov.w	ip, #10
 800b480:	4620      	mov	r0, r4
 800b482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b486:	3a30      	subs	r2, #48	; 0x30
 800b488:	2a09      	cmp	r2, #9
 800b48a:	d903      	bls.n	800b494 <_svfiprintf_r+0x1a8>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0c5      	beq.n	800b41c <_svfiprintf_r+0x130>
 800b490:	9105      	str	r1, [sp, #20]
 800b492:	e7c3      	b.n	800b41c <_svfiprintf_r+0x130>
 800b494:	fb0c 2101 	mla	r1, ip, r1, r2
 800b498:	4604      	mov	r4, r0
 800b49a:	2301      	movs	r3, #1
 800b49c:	e7f0      	b.n	800b480 <_svfiprintf_r+0x194>
 800b49e:	ab03      	add	r3, sp, #12
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	; (800b4e4 <_svfiprintf_r+0x1f8>)
 800b4a6:	a904      	add	r1, sp, #16
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f3af 8000 	nop.w
 800b4ae:	1c42      	adds	r2, r0, #1
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	d1d6      	bne.n	800b462 <_svfiprintf_r+0x176>
 800b4b4:	89ab      	ldrh	r3, [r5, #12]
 800b4b6:	065b      	lsls	r3, r3, #25
 800b4b8:	f53f af2c 	bmi.w	800b314 <_svfiprintf_r+0x28>
 800b4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4be:	b01d      	add	sp, #116	; 0x74
 800b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c4:	ab03      	add	r3, sp, #12
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	462a      	mov	r2, r5
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <_svfiprintf_r+0x1f8>)
 800b4cc:	a904      	add	r1, sp, #16
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f000 f87a 	bl	800b5c8 <_printf_i>
 800b4d4:	e7eb      	b.n	800b4ae <_svfiprintf_r+0x1c2>
 800b4d6:	bf00      	nop
 800b4d8:	0800c000 	.word	0x0800c000
 800b4dc:	0800c00a 	.word	0x0800c00a
 800b4e0:	00000000 	.word	0x00000000
 800b4e4:	0800b235 	.word	0x0800b235
 800b4e8:	0800c006 	.word	0x0800c006

0800b4ec <_printf_common>:
 800b4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	4616      	mov	r6, r2
 800b4f2:	4699      	mov	r9, r3
 800b4f4:	688a      	ldr	r2, [r1, #8]
 800b4f6:	690b      	ldr	r3, [r1, #16]
 800b4f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	bfb8      	it	lt
 800b500:	4613      	movlt	r3, r2
 800b502:	6033      	str	r3, [r6, #0]
 800b504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b508:	4607      	mov	r7, r0
 800b50a:	460c      	mov	r4, r1
 800b50c:	b10a      	cbz	r2, 800b512 <_printf_common+0x26>
 800b50e:	3301      	adds	r3, #1
 800b510:	6033      	str	r3, [r6, #0]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	0699      	lsls	r1, r3, #26
 800b516:	bf42      	ittt	mi
 800b518:	6833      	ldrmi	r3, [r6, #0]
 800b51a:	3302      	addmi	r3, #2
 800b51c:	6033      	strmi	r3, [r6, #0]
 800b51e:	6825      	ldr	r5, [r4, #0]
 800b520:	f015 0506 	ands.w	r5, r5, #6
 800b524:	d106      	bne.n	800b534 <_printf_common+0x48>
 800b526:	f104 0a19 	add.w	sl, r4, #25
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	6832      	ldr	r2, [r6, #0]
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	42ab      	cmp	r3, r5
 800b532:	dc26      	bgt.n	800b582 <_printf_common+0x96>
 800b534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b538:	1e13      	subs	r3, r2, #0
 800b53a:	6822      	ldr	r2, [r4, #0]
 800b53c:	bf18      	it	ne
 800b53e:	2301      	movne	r3, #1
 800b540:	0692      	lsls	r2, r2, #26
 800b542:	d42b      	bmi.n	800b59c <_printf_common+0xb0>
 800b544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b548:	4649      	mov	r1, r9
 800b54a:	4638      	mov	r0, r7
 800b54c:	47c0      	blx	r8
 800b54e:	3001      	adds	r0, #1
 800b550:	d01e      	beq.n	800b590 <_printf_common+0xa4>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	68e5      	ldr	r5, [r4, #12]
 800b556:	6832      	ldr	r2, [r6, #0]
 800b558:	f003 0306 	and.w	r3, r3, #6
 800b55c:	2b04      	cmp	r3, #4
 800b55e:	bf08      	it	eq
 800b560:	1aad      	subeq	r5, r5, r2
 800b562:	68a3      	ldr	r3, [r4, #8]
 800b564:	6922      	ldr	r2, [r4, #16]
 800b566:	bf0c      	ite	eq
 800b568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b56c:	2500      	movne	r5, #0
 800b56e:	4293      	cmp	r3, r2
 800b570:	bfc4      	itt	gt
 800b572:	1a9b      	subgt	r3, r3, r2
 800b574:	18ed      	addgt	r5, r5, r3
 800b576:	2600      	movs	r6, #0
 800b578:	341a      	adds	r4, #26
 800b57a:	42b5      	cmp	r5, r6
 800b57c:	d11a      	bne.n	800b5b4 <_printf_common+0xc8>
 800b57e:	2000      	movs	r0, #0
 800b580:	e008      	b.n	800b594 <_printf_common+0xa8>
 800b582:	2301      	movs	r3, #1
 800b584:	4652      	mov	r2, sl
 800b586:	4649      	mov	r1, r9
 800b588:	4638      	mov	r0, r7
 800b58a:	47c0      	blx	r8
 800b58c:	3001      	adds	r0, #1
 800b58e:	d103      	bne.n	800b598 <_printf_common+0xac>
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b598:	3501      	adds	r5, #1
 800b59a:	e7c6      	b.n	800b52a <_printf_common+0x3e>
 800b59c:	18e1      	adds	r1, r4, r3
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	2030      	movs	r0, #48	; 0x30
 800b5a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5a6:	4422      	add	r2, r4
 800b5a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	e7c7      	b.n	800b544 <_printf_common+0x58>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	47c0      	blx	r8
 800b5be:	3001      	adds	r0, #1
 800b5c0:	d0e6      	beq.n	800b590 <_printf_common+0xa4>
 800b5c2:	3601      	adds	r6, #1
 800b5c4:	e7d9      	b.n	800b57a <_printf_common+0x8e>
	...

0800b5c8 <_printf_i>:
 800b5c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5cc:	7e0f      	ldrb	r7, [r1, #24]
 800b5ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5d0:	2f78      	cmp	r7, #120	; 0x78
 800b5d2:	4691      	mov	r9, r2
 800b5d4:	4680      	mov	r8, r0
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	469a      	mov	sl, r3
 800b5da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5de:	d807      	bhi.n	800b5f0 <_printf_i+0x28>
 800b5e0:	2f62      	cmp	r7, #98	; 0x62
 800b5e2:	d80a      	bhi.n	800b5fa <_printf_i+0x32>
 800b5e4:	2f00      	cmp	r7, #0
 800b5e6:	f000 80d8 	beq.w	800b79a <_printf_i+0x1d2>
 800b5ea:	2f58      	cmp	r7, #88	; 0x58
 800b5ec:	f000 80a3 	beq.w	800b736 <_printf_i+0x16e>
 800b5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5f8:	e03a      	b.n	800b670 <_printf_i+0xa8>
 800b5fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5fe:	2b15      	cmp	r3, #21
 800b600:	d8f6      	bhi.n	800b5f0 <_printf_i+0x28>
 800b602:	a101      	add	r1, pc, #4	; (adr r1, 800b608 <_printf_i+0x40>)
 800b604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b608:	0800b661 	.word	0x0800b661
 800b60c:	0800b675 	.word	0x0800b675
 800b610:	0800b5f1 	.word	0x0800b5f1
 800b614:	0800b5f1 	.word	0x0800b5f1
 800b618:	0800b5f1 	.word	0x0800b5f1
 800b61c:	0800b5f1 	.word	0x0800b5f1
 800b620:	0800b675 	.word	0x0800b675
 800b624:	0800b5f1 	.word	0x0800b5f1
 800b628:	0800b5f1 	.word	0x0800b5f1
 800b62c:	0800b5f1 	.word	0x0800b5f1
 800b630:	0800b5f1 	.word	0x0800b5f1
 800b634:	0800b781 	.word	0x0800b781
 800b638:	0800b6a5 	.word	0x0800b6a5
 800b63c:	0800b763 	.word	0x0800b763
 800b640:	0800b5f1 	.word	0x0800b5f1
 800b644:	0800b5f1 	.word	0x0800b5f1
 800b648:	0800b7a3 	.word	0x0800b7a3
 800b64c:	0800b5f1 	.word	0x0800b5f1
 800b650:	0800b6a5 	.word	0x0800b6a5
 800b654:	0800b5f1 	.word	0x0800b5f1
 800b658:	0800b5f1 	.word	0x0800b5f1
 800b65c:	0800b76b 	.word	0x0800b76b
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	1d1a      	adds	r2, r3, #4
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	602a      	str	r2, [r5, #0]
 800b668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b66c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b670:	2301      	movs	r3, #1
 800b672:	e0a3      	b.n	800b7bc <_printf_i+0x1f4>
 800b674:	6820      	ldr	r0, [r4, #0]
 800b676:	6829      	ldr	r1, [r5, #0]
 800b678:	0606      	lsls	r6, r0, #24
 800b67a:	f101 0304 	add.w	r3, r1, #4
 800b67e:	d50a      	bpl.n	800b696 <_printf_i+0xce>
 800b680:	680e      	ldr	r6, [r1, #0]
 800b682:	602b      	str	r3, [r5, #0]
 800b684:	2e00      	cmp	r6, #0
 800b686:	da03      	bge.n	800b690 <_printf_i+0xc8>
 800b688:	232d      	movs	r3, #45	; 0x2d
 800b68a:	4276      	negs	r6, r6
 800b68c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b690:	485e      	ldr	r0, [pc, #376]	; (800b80c <_printf_i+0x244>)
 800b692:	230a      	movs	r3, #10
 800b694:	e019      	b.n	800b6ca <_printf_i+0x102>
 800b696:	680e      	ldr	r6, [r1, #0]
 800b698:	602b      	str	r3, [r5, #0]
 800b69a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b69e:	bf18      	it	ne
 800b6a0:	b236      	sxthne	r6, r6
 800b6a2:	e7ef      	b.n	800b684 <_printf_i+0xbc>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	6820      	ldr	r0, [r4, #0]
 800b6a8:	1d19      	adds	r1, r3, #4
 800b6aa:	6029      	str	r1, [r5, #0]
 800b6ac:	0601      	lsls	r1, r0, #24
 800b6ae:	d501      	bpl.n	800b6b4 <_printf_i+0xec>
 800b6b0:	681e      	ldr	r6, [r3, #0]
 800b6b2:	e002      	b.n	800b6ba <_printf_i+0xf2>
 800b6b4:	0646      	lsls	r6, r0, #25
 800b6b6:	d5fb      	bpl.n	800b6b0 <_printf_i+0xe8>
 800b6b8:	881e      	ldrh	r6, [r3, #0]
 800b6ba:	4854      	ldr	r0, [pc, #336]	; (800b80c <_printf_i+0x244>)
 800b6bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b6be:	bf0c      	ite	eq
 800b6c0:	2308      	moveq	r3, #8
 800b6c2:	230a      	movne	r3, #10
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6ca:	6865      	ldr	r5, [r4, #4]
 800b6cc:	60a5      	str	r5, [r4, #8]
 800b6ce:	2d00      	cmp	r5, #0
 800b6d0:	bfa2      	ittt	ge
 800b6d2:	6821      	ldrge	r1, [r4, #0]
 800b6d4:	f021 0104 	bicge.w	r1, r1, #4
 800b6d8:	6021      	strge	r1, [r4, #0]
 800b6da:	b90e      	cbnz	r6, 800b6e0 <_printf_i+0x118>
 800b6dc:	2d00      	cmp	r5, #0
 800b6de:	d04d      	beq.n	800b77c <_printf_i+0x1b4>
 800b6e0:	4615      	mov	r5, r2
 800b6e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6e6:	fb03 6711 	mls	r7, r3, r1, r6
 800b6ea:	5dc7      	ldrb	r7, [r0, r7]
 800b6ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6f0:	4637      	mov	r7, r6
 800b6f2:	42bb      	cmp	r3, r7
 800b6f4:	460e      	mov	r6, r1
 800b6f6:	d9f4      	bls.n	800b6e2 <_printf_i+0x11a>
 800b6f8:	2b08      	cmp	r3, #8
 800b6fa:	d10b      	bne.n	800b714 <_printf_i+0x14c>
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	07de      	lsls	r6, r3, #31
 800b700:	d508      	bpl.n	800b714 <_printf_i+0x14c>
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	6861      	ldr	r1, [r4, #4]
 800b706:	4299      	cmp	r1, r3
 800b708:	bfde      	ittt	le
 800b70a:	2330      	movle	r3, #48	; 0x30
 800b70c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b710:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b714:	1b52      	subs	r2, r2, r5
 800b716:	6122      	str	r2, [r4, #16]
 800b718:	f8cd a000 	str.w	sl, [sp]
 800b71c:	464b      	mov	r3, r9
 800b71e:	aa03      	add	r2, sp, #12
 800b720:	4621      	mov	r1, r4
 800b722:	4640      	mov	r0, r8
 800b724:	f7ff fee2 	bl	800b4ec <_printf_common>
 800b728:	3001      	adds	r0, #1
 800b72a:	d14c      	bne.n	800b7c6 <_printf_i+0x1fe>
 800b72c:	f04f 30ff 	mov.w	r0, #4294967295
 800b730:	b004      	add	sp, #16
 800b732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b736:	4835      	ldr	r0, [pc, #212]	; (800b80c <_printf_i+0x244>)
 800b738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b73c:	6829      	ldr	r1, [r5, #0]
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	f851 6b04 	ldr.w	r6, [r1], #4
 800b744:	6029      	str	r1, [r5, #0]
 800b746:	061d      	lsls	r5, r3, #24
 800b748:	d514      	bpl.n	800b774 <_printf_i+0x1ac>
 800b74a:	07df      	lsls	r7, r3, #31
 800b74c:	bf44      	itt	mi
 800b74e:	f043 0320 	orrmi.w	r3, r3, #32
 800b752:	6023      	strmi	r3, [r4, #0]
 800b754:	b91e      	cbnz	r6, 800b75e <_printf_i+0x196>
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	f023 0320 	bic.w	r3, r3, #32
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	2310      	movs	r3, #16
 800b760:	e7b0      	b.n	800b6c4 <_printf_i+0xfc>
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	f043 0320 	orr.w	r3, r3, #32
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	2378      	movs	r3, #120	; 0x78
 800b76c:	4828      	ldr	r0, [pc, #160]	; (800b810 <_printf_i+0x248>)
 800b76e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b772:	e7e3      	b.n	800b73c <_printf_i+0x174>
 800b774:	0659      	lsls	r1, r3, #25
 800b776:	bf48      	it	mi
 800b778:	b2b6      	uxthmi	r6, r6
 800b77a:	e7e6      	b.n	800b74a <_printf_i+0x182>
 800b77c:	4615      	mov	r5, r2
 800b77e:	e7bb      	b.n	800b6f8 <_printf_i+0x130>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	6826      	ldr	r6, [r4, #0]
 800b784:	6961      	ldr	r1, [r4, #20]
 800b786:	1d18      	adds	r0, r3, #4
 800b788:	6028      	str	r0, [r5, #0]
 800b78a:	0635      	lsls	r5, r6, #24
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	d501      	bpl.n	800b794 <_printf_i+0x1cc>
 800b790:	6019      	str	r1, [r3, #0]
 800b792:	e002      	b.n	800b79a <_printf_i+0x1d2>
 800b794:	0670      	lsls	r0, r6, #25
 800b796:	d5fb      	bpl.n	800b790 <_printf_i+0x1c8>
 800b798:	8019      	strh	r1, [r3, #0]
 800b79a:	2300      	movs	r3, #0
 800b79c:	6123      	str	r3, [r4, #16]
 800b79e:	4615      	mov	r5, r2
 800b7a0:	e7ba      	b.n	800b718 <_printf_i+0x150>
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	1d1a      	adds	r2, r3, #4
 800b7a6:	602a      	str	r2, [r5, #0]
 800b7a8:	681d      	ldr	r5, [r3, #0]
 800b7aa:	6862      	ldr	r2, [r4, #4]
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f7f4 fd26 	bl	8000200 <memchr>
 800b7b4:	b108      	cbz	r0, 800b7ba <_printf_i+0x1f2>
 800b7b6:	1b40      	subs	r0, r0, r5
 800b7b8:	6060      	str	r0, [r4, #4]
 800b7ba:	6863      	ldr	r3, [r4, #4]
 800b7bc:	6123      	str	r3, [r4, #16]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7c4:	e7a8      	b.n	800b718 <_printf_i+0x150>
 800b7c6:	6923      	ldr	r3, [r4, #16]
 800b7c8:	462a      	mov	r2, r5
 800b7ca:	4649      	mov	r1, r9
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	47d0      	blx	sl
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d0ab      	beq.n	800b72c <_printf_i+0x164>
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	079b      	lsls	r3, r3, #30
 800b7d8:	d413      	bmi.n	800b802 <_printf_i+0x23a>
 800b7da:	68e0      	ldr	r0, [r4, #12]
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	4298      	cmp	r0, r3
 800b7e0:	bfb8      	it	lt
 800b7e2:	4618      	movlt	r0, r3
 800b7e4:	e7a4      	b.n	800b730 <_printf_i+0x168>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	47d0      	blx	sl
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d09b      	beq.n	800b72c <_printf_i+0x164>
 800b7f4:	3501      	adds	r5, #1
 800b7f6:	68e3      	ldr	r3, [r4, #12]
 800b7f8:	9903      	ldr	r1, [sp, #12]
 800b7fa:	1a5b      	subs	r3, r3, r1
 800b7fc:	42ab      	cmp	r3, r5
 800b7fe:	dcf2      	bgt.n	800b7e6 <_printf_i+0x21e>
 800b800:	e7eb      	b.n	800b7da <_printf_i+0x212>
 800b802:	2500      	movs	r5, #0
 800b804:	f104 0619 	add.w	r6, r4, #25
 800b808:	e7f5      	b.n	800b7f6 <_printf_i+0x22e>
 800b80a:	bf00      	nop
 800b80c:	0800c011 	.word	0x0800c011
 800b810:	0800c022 	.word	0x0800c022

0800b814 <memcpy>:
 800b814:	440a      	add	r2, r1
 800b816:	4291      	cmp	r1, r2
 800b818:	f100 33ff 	add.w	r3, r0, #4294967295
 800b81c:	d100      	bne.n	800b820 <memcpy+0xc>
 800b81e:	4770      	bx	lr
 800b820:	b510      	push	{r4, lr}
 800b822:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b82a:	4291      	cmp	r1, r2
 800b82c:	d1f9      	bne.n	800b822 <memcpy+0xe>
 800b82e:	bd10      	pop	{r4, pc}

0800b830 <memmove>:
 800b830:	4288      	cmp	r0, r1
 800b832:	b510      	push	{r4, lr}
 800b834:	eb01 0402 	add.w	r4, r1, r2
 800b838:	d902      	bls.n	800b840 <memmove+0x10>
 800b83a:	4284      	cmp	r4, r0
 800b83c:	4623      	mov	r3, r4
 800b83e:	d807      	bhi.n	800b850 <memmove+0x20>
 800b840:	1e43      	subs	r3, r0, #1
 800b842:	42a1      	cmp	r1, r4
 800b844:	d008      	beq.n	800b858 <memmove+0x28>
 800b846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b84a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b84e:	e7f8      	b.n	800b842 <memmove+0x12>
 800b850:	4402      	add	r2, r0
 800b852:	4601      	mov	r1, r0
 800b854:	428a      	cmp	r2, r1
 800b856:	d100      	bne.n	800b85a <memmove+0x2a>
 800b858:	bd10      	pop	{r4, pc}
 800b85a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b85e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b862:	e7f7      	b.n	800b854 <memmove+0x24>

0800b864 <_free_r>:
 800b864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b866:	2900      	cmp	r1, #0
 800b868:	d044      	beq.n	800b8f4 <_free_r+0x90>
 800b86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b86e:	9001      	str	r0, [sp, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f1a1 0404 	sub.w	r4, r1, #4
 800b876:	bfb8      	it	lt
 800b878:	18e4      	addlt	r4, r4, r3
 800b87a:	f000 f913 	bl	800baa4 <__malloc_lock>
 800b87e:	4a1e      	ldr	r2, [pc, #120]	; (800b8f8 <_free_r+0x94>)
 800b880:	9801      	ldr	r0, [sp, #4]
 800b882:	6813      	ldr	r3, [r2, #0]
 800b884:	b933      	cbnz	r3, 800b894 <_free_r+0x30>
 800b886:	6063      	str	r3, [r4, #4]
 800b888:	6014      	str	r4, [r2, #0]
 800b88a:	b003      	add	sp, #12
 800b88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b890:	f000 b90e 	b.w	800bab0 <__malloc_unlock>
 800b894:	42a3      	cmp	r3, r4
 800b896:	d908      	bls.n	800b8aa <_free_r+0x46>
 800b898:	6825      	ldr	r5, [r4, #0]
 800b89a:	1961      	adds	r1, r4, r5
 800b89c:	428b      	cmp	r3, r1
 800b89e:	bf01      	itttt	eq
 800b8a0:	6819      	ldreq	r1, [r3, #0]
 800b8a2:	685b      	ldreq	r3, [r3, #4]
 800b8a4:	1949      	addeq	r1, r1, r5
 800b8a6:	6021      	streq	r1, [r4, #0]
 800b8a8:	e7ed      	b.n	800b886 <_free_r+0x22>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	b10b      	cbz	r3, 800b8b4 <_free_r+0x50>
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d9fa      	bls.n	800b8aa <_free_r+0x46>
 800b8b4:	6811      	ldr	r1, [r2, #0]
 800b8b6:	1855      	adds	r5, r2, r1
 800b8b8:	42a5      	cmp	r5, r4
 800b8ba:	d10b      	bne.n	800b8d4 <_free_r+0x70>
 800b8bc:	6824      	ldr	r4, [r4, #0]
 800b8be:	4421      	add	r1, r4
 800b8c0:	1854      	adds	r4, r2, r1
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	d1e0      	bne.n	800b88a <_free_r+0x26>
 800b8c8:	681c      	ldr	r4, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	6053      	str	r3, [r2, #4]
 800b8ce:	4421      	add	r1, r4
 800b8d0:	6011      	str	r1, [r2, #0]
 800b8d2:	e7da      	b.n	800b88a <_free_r+0x26>
 800b8d4:	d902      	bls.n	800b8dc <_free_r+0x78>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	6003      	str	r3, [r0, #0]
 800b8da:	e7d6      	b.n	800b88a <_free_r+0x26>
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	1961      	adds	r1, r4, r5
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf04      	itt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	bf04      	itt	eq
 800b8ec:	1949      	addeq	r1, r1, r5
 800b8ee:	6021      	streq	r1, [r4, #0]
 800b8f0:	6054      	str	r4, [r2, #4]
 800b8f2:	e7ca      	b.n	800b88a <_free_r+0x26>
 800b8f4:	b003      	add	sp, #12
 800b8f6:	bd30      	pop	{r4, r5, pc}
 800b8f8:	200028bc 	.word	0x200028bc

0800b8fc <sbrk_aligned>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	4e0e      	ldr	r6, [pc, #56]	; (800b938 <sbrk_aligned+0x3c>)
 800b900:	460c      	mov	r4, r1
 800b902:	6831      	ldr	r1, [r6, #0]
 800b904:	4605      	mov	r5, r0
 800b906:	b911      	cbnz	r1, 800b90e <sbrk_aligned+0x12>
 800b908:	f000 f8bc 	bl	800ba84 <_sbrk_r>
 800b90c:	6030      	str	r0, [r6, #0]
 800b90e:	4621      	mov	r1, r4
 800b910:	4628      	mov	r0, r5
 800b912:	f000 f8b7 	bl	800ba84 <_sbrk_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d00a      	beq.n	800b930 <sbrk_aligned+0x34>
 800b91a:	1cc4      	adds	r4, r0, #3
 800b91c:	f024 0403 	bic.w	r4, r4, #3
 800b920:	42a0      	cmp	r0, r4
 800b922:	d007      	beq.n	800b934 <sbrk_aligned+0x38>
 800b924:	1a21      	subs	r1, r4, r0
 800b926:	4628      	mov	r0, r5
 800b928:	f000 f8ac 	bl	800ba84 <_sbrk_r>
 800b92c:	3001      	adds	r0, #1
 800b92e:	d101      	bne.n	800b934 <sbrk_aligned+0x38>
 800b930:	f04f 34ff 	mov.w	r4, #4294967295
 800b934:	4620      	mov	r0, r4
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	200028c0 	.word	0x200028c0

0800b93c <_malloc_r>:
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	1ccd      	adds	r5, r1, #3
 800b942:	f025 0503 	bic.w	r5, r5, #3
 800b946:	3508      	adds	r5, #8
 800b948:	2d0c      	cmp	r5, #12
 800b94a:	bf38      	it	cc
 800b94c:	250c      	movcc	r5, #12
 800b94e:	2d00      	cmp	r5, #0
 800b950:	4607      	mov	r7, r0
 800b952:	db01      	blt.n	800b958 <_malloc_r+0x1c>
 800b954:	42a9      	cmp	r1, r5
 800b956:	d905      	bls.n	800b964 <_malloc_r+0x28>
 800b958:	230c      	movs	r3, #12
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	2600      	movs	r6, #0
 800b95e:	4630      	mov	r0, r6
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b964:	4e2e      	ldr	r6, [pc, #184]	; (800ba20 <_malloc_r+0xe4>)
 800b966:	f000 f89d 	bl	800baa4 <__malloc_lock>
 800b96a:	6833      	ldr	r3, [r6, #0]
 800b96c:	461c      	mov	r4, r3
 800b96e:	bb34      	cbnz	r4, 800b9be <_malloc_r+0x82>
 800b970:	4629      	mov	r1, r5
 800b972:	4638      	mov	r0, r7
 800b974:	f7ff ffc2 	bl	800b8fc <sbrk_aligned>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	4604      	mov	r4, r0
 800b97c:	d14d      	bne.n	800ba1a <_malloc_r+0xde>
 800b97e:	6834      	ldr	r4, [r6, #0]
 800b980:	4626      	mov	r6, r4
 800b982:	2e00      	cmp	r6, #0
 800b984:	d140      	bne.n	800ba08 <_malloc_r+0xcc>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	4631      	mov	r1, r6
 800b98a:	4638      	mov	r0, r7
 800b98c:	eb04 0803 	add.w	r8, r4, r3
 800b990:	f000 f878 	bl	800ba84 <_sbrk_r>
 800b994:	4580      	cmp	r8, r0
 800b996:	d13a      	bne.n	800ba0e <_malloc_r+0xd2>
 800b998:	6821      	ldr	r1, [r4, #0]
 800b99a:	3503      	adds	r5, #3
 800b99c:	1a6d      	subs	r5, r5, r1
 800b99e:	f025 0503 	bic.w	r5, r5, #3
 800b9a2:	3508      	adds	r5, #8
 800b9a4:	2d0c      	cmp	r5, #12
 800b9a6:	bf38      	it	cc
 800b9a8:	250c      	movcc	r5, #12
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff ffa5 	bl	800b8fc <sbrk_aligned>
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d02b      	beq.n	800ba0e <_malloc_r+0xd2>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	442b      	add	r3, r5
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	e00e      	b.n	800b9dc <_malloc_r+0xa0>
 800b9be:	6822      	ldr	r2, [r4, #0]
 800b9c0:	1b52      	subs	r2, r2, r5
 800b9c2:	d41e      	bmi.n	800ba02 <_malloc_r+0xc6>
 800b9c4:	2a0b      	cmp	r2, #11
 800b9c6:	d916      	bls.n	800b9f6 <_malloc_r+0xba>
 800b9c8:	1961      	adds	r1, r4, r5
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	6025      	str	r5, [r4, #0]
 800b9ce:	bf18      	it	ne
 800b9d0:	6059      	strne	r1, [r3, #4]
 800b9d2:	6863      	ldr	r3, [r4, #4]
 800b9d4:	bf08      	it	eq
 800b9d6:	6031      	streq	r1, [r6, #0]
 800b9d8:	5162      	str	r2, [r4, r5]
 800b9da:	604b      	str	r3, [r1, #4]
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f104 060b 	add.w	r6, r4, #11
 800b9e2:	f000 f865 	bl	800bab0 <__malloc_unlock>
 800b9e6:	f026 0607 	bic.w	r6, r6, #7
 800b9ea:	1d23      	adds	r3, r4, #4
 800b9ec:	1af2      	subs	r2, r6, r3
 800b9ee:	d0b6      	beq.n	800b95e <_malloc_r+0x22>
 800b9f0:	1b9b      	subs	r3, r3, r6
 800b9f2:	50a3      	str	r3, [r4, r2]
 800b9f4:	e7b3      	b.n	800b95e <_malloc_r+0x22>
 800b9f6:	6862      	ldr	r2, [r4, #4]
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	bf0c      	ite	eq
 800b9fc:	6032      	streq	r2, [r6, #0]
 800b9fe:	605a      	strne	r2, [r3, #4]
 800ba00:	e7ec      	b.n	800b9dc <_malloc_r+0xa0>
 800ba02:	4623      	mov	r3, r4
 800ba04:	6864      	ldr	r4, [r4, #4]
 800ba06:	e7b2      	b.n	800b96e <_malloc_r+0x32>
 800ba08:	4634      	mov	r4, r6
 800ba0a:	6876      	ldr	r6, [r6, #4]
 800ba0c:	e7b9      	b.n	800b982 <_malloc_r+0x46>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	4638      	mov	r0, r7
 800ba14:	f000 f84c 	bl	800bab0 <__malloc_unlock>
 800ba18:	e7a1      	b.n	800b95e <_malloc_r+0x22>
 800ba1a:	6025      	str	r5, [r4, #0]
 800ba1c:	e7de      	b.n	800b9dc <_malloc_r+0xa0>
 800ba1e:	bf00      	nop
 800ba20:	200028bc 	.word	0x200028bc

0800ba24 <_realloc_r>:
 800ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba28:	4680      	mov	r8, r0
 800ba2a:	4614      	mov	r4, r2
 800ba2c:	460e      	mov	r6, r1
 800ba2e:	b921      	cbnz	r1, 800ba3a <_realloc_r+0x16>
 800ba30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	4611      	mov	r1, r2
 800ba36:	f7ff bf81 	b.w	800b93c <_malloc_r>
 800ba3a:	b92a      	cbnz	r2, 800ba48 <_realloc_r+0x24>
 800ba3c:	f7ff ff12 	bl	800b864 <_free_r>
 800ba40:	4625      	mov	r5, r4
 800ba42:	4628      	mov	r0, r5
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	f000 f838 	bl	800babc <_malloc_usable_size_r>
 800ba4c:	4284      	cmp	r4, r0
 800ba4e:	4607      	mov	r7, r0
 800ba50:	d802      	bhi.n	800ba58 <_realloc_r+0x34>
 800ba52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba56:	d812      	bhi.n	800ba7e <_realloc_r+0x5a>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4640      	mov	r0, r8
 800ba5c:	f7ff ff6e 	bl	800b93c <_malloc_r>
 800ba60:	4605      	mov	r5, r0
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d0ed      	beq.n	800ba42 <_realloc_r+0x1e>
 800ba66:	42bc      	cmp	r4, r7
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	bf28      	it	cs
 800ba6e:	463a      	movcs	r2, r7
 800ba70:	f7ff fed0 	bl	800b814 <memcpy>
 800ba74:	4631      	mov	r1, r6
 800ba76:	4640      	mov	r0, r8
 800ba78:	f7ff fef4 	bl	800b864 <_free_r>
 800ba7c:	e7e1      	b.n	800ba42 <_realloc_r+0x1e>
 800ba7e:	4635      	mov	r5, r6
 800ba80:	e7df      	b.n	800ba42 <_realloc_r+0x1e>
	...

0800ba84 <_sbrk_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d06      	ldr	r5, [pc, #24]	; (800baa0 <_sbrk_r+0x1c>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	602b      	str	r3, [r5, #0]
 800ba90:	f7f6 fc18 	bl	80022c4 <_sbrk>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_sbrk_r+0x1a>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_sbrk_r+0x1a>
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	200028c4 	.word	0x200028c4

0800baa4 <__malloc_lock>:
 800baa4:	4801      	ldr	r0, [pc, #4]	; (800baac <__malloc_lock+0x8>)
 800baa6:	f000 b811 	b.w	800bacc <__retarget_lock_acquire_recursive>
 800baaa:	bf00      	nop
 800baac:	200028c8 	.word	0x200028c8

0800bab0 <__malloc_unlock>:
 800bab0:	4801      	ldr	r0, [pc, #4]	; (800bab8 <__malloc_unlock+0x8>)
 800bab2:	f000 b80c 	b.w	800bace <__retarget_lock_release_recursive>
 800bab6:	bf00      	nop
 800bab8:	200028c8 	.word	0x200028c8

0800babc <_malloc_usable_size_r>:
 800babc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac0:	1f18      	subs	r0, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfbc      	itt	lt
 800bac6:	580b      	ldrlt	r3, [r1, r0]
 800bac8:	18c0      	addlt	r0, r0, r3
 800baca:	4770      	bx	lr

0800bacc <__retarget_lock_acquire_recursive>:
 800bacc:	4770      	bx	lr

0800bace <__retarget_lock_release_recursive>:
 800bace:	4770      	bx	lr

0800bad0 <_init>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	bf00      	nop
 800bad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad6:	bc08      	pop	{r3}
 800bad8:	469e      	mov	lr, r3
 800bada:	4770      	bx	lr

0800badc <_fini>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr
